# Generated from data/CypherParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,293,3551,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,1,0,1,0,1,0,5,0,
        528,8,0,10,0,12,0,531,9,0,1,0,3,0,534,8,0,1,0,1,0,1,1,3,1,539,8,
        1,1,1,1,1,1,1,1,1,3,1,545,8,1,1,2,1,2,1,2,1,2,5,2,551,8,2,10,2,12,
        2,554,9,2,3,2,556,8,2,1,3,1,3,1,3,1,3,5,3,562,8,3,10,3,12,3,565,
        9,3,3,3,567,8,3,1,4,1,4,1,4,1,4,3,4,573,8,4,1,5,1,5,5,5,577,8,5,
        10,5,12,5,580,9,5,1,6,1,6,3,6,584,8,6,1,6,1,6,1,7,4,7,589,8,7,11,
        7,12,7,590,1,8,5,8,594,8,8,10,8,12,8,597,9,8,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,613,8,9,1,10,1,10,1,10,1,
        10,3,10,619,8,10,1,11,1,11,1,11,1,12,3,12,625,8,12,1,12,1,12,1,12,
        1,12,1,12,1,12,5,12,633,8,12,10,12,12,12,636,9,12,3,12,638,8,12,
        1,12,3,12,641,8,12,1,12,3,12,644,8,12,1,13,1,13,1,13,3,13,649,8,
        13,1,14,1,14,1,14,5,14,654,8,14,10,14,12,14,657,9,14,1,14,1,14,1,
        14,5,14,662,8,14,10,14,12,14,665,9,14,3,14,667,8,14,1,15,1,15,1,
        15,3,15,672,8,15,3,15,674,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
        1,18,1,18,1,19,1,19,1,19,3,19,688,8,19,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,5,21,697,8,21,10,21,12,21,700,9,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,717,
        8,22,1,23,1,23,1,23,1,23,5,23,723,8,23,10,23,12,23,726,9,23,1,24,
        1,24,1,24,1,24,3,24,732,8,24,1,25,3,25,735,8,25,1,25,1,25,1,25,1,
        25,5,25,741,8,25,10,25,12,25,744,9,25,1,26,1,26,1,26,3,26,749,8,
        26,1,26,3,26,752,8,26,1,26,1,26,5,26,756,8,26,10,26,12,26,759,9,
        26,1,26,3,26,762,8,26,1,27,1,27,1,27,1,27,1,27,3,27,769,8,27,1,27,
        1,27,1,27,3,27,774,8,27,1,27,3,27,777,8,27,3,27,779,8,27,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,803,8,28,1,29,3,29,806,
        8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,3,30,821,8,30,5,30,823,8,30,10,30,12,30,826,9,30,1,31,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,837,8,32,1,32,1,32,5,32,
        841,8,32,10,32,12,32,844,9,32,1,32,3,32,847,8,32,1,32,1,32,1,32,
        1,32,1,32,5,32,854,8,32,10,32,12,32,857,9,32,1,32,3,32,860,8,32,
        3,32,862,8,32,3,32,864,8,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,
        35,3,35,874,8,35,1,36,1,36,1,36,1,36,3,36,880,8,36,1,36,1,36,1,36,
        1,36,1,36,1,36,3,36,888,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        4,37,897,8,37,11,37,12,37,898,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
        3,38,908,8,38,1,39,1,39,1,39,1,39,1,39,5,39,915,8,39,10,39,12,39,
        918,9,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,
        1,42,1,42,1,43,1,43,1,43,5,43,936,8,43,10,43,12,43,939,9,43,1,44,
        1,44,1,44,3,44,944,8,44,1,44,3,44,947,8,44,3,44,949,8,44,1,44,1,
        44,1,45,1,45,1,45,1,45,1,45,3,45,958,8,45,1,45,1,45,3,45,962,8,45,
        1,45,1,45,1,45,3,45,967,8,45,1,46,1,46,3,46,971,8,46,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,983,8,47,1,48,1,48,3,
        48,987,8,48,1,49,1,49,1,50,1,50,1,50,1,50,5,50,995,8,50,10,50,12,
        50,998,9,50,1,50,4,50,1001,8,50,11,50,12,50,1002,1,51,1,51,1,51,
        3,51,1008,8,51,1,51,1,51,1,51,3,51,1013,8,51,1,51,1,51,3,51,1017,
        8,51,1,51,3,51,1020,8,51,1,51,1,51,3,51,1024,8,51,1,51,1,51,3,51,
        1028,8,51,1,51,3,51,1031,8,51,1,51,1,51,1,51,1,51,3,51,1037,8,51,
        3,51,1039,8,51,1,52,1,52,1,52,1,52,4,52,1045,8,52,11,52,12,52,1046,
        1,53,1,53,3,53,1051,8,53,1,53,3,53,1054,8,53,1,53,3,53,1057,8,53,
        1,53,1,53,3,53,1061,8,53,1,53,1,53,1,54,1,54,1,54,1,54,3,54,1069,
        8,54,1,54,1,54,3,54,1073,8,54,1,55,4,55,1076,8,55,11,55,12,55,1077,
        1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,1089,8,58,10,58,
        12,58,1092,9,58,1,59,1,59,3,59,1096,8,59,1,60,3,60,1099,8,60,1,60,
        1,60,1,60,3,60,1104,8,60,1,60,3,60,1107,8,60,1,60,3,60,1110,8,60,
        1,60,3,60,1113,8,60,1,60,1,60,3,60,1117,8,60,1,60,3,60,1120,8,60,
        1,60,1,60,3,60,1124,8,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,
        3,64,1134,8,64,1,65,3,65,1137,8,65,1,65,1,65,3,65,1141,8,65,1,65,
        3,65,1144,8,65,1,66,1,66,1,66,1,66,3,66,1150,8,66,1,67,1,67,1,67,
        1,67,1,67,3,67,1157,8,67,5,67,1159,8,67,10,67,12,67,1162,9,67,1,
        68,1,68,1,68,1,68,1,68,3,68,1169,8,68,5,68,1171,8,68,10,68,12,68,
        1174,9,68,1,69,1,69,1,69,1,69,1,69,5,69,1181,8,69,10,69,12,69,1184,
        9,69,1,70,1,70,1,70,1,70,1,70,5,70,1191,8,70,10,70,12,70,1194,9,
        70,1,71,1,71,1,71,3,71,1199,8,71,1,72,1,72,1,72,3,72,1204,8,72,1,
        73,1,73,1,73,1,73,1,73,1,73,3,73,1212,8,73,1,74,1,74,1,74,1,74,1,
        74,1,74,3,74,1220,8,74,1,75,1,75,1,76,1,76,1,76,5,76,1227,8,76,10,
        76,12,76,1230,9,76,1,77,1,77,1,77,5,77,1235,8,77,10,77,12,77,1238,
        9,77,1,78,1,78,1,78,5,78,1243,8,78,10,78,12,78,1246,9,78,1,79,1,
        79,1,79,3,79,1251,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,
        80,1,80,1,80,1,80,1,80,1,80,1,80,5,80,1268,8,80,10,80,12,80,1271,
        9,80,1,81,1,81,3,81,1275,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1295,
        8,82,1,82,1,82,3,82,1299,8,82,1,82,1,82,3,82,1303,8,82,1,83,1,83,
        1,83,1,83,1,83,5,83,1310,8,83,10,83,12,83,1313,9,83,1,84,1,84,1,
        84,1,84,1,84,1,84,1,84,5,84,1322,8,84,10,84,12,84,1325,9,84,1,85,
        1,85,1,85,5,85,1330,8,85,10,85,12,85,1333,9,85,1,86,1,86,1,86,1,
        86,1,86,3,86,1340,8,86,1,87,1,87,5,87,1344,8,87,10,87,12,87,1347,
        9,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1358,8,88,
        1,88,1,88,3,88,1362,8,88,1,88,3,88,1365,8,88,1,89,1,89,1,89,1,90,
        1,90,4,90,1372,8,90,11,90,12,90,1373,1,91,1,91,1,91,1,91,1,91,1,
        91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,
        91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1402,8,91,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,1413,8,92,1,93,1,93,1,93,1,
        93,1,93,3,93,1420,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,5,
        93,1430,8,93,10,93,12,93,1433,9,93,1,93,1,93,3,93,1437,8,93,1,93,
        1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,3,95,1449,8,95,1,95,
        1,95,1,95,1,95,1,95,1,95,3,95,1457,8,95,1,95,3,95,1460,8,95,1,96,
        1,96,1,96,1,96,3,96,1466,8,96,1,96,1,96,1,96,3,96,1471,8,96,1,96,
        1,96,1,96,1,96,1,97,1,97,1,97,1,97,3,97,1481,8,97,1,97,1,97,1,97,
        1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1506,8,99,1,99,1,99,1,100,
        1,100,1,100,1,100,1,100,1,100,1,100,3,100,1517,8,100,1,100,1,100,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1528,8,101,1,101,
        1,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1539,8,102,
        1,102,1,102,1,103,1,103,1,104,1,104,1,105,1,105,1,105,3,105,1550,
        8,105,1,105,1,105,5,105,1554,8,105,10,105,12,105,1557,9,105,1,105,
        1,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,
        1570,8,106,1,107,1,107,1,107,1,107,3,107,1576,8,107,1,107,1,107,
        3,107,1580,8,107,3,107,1582,8,107,1,107,1,107,1,108,1,108,1,108,
        1,108,3,108,1590,8,108,1,108,1,108,3,108,1594,8,108,3,108,1596,8,
        108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,111,
        3,111,1608,8,111,1,111,1,111,1,112,3,112,1613,8,112,1,112,1,112,
        1,113,1,113,3,113,1619,8,113,1,113,1,113,5,113,1623,8,113,10,113,
        12,113,1626,9,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,3,114,
        1635,8,114,1,114,1,114,1,114,1,114,1,114,5,114,1642,8,114,10,114,
        12,114,1645,9,114,1,114,1,114,1,115,1,115,1,116,1,116,1,116,1,117,
        1,117,3,117,1656,8,117,1,118,1,118,1,118,3,118,1661,8,118,1,118,
        3,118,1664,8,118,1,118,1,118,5,118,1668,8,118,10,118,12,118,1671,
        9,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,121,1,121,1,121,
        5,121,1683,8,121,10,121,12,121,1686,9,121,1,122,1,122,1,122,5,122,
        1691,8,122,10,122,12,122,1694,9,122,1,123,1,123,1,124,1,124,1,124,
        5,124,1701,8,124,10,124,12,124,1704,9,124,1,125,1,125,1,125,3,125,
        1709,8,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,1718,
        8,125,1,126,1,126,1,126,3,126,1723,8,126,1,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,3,127,1735,8,127,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,3,128,1745,8,128,1,129,1,129,
        1,129,1,129,1,129,1,129,3,129,1753,8,129,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,1812,
        8,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,1821,8,130,
        3,130,1823,8,130,1,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,
        1,132,3,132,1834,8,132,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
        1,133,1,133,1,133,1,133,1,133,3,133,1848,8,133,1,134,1,134,1,134,
        1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,1862,
        8,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        3,135,1874,8,135,1,136,1,136,3,136,1878,8,136,1,136,1,136,1,137,
        1,137,1,137,3,137,1885,8,137,1,138,1,138,1,138,1,138,1,138,5,138,
        1892,8,138,10,138,12,138,1895,9,138,3,138,1897,8,138,1,138,1,138,
        1,138,1,138,1,138,5,138,1904,8,138,10,138,12,138,1907,9,138,3,138,
        1909,8,138,1,138,1,138,3,138,1913,8,138,1,138,1,138,3,138,1917,8,
        138,1,138,3,138,1920,8,138,1,139,1,139,1,139,3,139,1925,8,139,1,
        139,1,139,3,139,1929,8,139,1,139,3,139,1932,8,139,1,140,1,140,1,
        140,3,140,1937,8,140,1,140,3,140,1940,8,140,1,141,1,141,1,141,3,
        141,1945,8,141,1,141,1,141,3,141,1949,8,141,1,141,3,141,1952,8,141,
        1,142,1,142,1,142,3,142,1957,8,142,3,142,1959,8,142,1,143,1,143,
        1,143,3,143,1964,8,143,1,143,3,143,1967,8,143,1,144,1,144,1,144,
        1,144,1,144,1,144,3,144,1975,8,144,3,144,1977,8,144,3,144,1979,8,
        144,1,144,1,144,3,144,1983,8,144,1,144,3,144,1986,8,144,1,145,1,
        145,1,145,1,145,1,145,1,145,3,145,1994,8,145,3,145,1996,8,145,3,
        145,1998,8,145,1,145,1,145,3,145,2002,8,145,1,145,3,145,2005,8,145,
        1,146,1,146,1,146,1,146,1,146,3,146,2012,8,146,1,146,3,146,2015,
        8,146,1,146,1,146,3,146,2019,8,146,1,146,1,146,3,146,2023,8,146,
        1,146,3,146,2026,8,146,3,146,2028,8,146,1,147,1,147,1,147,1,147,
        1,147,3,147,2035,8,147,1,147,3,147,2038,8,147,1,147,1,147,3,147,
        2042,8,147,1,147,1,147,3,147,2046,8,147,1,147,3,147,2049,8,147,3,
        147,2051,8,147,1,148,1,148,1,148,1,148,3,148,2057,8,148,1,149,1,
        149,3,149,2061,8,149,1,150,1,150,1,150,1,150,3,150,2067,8,150,1,
        150,3,150,2070,8,150,1,150,1,150,3,150,2074,8,150,1,150,1,150,3,
        150,2078,8,150,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,
        151,1,151,1,151,3,151,2091,8,151,1,151,1,151,1,151,3,151,2096,8,
        151,1,151,1,151,3,151,2100,8,151,1,151,1,151,3,151,2104,8,151,1,
        151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
        1,151,1,151,1,151,1,151,1,151,3,151,2122,8,151,3,151,2124,8,151,
        3,151,2126,8,151,1,151,1,151,3,151,2130,8,151,1,152,1,152,1,152,
        1,152,3,152,2136,8,152,1,152,3,152,2139,8,152,1,152,1,152,1,152,
        1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,2152,8,152,
        1,152,1,152,1,152,1,152,1,152,3,152,2159,8,152,1,152,1,152,3,152,
        2163,8,152,1,153,1,153,1,153,1,153,1,154,1,154,3,154,2171,8,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,2180,8,154,1,154,
        1,154,1,154,1,155,1,155,1,155,1,156,1,156,1,156,1,157,1,157,1,157,
        1,157,1,157,3,157,2196,8,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,3,157,2206,8,157,3,157,2208,8,157,1,157,1,157,1,157,
        3,157,2213,8,157,3,157,2215,8,157,1,158,1,158,1,158,3,158,2220,8,
        158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,3,159,2244,8,159,3,159,2246,8,159,1,160,1,160,1,160,1,160,
        1,160,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,3,161,2264,8,161,1,161,1,161,1,161,3,161,2269,8,161,1,161,
        1,161,1,161,1,161,1,161,1,161,3,161,2277,8,161,1,161,1,161,1,161,
        1,161,1,161,1,161,1,161,3,161,2286,8,161,1,161,1,161,1,161,3,161,
        2291,8,161,1,161,1,161,1,161,1,161,3,161,2297,8,161,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,3,162,2310,
        8,162,1,162,1,162,1,162,3,162,2315,8,162,1,162,1,162,1,162,1,162,
        1,162,1,162,3,162,2323,8,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,3,162,2332,8,162,1,162,1,162,1,162,3,162,2337,8,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,5,162,2348,8,162,
        10,162,12,162,2351,9,162,1,162,1,162,1,162,3,162,2356,8,162,1,163,
        1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,
        2369,8,163,1,163,1,163,1,163,3,163,2374,8,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,3,163,2383,8,163,1,163,1,163,1,163,1,163,
        1,163,1,163,3,163,2391,8,163,1,163,1,163,1,163,1,163,3,163,2397,
        8,163,3,163,2399,8,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,
        2407,8,163,1,164,1,164,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
        1,165,1,165,1,165,3,165,2421,8,165,3,165,2423,8,165,1,166,1,166,
        1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,5,166,2435,8,166,
        10,166,12,166,2438,9,166,1,166,1,166,3,166,2442,8,166,1,167,1,167,
        1,167,1,167,3,167,2448,8,167,1,168,1,168,1,168,1,168,1,168,3,168,
        2455,8,168,1,168,1,168,1,168,1,168,3,168,2461,8,168,1,168,1,168,
        3,168,2465,8,168,3,168,2467,8,168,1,169,1,169,1,169,3,169,2472,8,
        169,1,169,1,169,1,169,3,169,2477,8,169,1,169,1,169,3,169,2481,8,
        169,1,169,1,169,1,169,3,169,2486,8,169,1,169,1,169,1,169,1,169,3,
        169,2492,8,169,1,169,1,169,1,169,1,169,1,169,3,169,2499,8,169,3,
        169,2501,8,169,1,170,1,170,1,170,1,170,3,170,2507,8,170,1,171,1,
        171,1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,173,1,173,
        1,173,1,174,1,174,1,174,3,174,2525,8,174,1,174,3,174,2528,8,174,
        1,175,3,175,2531,8,175,1,175,1,175,3,175,2535,8,175,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,5,176,2544,8,176,10,176,12,176,2547,
        9,176,1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,178,3,178,2557,
        8,178,1,178,1,178,1,178,1,178,3,178,2563,8,178,1,179,1,179,1,179,
        1,179,3,179,2569,8,179,1,180,1,180,1,180,1,180,3,180,2575,8,180,
        1,180,1,180,1,180,1,181,1,181,3,181,2582,8,181,1,181,1,181,3,181,
        2586,8,181,1,181,3,181,2589,8,181,1,182,1,182,1,182,1,182,1,183,
        1,183,1,183,1,183,1,184,1,184,1,184,1,184,1,184,3,184,2604,8,184,
        1,184,1,184,3,184,2608,8,184,1,184,1,184,1,184,3,184,2613,8,184,
        1,184,1,184,1,184,1,184,1,184,3,184,2620,8,184,5,184,2622,8,184,
        10,184,12,184,2625,9,184,1,185,1,185,1,185,1,185,3,185,2631,8,185,
        1,186,1,186,1,186,1,186,3,186,2637,8,186,1,186,1,186,1,186,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,188,1,188,1,188,
        1,188,3,188,2655,8,188,1,188,1,188,1,188,1,188,1,188,3,188,2662,
        8,188,1,188,1,188,1,188,1,188,3,188,2668,8,188,1,188,1,188,1,188,
        1,188,3,188,2674,8,188,3,188,2676,8,188,1,188,1,188,3,188,2680,8,
        188,4,188,2682,8,188,11,188,12,188,2683,1,188,1,188,1,188,3,188,
        2689,8,188,1,189,1,189,1,190,1,190,3,190,2695,8,190,1,191,1,191,
        3,191,2699,8,191,1,191,1,191,1,192,1,192,1,192,1,193,1,193,1,193,
        1,193,1,194,1,194,3,194,2712,8,194,1,194,3,194,2715,8,194,1,195,
        1,195,1,195,1,195,3,195,2721,8,195,1,195,3,195,2724,8,195,1,196,
        1,196,1,196,1,196,3,196,2730,8,196,1,196,3,196,2733,8,196,1,197,
        1,197,1,197,3,197,2738,8,197,1,197,3,197,2741,8,197,1,197,1,197,
        3,197,2745,8,197,1,197,3,197,2748,8,197,1,198,1,198,1,198,1,198,
        3,198,2754,8,198,1,198,3,198,2757,8,198,1,198,1,198,3,198,2761,8,
        198,1,198,3,198,2764,8,198,1,199,1,199,1,199,1,199,1,199,1,199,1,
        199,3,199,2773,8,199,1,199,1,199,3,199,2777,8,199,1,199,3,199,2780,
        8,199,1,199,1,199,3,199,2784,8,199,1,199,3,199,2787,8,199,1,200,
        1,200,1,200,1,200,1,201,1,201,1,201,1,201,1,202,1,202,1,202,1,202,
        1,203,1,203,1,203,1,203,1,204,1,204,3,204,2807,8,204,1,204,1,204,
        1,204,3,204,2812,8,204,1,204,1,204,1,204,1,205,1,205,1,205,1,205,
        1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,
        3,206,2832,8,206,1,207,1,207,3,207,2836,8,207,1,207,1,207,1,207,
        1,208,3,208,2842,8,208,1,208,1,208,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,3,209,2854,8,209,1,209,1,209,1,209,3,209,2859,
        8,209,3,209,2861,8,209,1,210,1,210,1,210,1,210,1,210,3,210,2868,
        8,210,1,210,1,210,3,210,2872,8,210,1,210,1,210,3,210,2876,8,210,
        1,210,3,210,2879,8,210,3,210,2881,8,210,1,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,3,210,2891,8,210,1,210,1,210,1,210,1,210,
        1,210,1,210,3,210,2899,8,210,1,211,1,211,1,211,3,211,2904,8,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,2914,8,211,
        1,211,1,211,3,211,2918,8,211,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,3,212,2927,8,212,1,212,3,212,2930,8,212,3,212,2932,8,212,1,
        212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,2943,8,
        212,1,212,1,212,3,212,2947,8,212,1,213,1,213,1,213,1,213,1,213,1,
        213,3,213,2955,8,213,1,213,1,213,3,213,2959,8,213,1,213,1,213,1,
        213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        3,213,2974,8,213,3,213,2976,8,213,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,1,214,3,214,2987,8,214,1,215,1,215,1,215,1,215,
        1,216,1,216,1,216,1,216,1,216,3,216,2998,8,216,1,216,1,216,3,216,
        3002,8,216,1,216,1,216,3,216,3006,8,216,1,216,1,216,1,216,3,216,
        3011,8,216,1,216,3,216,3014,8,216,1,216,1,216,1,216,1,216,1,216,
        3,216,3021,8,216,1,216,3,216,3024,8,216,1,216,1,216,3,216,3028,8,
        216,3,216,3030,8,216,1,216,1,216,1,216,1,217,1,217,1,217,1,217,1,
        217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,3,217,3054,8,217,3,217,3056,8,217,1,217,
        1,217,3,217,3060,8,217,1,217,1,217,1,217,1,217,3,217,3066,8,217,
        3,217,3068,8,217,1,217,1,217,3,217,3072,8,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,3086,
        8,217,1,217,3,217,3089,8,217,3,217,3091,8,217,1,217,1,217,1,217,
        1,218,1,218,1,219,1,219,1,220,1,220,1,221,1,221,1,221,5,221,3105,
        8,221,10,221,12,221,3108,9,221,1,222,1,222,1,222,1,222,1,222,3,222,
        3115,8,222,1,222,1,222,1,222,1,222,1,222,1,222,3,222,3123,8,222,
        1,223,1,223,1,223,3,223,3128,8,223,1,223,1,223,1,223,1,223,1,224,
        1,224,3,224,3136,8,224,1,225,1,225,1,225,3,225,3141,8,225,1,225,
        1,225,1,226,1,226,1,226,1,226,1,226,5,226,3150,8,226,10,226,12,226,
        3153,9,226,3,226,3155,8,226,1,226,1,226,1,226,1,226,1,226,5,226,
        3162,8,226,10,226,12,226,3165,9,226,3,226,3167,8,226,1,226,1,226,
        1,226,1,226,1,226,5,226,3174,8,226,10,226,12,226,3177,9,226,3,226,
        3179,8,226,3,226,3181,8,226,1,227,1,227,1,227,1,227,1,227,3,227,
        3188,8,227,1,227,1,227,1,227,1,227,3,227,3194,8,227,4,227,3196,8,
        227,11,227,12,227,3197,3,227,3200,8,227,1,227,3,227,3203,8,227,1,
        227,3,227,3206,8,227,1,228,1,228,1,228,1,229,1,229,1,229,1,229,1,
        229,1,229,3,229,3217,8,229,1,229,3,229,3220,8,229,1,229,3,229,3223,
        8,229,1,230,3,230,3226,8,230,1,230,1,230,1,230,1,230,3,230,3232,
        8,230,1,230,1,230,3,230,3236,8,230,1,230,3,230,3239,8,230,1,231,
        1,231,1,231,1,231,3,231,3245,8,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,3,231,3255,8,231,4,231,3257,8,231,11,231,12,231,
        3258,1,231,1,231,1,231,1,231,3,231,3265,8,231,4,231,3267,8,231,11,
        231,12,231,3268,1,231,1,231,1,231,4,231,3274,8,231,11,231,12,231,
        3275,3,231,3278,8,231,1,231,3,231,3281,8,231,1,232,1,232,1,232,1,
        232,3,232,3287,8,232,1,233,1,233,1,233,1,233,3,233,3293,8,233,1,
        234,1,234,1,234,3,234,3298,8,234,3,234,3300,8,234,1,234,3,234,3303,
        8,234,1,235,1,235,1,235,1,235,3,235,3309,8,235,1,235,3,235,3312,
        8,235,1,235,1,235,3,235,3316,8,235,1,235,1,235,3,235,3320,8,235,
        1,235,1,235,1,235,1,235,3,235,3326,8,235,1,235,1,235,3,235,3330,
        8,235,1,235,3,235,3333,8,235,3,235,3335,8,235,1,236,1,236,1,236,
        3,236,3340,8,236,1,236,1,236,1,236,1,236,3,236,3346,8,236,1,237,
        1,237,1,237,3,237,3351,8,237,1,237,1,237,1,237,1,237,3,237,3357,
        8,237,1,238,1,238,1,238,1,238,1,238,3,238,3364,8,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,3,238,3377,
        8,238,3,238,3379,8,238,1,238,1,238,3,238,3383,8,238,1,239,1,239,
        1,239,1,239,3,239,3389,8,239,1,239,1,239,1,239,1,240,1,240,1,240,
        1,240,3,240,3398,8,240,1,240,1,240,1,240,1,240,1,240,1,240,3,240,
        3406,8,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,4,240,
        3416,8,240,11,240,12,240,3417,1,241,1,241,3,241,3422,8,241,1,241,
        1,241,1,241,1,241,3,241,3428,8,241,1,241,3,241,3431,8,241,1,242,
        1,242,1,242,5,242,3436,8,242,10,242,12,242,3439,9,242,1,243,1,243,
        1,243,5,243,3444,8,243,10,243,12,243,3447,9,243,1,243,3,243,3450,
        8,243,1,244,1,244,1,244,5,244,3455,8,244,10,244,12,244,3458,9,244,
        1,245,1,245,3,245,3462,8,245,1,246,1,246,1,246,1,246,1,246,3,246,
        3469,8,246,1,247,1,247,1,247,1,247,3,247,3475,8,247,1,248,1,248,
        1,248,1,248,1,248,1,248,3,248,3483,8,248,1,249,1,249,1,250,1,250,
        1,250,5,250,3490,8,250,10,250,12,250,3493,9,250,1,251,1,251,1,252,
        1,252,3,252,3499,8,252,1,253,1,253,3,253,3503,8,253,1,254,1,254,
        1,254,1,254,1,254,1,254,1,254,1,254,1,254,5,254,3514,8,254,10,254,
        12,254,3517,9,254,3,254,3519,8,254,1,254,1,254,1,255,1,255,1,255,
        5,255,3526,8,255,10,255,12,255,3529,9,255,1,256,1,256,3,256,3533,
        8,256,1,257,1,257,1,258,1,258,1,258,1,258,3,258,3541,8,258,1,259,
        1,259,3,259,3545,8,259,1,260,1,260,1,261,1,261,1,261,0,0,262,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
        256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
        288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
        320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
        352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
        384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,
        416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
        448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,
        480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,
        512,514,516,518,520,522,0,57,1,0,205,206,3,0,28,28,48,48,93,93,1,
        0,166,167,1,0,107,108,2,0,137,137,273,273,2,0,141,141,272,272,2,
        0,109,109,274,274,2,0,38,38,249,249,1,0,118,119,2,0,23,23,263,263,
        1,0,3,6,1,0,203,204,1,0,256,257,1,0,252,253,1,0,89,90,1,0,116,117,
        2,0,29,29,260,260,1,0,44,45,1,0,179,180,1,0,101,102,1,0,244,245,
        1,0,219,220,2,0,97,97,156,156,2,0,20,20,199,199,1,0,25,26,2,0,231,
        231,259,259,2,0,57,57,238,238,2,0,124,124,252,252,1,0,192,193,1,
        0,216,217,1,0,54,55,2,0,83,83,169,169,2,0,8,8,233,233,1,0,177,178,
        1,0,40,41,3,0,54,54,58,58,105,105,2,0,54,54,105,105,1,0,105,106,
        1,0,125,126,2,0,248,248,250,250,1,0,145,146,1,0,164,165,2,0,177,
        177,203,203,3,0,11,11,54,54,256,256,1,0,9,10,2,0,203,203,256,256,
        1,0,193,194,1,0,149,150,1,0,80,81,1,0,175,176,1,0,211,212,2,0,65,
        65,76,76,2,0,157,157,266,266,2,0,209,210,213,213,1,0,11,12,1,0,276,
        277,23,0,7,22,24,36,40,67,69,69,73,85,87,102,104,108,110,112,114,
        126,132,135,138,140,145,151,153,153,155,169,172,173,175,182,184,
        184,187,190,192,206,208,214,216,238,240,248,250,270,4024,0,524,1,
        0,0,0,2,538,1,0,0,0,4,555,1,0,0,0,6,566,1,0,0,0,8,568,1,0,0,0,10,
        574,1,0,0,0,12,581,1,0,0,0,14,588,1,0,0,0,16,595,1,0,0,0,18,612,
        1,0,0,0,20,614,1,0,0,0,22,620,1,0,0,0,24,624,1,0,0,0,26,645,1,0,
        0,0,28,666,1,0,0,0,30,668,1,0,0,0,32,675,1,0,0,0,34,678,1,0,0,0,
        36,681,1,0,0,0,38,684,1,0,0,0,40,689,1,0,0,0,42,692,1,0,0,0,44,716,
        1,0,0,0,46,718,1,0,0,0,48,731,1,0,0,0,50,734,1,0,0,0,52,748,1,0,
        0,0,54,778,1,0,0,0,56,780,1,0,0,0,58,805,1,0,0,0,60,813,1,0,0,0,
        62,827,1,0,0,0,64,832,1,0,0,0,66,865,1,0,0,0,68,868,1,0,0,0,70,870,
        1,0,0,0,72,875,1,0,0,0,74,889,1,0,0,0,76,902,1,0,0,0,78,909,1,0,
        0,0,80,919,1,0,0,0,82,923,1,0,0,0,84,927,1,0,0,0,86,932,1,0,0,0,
        88,948,1,0,0,0,90,966,1,0,0,0,92,970,1,0,0,0,94,982,1,0,0,0,96,984,
        1,0,0,0,98,988,1,0,0,0,100,1000,1,0,0,0,102,1038,1,0,0,0,104,1040,
        1,0,0,0,106,1048,1,0,0,0,108,1064,1,0,0,0,110,1075,1,0,0,0,112,1079,
        1,0,0,0,114,1081,1,0,0,0,116,1084,1,0,0,0,118,1095,1,0,0,0,120,1098,
        1,0,0,0,122,1125,1,0,0,0,124,1127,1,0,0,0,126,1129,1,0,0,0,128,1131,
        1,0,0,0,130,1143,1,0,0,0,132,1149,1,0,0,0,134,1151,1,0,0,0,136,1163,
        1,0,0,0,138,1175,1,0,0,0,140,1185,1,0,0,0,142,1198,1,0,0,0,144,1203,
        1,0,0,0,146,1211,1,0,0,0,148,1219,1,0,0,0,150,1221,1,0,0,0,152,1223,
        1,0,0,0,154,1231,1,0,0,0,156,1239,1,0,0,0,158,1250,1,0,0,0,160,1252,
        1,0,0,0,162,1272,1,0,0,0,164,1302,1,0,0,0,166,1304,1,0,0,0,168,1314,
        1,0,0,0,170,1326,1,0,0,0,172,1339,1,0,0,0,174,1341,1,0,0,0,176,1364,
        1,0,0,0,178,1366,1,0,0,0,180,1369,1,0,0,0,182,1401,1,0,0,0,184,1412,
        1,0,0,0,186,1414,1,0,0,0,188,1440,1,0,0,0,190,1459,1,0,0,0,192,1461,
        1,0,0,0,194,1476,1,0,0,0,196,1485,1,0,0,0,198,1498,1,0,0,0,200,1509,
        1,0,0,0,202,1520,1,0,0,0,204,1531,1,0,0,0,206,1542,1,0,0,0,208,1544,
        1,0,0,0,210,1546,1,0,0,0,212,1569,1,0,0,0,214,1571,1,0,0,0,216,1585,
        1,0,0,0,218,1599,1,0,0,0,220,1604,1,0,0,0,222,1607,1,0,0,0,224,1612,
        1,0,0,0,226,1616,1,0,0,0,228,1629,1,0,0,0,230,1648,1,0,0,0,232,1650,
        1,0,0,0,234,1655,1,0,0,0,236,1657,1,0,0,0,238,1674,1,0,0,0,240,1677,
        1,0,0,0,242,1684,1,0,0,0,244,1687,1,0,0,0,246,1695,1,0,0,0,248,1697,
        1,0,0,0,250,1705,1,0,0,0,252,1722,1,0,0,0,254,1734,1,0,0,0,256,1736,
        1,0,0,0,258,1746,1,0,0,0,260,1754,1,0,0,0,262,1824,1,0,0,0,264,1833,
        1,0,0,0,266,1847,1,0,0,0,268,1861,1,0,0,0,270,1873,1,0,0,0,272,1877,
        1,0,0,0,274,1881,1,0,0,0,276,1886,1,0,0,0,278,1921,1,0,0,0,280,1933,
        1,0,0,0,282,1941,1,0,0,0,284,1953,1,0,0,0,286,1960,1,0,0,0,288,1968,
        1,0,0,0,290,1987,1,0,0,0,292,2006,1,0,0,0,294,2029,1,0,0,0,296,2056,
        1,0,0,0,298,2060,1,0,0,0,300,2062,1,0,0,0,302,2079,1,0,0,0,304,2162,
        1,0,0,0,306,2164,1,0,0,0,308,2168,1,0,0,0,310,2184,1,0,0,0,312,2187,
        1,0,0,0,314,2190,1,0,0,0,316,2219,1,0,0,0,318,2245,1,0,0,0,320,2247,
        1,0,0,0,322,2268,1,0,0,0,324,2314,1,0,0,0,326,2373,1,0,0,0,328,2408,
        1,0,0,0,330,2410,1,0,0,0,332,2441,1,0,0,0,334,2443,1,0,0,0,336,2449,
        1,0,0,0,338,2468,1,0,0,0,340,2502,1,0,0,0,342,2508,1,0,0,0,344,2513,
        1,0,0,0,346,2518,1,0,0,0,348,2521,1,0,0,0,350,2530,1,0,0,0,352,2536,
        1,0,0,0,354,2548,1,0,0,0,356,2551,1,0,0,0,358,2564,1,0,0,0,360,2570,
        1,0,0,0,362,2581,1,0,0,0,364,2590,1,0,0,0,366,2594,1,0,0,0,368,2598,
        1,0,0,0,370,2626,1,0,0,0,372,2632,1,0,0,0,374,2641,1,0,0,0,376,2650,
        1,0,0,0,378,2690,1,0,0,0,380,2694,1,0,0,0,382,2696,1,0,0,0,384,2702,
        1,0,0,0,386,2705,1,0,0,0,388,2714,1,0,0,0,390,2716,1,0,0,0,392,2725,
        1,0,0,0,394,2734,1,0,0,0,396,2749,1,0,0,0,398,2772,1,0,0,0,400,2788,
        1,0,0,0,402,2792,1,0,0,0,404,2796,1,0,0,0,406,2800,1,0,0,0,408,2804,
        1,0,0,0,410,2816,1,0,0,0,412,2831,1,0,0,0,414,2833,1,0,0,0,416,2841,
        1,0,0,0,418,2860,1,0,0,0,420,2862,1,0,0,0,422,2900,1,0,0,0,424,2919,
        1,0,0,0,426,2948,1,0,0,0,428,2977,1,0,0,0,430,2988,1,0,0,0,432,3029,
        1,0,0,0,434,3090,1,0,0,0,436,3095,1,0,0,0,438,3097,1,0,0,0,440,3099,
        1,0,0,0,442,3101,1,0,0,0,444,3114,1,0,0,0,446,3127,1,0,0,0,448,3135,
        1,0,0,0,450,3137,1,0,0,0,452,3180,1,0,0,0,454,3182,1,0,0,0,456,3207,
        1,0,0,0,458,3210,1,0,0,0,460,3225,1,0,0,0,462,3240,1,0,0,0,464,3282,
        1,0,0,0,466,3288,1,0,0,0,468,3302,1,0,0,0,470,3334,1,0,0,0,472,3345,
        1,0,0,0,474,3356,1,0,0,0,476,3358,1,0,0,0,478,3384,1,0,0,0,480,3393,
        1,0,0,0,482,3419,1,0,0,0,484,3432,1,0,0,0,486,3449,1,0,0,0,488,3451,
        1,0,0,0,490,3461,1,0,0,0,492,3468,1,0,0,0,494,3474,1,0,0,0,496,3482,
        1,0,0,0,498,3484,1,0,0,0,500,3486,1,0,0,0,502,3494,1,0,0,0,504,3498,
        1,0,0,0,506,3502,1,0,0,0,508,3504,1,0,0,0,510,3522,1,0,0,0,512,3532,
        1,0,0,0,514,3534,1,0,0,0,516,3540,1,0,0,0,518,3544,1,0,0,0,520,3546,
        1,0,0,0,522,3548,1,0,0,0,524,529,3,2,1,0,525,526,5,215,0,0,526,528,
        3,2,1,0,527,525,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,
        1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,532,534,5,215,0,0,533,532,
        1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,536,5,0,0,1,536,1,1,
        0,0,0,537,539,3,8,4,0,538,537,1,0,0,0,538,539,1,0,0,0,539,544,1,
        0,0,0,540,541,3,20,10,0,541,542,3,6,3,0,542,545,1,0,0,0,543,545,
        3,4,2,0,544,540,1,0,0,0,544,543,1,0,0,0,545,3,1,0,0,0,546,556,3,
        250,125,0,547,556,3,252,126,0,548,552,3,14,7,0,549,551,3,12,6,0,
        550,549,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,
        553,556,1,0,0,0,554,552,1,0,0,0,555,546,1,0,0,0,555,547,1,0,0,0,
        555,548,1,0,0,0,556,5,1,0,0,0,557,567,3,250,125,0,558,567,3,252,
        126,0,559,563,3,16,8,0,560,562,3,12,6,0,561,560,1,0,0,0,562,565,
        1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,567,1,0,0,0,565,563,
        1,0,0,0,566,557,1,0,0,0,566,558,1,0,0,0,566,559,1,0,0,0,567,7,1,
        0,0,0,568,569,5,258,0,0,569,570,5,168,0,0,570,572,5,42,0,0,571,573,
        5,4,0,0,572,571,1,0,0,0,572,573,1,0,0,0,573,9,1,0,0,0,574,578,3,
        14,7,0,575,577,3,12,6,0,576,575,1,0,0,0,577,580,1,0,0,0,578,576,
        1,0,0,0,578,579,1,0,0,0,579,11,1,0,0,0,580,578,1,0,0,0,581,583,5,
        251,0,0,582,584,5,14,0,0,583,582,1,0,0,0,583,584,1,0,0,0,584,585,
        1,0,0,0,585,586,3,14,7,0,586,13,1,0,0,0,587,589,3,18,9,0,588,587,
        1,0,0,0,589,590,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,15,1,
        0,0,0,592,594,3,18,9,0,593,592,1,0,0,0,594,597,1,0,0,0,595,593,1,
        0,0,0,595,596,1,0,0,0,596,17,1,0,0,0,597,595,1,0,0,0,598,613,3,20,
        10,0,599,613,3,22,11,0,600,613,3,40,20,0,601,613,3,50,25,0,602,613,
        3,42,21,0,603,613,3,46,23,0,604,613,3,52,26,0,605,613,3,60,30,0,
        606,613,3,38,19,0,607,613,3,62,31,0,608,613,3,64,32,0,609,613,3,
        76,38,0,610,613,3,72,36,0,611,613,3,74,37,0,612,598,1,0,0,0,612,
        599,1,0,0,0,612,600,1,0,0,0,612,601,1,0,0,0,612,602,1,0,0,0,612,
        603,1,0,0,0,612,604,1,0,0,0,612,605,1,0,0,0,612,606,1,0,0,0,612,
        607,1,0,0,0,612,608,1,0,0,0,612,609,1,0,0,0,612,610,1,0,0,0,612,
        611,1,0,0,0,613,19,1,0,0,0,614,618,5,255,0,0,615,616,5,105,0,0,616,
        619,3,150,75,0,617,619,3,150,75,0,618,615,1,0,0,0,618,617,1,0,0,
        0,619,21,1,0,0,0,620,621,5,201,0,0,621,622,3,24,12,0,622,23,1,0,
        0,0,623,625,5,69,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,626,1,0,
        0,0,626,637,3,28,14,0,627,628,5,162,0,0,628,629,5,32,0,0,629,634,
        3,30,15,0,630,631,5,39,0,0,631,633,3,30,15,0,632,630,1,0,0,0,633,
        636,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,638,1,0,0,0,636,
        634,1,0,0,0,637,627,1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,
        641,3,32,16,0,640,639,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,
        644,3,34,17,0,643,642,1,0,0,0,643,644,1,0,0,0,644,25,1,0,0,0,645,
        648,3,150,75,0,646,647,5,18,0,0,647,649,3,246,123,0,648,646,1,0,
        0,0,648,649,1,0,0,0,649,27,1,0,0,0,650,655,5,239,0,0,651,652,5,39,
        0,0,652,654,3,26,13,0,653,651,1,0,0,0,654,657,1,0,0,0,655,653,1,
        0,0,0,655,656,1,0,0,0,656,667,1,0,0,0,657,655,1,0,0,0,658,663,3,
        26,13,0,659,660,5,39,0,0,660,662,3,26,13,0,661,659,1,0,0,0,662,665,
        1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,667,1,0,0,0,665,663,
        1,0,0,0,666,650,1,0,0,0,666,658,1,0,0,0,667,29,1,0,0,0,668,673,3,
        150,75,0,669,674,5,64,0,0,670,672,5,19,0,0,671,670,1,0,0,0,671,672,
        1,0,0,0,672,674,1,0,0,0,673,669,1,0,0,0,673,671,1,0,0,0,674,31,1,
        0,0,0,675,676,5,226,0,0,676,677,3,150,75,0,677,33,1,0,0,0,678,679,
        5,132,0,0,679,680,3,150,75,0,680,35,1,0,0,0,681,682,5,263,0,0,682,
        683,3,150,75,0,683,37,1,0,0,0,684,685,5,264,0,0,685,687,3,24,12,
        0,686,688,3,36,18,0,687,686,1,0,0,0,687,688,1,0,0,0,688,39,1,0,0,
        0,689,690,5,50,0,0,690,691,3,86,43,0,691,41,1,0,0,0,692,693,5,218,
        0,0,693,698,3,44,22,0,694,695,5,39,0,0,695,697,3,44,22,0,696,694,
        1,0,0,0,697,700,1,0,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,43,1,
        0,0,0,700,698,1,0,0,0,701,702,3,180,90,0,702,703,5,86,0,0,703,704,
        3,150,75,0,704,717,1,0,0,0,705,706,3,246,123,0,706,707,5,86,0,0,
        707,708,3,150,75,0,708,717,1,0,0,0,709,710,3,246,123,0,710,711,5,
        171,0,0,711,712,3,150,75,0,712,717,1,0,0,0,713,714,3,246,123,0,714,
        715,3,110,55,0,715,717,1,0,0,0,716,701,1,0,0,0,716,705,1,0,0,0,716,
        709,1,0,0,0,716,713,1,0,0,0,717,45,1,0,0,0,718,719,5,195,0,0,719,
        724,3,48,24,0,720,721,5,39,0,0,721,723,3,48,24,0,722,720,1,0,0,0,
        723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,47,1,0,0,0,726,
        724,1,0,0,0,727,732,3,180,90,0,728,729,3,246,123,0,729,730,3,110,
        55,0,730,732,1,0,0,0,731,727,1,0,0,0,731,728,1,0,0,0,732,49,1,0,
        0,0,733,735,5,66,0,0,734,733,1,0,0,0,734,735,1,0,0,0,735,736,1,0,
        0,0,736,737,5,62,0,0,737,742,3,150,75,0,738,739,5,39,0,0,739,741,
        3,150,75,0,740,738,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,
        1,0,0,0,743,51,1,0,0,0,744,742,1,0,0,0,745,746,5,158,0,0,746,749,
        5,139,0,0,747,749,5,139,0,0,748,745,1,0,0,0,748,747,1,0,0,0,749,
        751,1,0,0,0,750,752,3,54,27,0,751,750,1,0,0,0,751,752,1,0,0,0,752,
        753,1,0,0,0,753,757,3,86,43,0,754,756,3,56,28,0,755,754,1,0,0,0,
        756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,761,1,0,0,0,
        759,757,1,0,0,0,760,762,3,36,18,0,761,760,1,0,0,0,761,762,1,0,0,
        0,762,53,1,0,0,0,763,768,5,196,0,0,764,765,5,80,0,0,765,769,5,24,
        0,0,766,769,5,81,0,0,767,769,5,80,0,0,768,764,1,0,0,0,768,766,1,
        0,0,0,768,767,1,0,0,0,769,779,1,0,0,0,770,776,5,67,0,0,771,773,5,
        193,0,0,772,774,5,24,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,777,
        1,0,0,0,775,777,5,194,0,0,776,771,1,0,0,0,776,775,1,0,0,0,777,779,
        1,0,0,0,778,763,1,0,0,0,778,770,1,0,0,0,779,55,1,0,0,0,780,802,5,
        258,0,0,781,782,5,116,0,0,782,803,3,58,29,0,783,784,5,30,0,0,784,
        785,5,116,0,0,785,803,3,58,29,0,786,787,5,236,0,0,787,788,5,116,
        0,0,788,803,3,58,29,0,789,790,5,184,0,0,790,791,5,116,0,0,791,803,
        3,58,29,0,792,793,5,172,0,0,793,794,5,116,0,0,794,803,3,58,29,0,
        795,796,5,123,0,0,796,797,5,156,0,0,797,803,3,244,122,0,798,799,
        5,208,0,0,799,800,3,246,123,0,800,801,3,114,57,0,801,803,1,0,0,0,
        802,781,1,0,0,0,802,783,1,0,0,0,802,786,1,0,0,0,802,789,1,0,0,0,
        802,792,1,0,0,0,802,795,1,0,0,0,802,798,1,0,0,0,803,57,1,0,0,0,804,
        806,5,214,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,
        808,3,246,123,0,808,809,3,114,57,0,809,810,5,136,0,0,810,811,3,248,
        124,0,811,812,5,207,0,0,812,59,1,0,0,0,813,814,5,140,0,0,814,824,
        3,88,44,0,815,820,5,156,0,0,816,817,5,139,0,0,817,821,3,42,21,0,
        818,819,5,50,0,0,819,821,3,42,21,0,820,816,1,0,0,0,820,818,1,0,0,
        0,821,823,1,0,0,0,822,815,1,0,0,0,823,826,1,0,0,0,824,822,1,0,0,
        0,824,825,1,0,0,0,825,61,1,0,0,0,826,824,1,0,0,0,827,828,5,254,0,
        0,828,829,3,150,75,0,829,830,5,18,0,0,830,831,3,246,123,0,831,63,
        1,0,0,0,832,833,5,33,0,0,833,846,3,66,33,0,834,836,5,136,0,0,835,
        837,3,68,34,0,836,835,1,0,0,0,836,837,1,0,0,0,837,842,1,0,0,0,838,
        839,5,39,0,0,839,841,3,68,34,0,840,838,1,0,0,0,841,844,1,0,0,0,842,
        840,1,0,0,0,842,843,1,0,0,0,843,845,1,0,0,0,844,842,1,0,0,0,845,
        847,5,207,0,0,846,834,1,0,0,0,846,847,1,0,0,0,847,863,1,0,0,0,848,
        861,5,268,0,0,849,862,5,239,0,0,850,855,3,70,35,0,851,852,5,39,0,
        0,852,854,3,70,35,0,853,851,1,0,0,0,854,857,1,0,0,0,855,853,1,0,
        0,0,855,856,1,0,0,0,856,859,1,0,0,0,857,855,1,0,0,0,858,860,3,36,
        18,0,859,858,1,0,0,0,859,860,1,0,0,0,860,862,1,0,0,0,861,849,1,0,
        0,0,861,850,1,0,0,0,862,864,1,0,0,0,863,848,1,0,0,0,863,864,1,0,
        0,0,864,65,1,0,0,0,865,866,3,242,121,0,866,867,3,512,256,0,867,67,
        1,0,0,0,868,869,3,150,75,0,869,69,1,0,0,0,870,873,3,512,256,0,871,
        872,5,18,0,0,872,874,3,246,123,0,873,871,1,0,0,0,873,874,1,0,0,0,
        874,71,1,0,0,0,875,876,5,133,0,0,876,879,5,51,0,0,877,878,5,264,
        0,0,878,880,5,110,0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,881,1,
        0,0,0,881,882,5,99,0,0,882,883,3,150,75,0,883,884,5,18,0,0,884,887,
        3,246,123,0,885,886,5,95,0,0,886,888,3,502,251,0,887,885,1,0,0,0,
        887,888,1,0,0,0,888,73,1,0,0,0,889,890,5,98,0,0,890,891,5,136,0,
        0,891,892,3,246,123,0,892,893,5,115,0,0,893,894,3,150,75,0,894,896,
        5,23,0,0,895,897,3,18,9,0,896,895,1,0,0,0,897,898,1,0,0,0,898,896,
        1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,901,5,207,0,0,901,75,
        1,0,0,0,902,903,5,33,0,0,903,904,5,130,0,0,904,905,3,10,5,0,905,
        907,5,186,0,0,906,908,3,78,39,0,907,906,1,0,0,0,907,908,1,0,0,0,
        908,77,1,0,0,0,909,910,5,115,0,0,910,916,5,245,0,0,911,915,3,80,
        40,0,912,915,3,82,41,0,913,915,3,84,42,0,914,911,1,0,0,0,914,912,
        1,0,0,0,914,913,1,0,0,0,915,918,1,0,0,0,916,914,1,0,0,0,916,917,
        1,0,0,0,917,79,1,0,0,0,918,916,1,0,0,0,919,920,5,155,0,0,920,921,
        3,150,75,0,921,922,7,0,0,0,922,81,1,0,0,0,923,924,5,156,0,0,924,
        925,5,92,0,0,925,926,7,1,0,0,926,83,1,0,0,0,927,928,5,198,0,0,928,
        929,5,229,0,0,929,930,5,18,0,0,930,931,3,246,123,0,931,85,1,0,0,
        0,932,937,3,88,44,0,933,934,5,39,0,0,934,936,3,88,44,0,935,933,1,
        0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,1,0,0,0,938,87,1,0,
        0,0,939,937,1,0,0,0,940,941,3,246,123,0,941,943,5,86,0,0,942,944,
        3,102,51,0,943,942,1,0,0,0,943,944,1,0,0,0,944,949,1,0,0,0,945,947,
        3,102,51,0,946,945,1,0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,940,
        1,0,0,0,948,946,1,0,0,0,949,950,1,0,0,0,950,951,3,92,46,0,951,89,
        1,0,0,0,952,953,5,130,0,0,953,954,5,4,0,0,954,967,5,186,0,0,955,
        957,5,130,0,0,956,958,5,4,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,
        959,1,0,0,0,959,961,5,39,0,0,960,962,5,4,0,0,961,960,1,0,0,0,961,
        962,1,0,0,0,962,963,1,0,0,0,963,967,5,186,0,0,964,967,5,170,0,0,
        965,967,5,239,0,0,966,952,1,0,0,0,966,955,1,0,0,0,966,964,1,0,0,
        0,966,965,1,0,0,0,967,91,1,0,0,0,968,971,3,94,47,0,969,971,3,98,
        49,0,970,968,1,0,0,0,970,969,1,0,0,0,971,93,1,0,0,0,972,973,5,221,
        0,0,973,974,5,136,0,0,974,975,3,98,49,0,975,976,5,207,0,0,976,983,
        1,0,0,0,977,978,5,13,0,0,978,979,5,136,0,0,979,980,3,98,49,0,980,
        981,5,207,0,0,981,983,1,0,0,0,982,972,1,0,0,0,982,977,1,0,0,0,983,
        95,1,0,0,0,984,986,3,120,60,0,985,987,3,90,45,0,986,985,1,0,0,0,
        986,987,1,0,0,0,987,97,1,0,0,0,988,989,3,100,50,0,989,99,1,0,0,0,
        990,996,3,106,53,0,991,992,3,96,48,0,992,993,3,106,53,0,993,995,
        1,0,0,0,994,991,1,0,0,0,995,998,1,0,0,0,996,994,1,0,0,0,996,997,
        1,0,0,0,997,1001,1,0,0,0,998,996,1,0,0,0,999,1001,3,108,54,0,1000,
        990,1,0,0,0,1000,999,1,0,0,0,1001,1002,1,0,0,0,1002,1000,1,0,0,0,
        1002,1003,1,0,0,0,1003,101,1,0,0,0,1004,1005,5,17,0,0,1005,1007,
        5,222,0,0,1006,1008,7,2,0,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,
        1008,1039,1,0,0,0,1009,1010,5,14,0,0,1010,1012,5,222,0,0,1011,1013,
        7,2,0,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1039,1,0,0,0,1014,
        1016,5,17,0,0,1015,1017,5,4,0,0,1016,1015,1,0,0,0,1016,1017,1,0,
        0,0,1017,1019,1,0,0,0,1018,1020,7,2,0,0,1019,1018,1,0,0,0,1019,1020,
        1,0,0,0,1020,1039,1,0,0,0,1021,1023,5,14,0,0,1022,1024,7,2,0,0,1023,
        1022,1,0,0,0,1023,1024,1,0,0,0,1024,1039,1,0,0,0,1025,1027,5,222,
        0,0,1026,1028,5,4,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1030,
        1,0,0,0,1029,1031,7,2,0,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,
        1032,1,0,0,0,1032,1039,7,3,0,0,1033,1034,5,222,0,0,1034,1036,5,4,
        0,0,1035,1037,7,2,0,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1039,
        1,0,0,0,1038,1004,1,0,0,0,1038,1009,1,0,0,0,1038,1014,1,0,0,0,1038,
        1021,1,0,0,0,1038,1025,1,0,0,0,1038,1033,1,0,0,0,1039,103,1,0,0,
        0,1040,1044,3,106,53,0,1041,1042,3,120,60,0,1042,1043,3,106,53,0,
        1043,1045,1,0,0,0,1044,1041,1,0,0,0,1045,1046,1,0,0,0,1046,1044,
        1,0,0,0,1046,1047,1,0,0,0,1047,105,1,0,0,0,1048,1050,5,136,0,0,1049,
        1051,3,246,123,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,1053,1,
        0,0,0,1052,1054,3,132,66,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,
        1056,1,0,0,0,1055,1057,3,118,59,0,1056,1055,1,0,0,0,1056,1057,1,
        0,0,0,1057,1060,1,0,0,0,1058,1059,5,263,0,0,1059,1061,3,150,75,0,
        1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,1063,
        5,207,0,0,1063,107,1,0,0,0,1064,1065,5,136,0,0,1065,1068,3,88,44,
        0,1066,1067,5,263,0,0,1067,1069,3,150,75,0,1068,1066,1,0,0,0,1068,
        1069,1,0,0,0,1069,1070,1,0,0,0,1070,1072,5,207,0,0,1071,1073,3,90,
        45,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,109,1,0,0,0,1074,1076,
        3,114,57,0,1075,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1075,1,0,0,0,
        1077,1078,1,0,0,0,1078,111,1,0,0,0,1079,1080,3,132,66,0,1080,113,
        1,0,0,0,1081,1082,5,37,0,0,1082,1083,3,512,256,0,1083,115,1,0,0,
        0,1084,1085,5,37,0,0,1085,1090,3,512,256,0,1086,1087,5,23,0,0,1087,
        1089,3,512,256,0,1088,1086,1,0,0,0,1089,1092,1,0,0,0,1090,1088,1,
        0,0,0,1090,1091,1,0,0,0,1091,117,1,0,0,0,1092,1090,1,0,0,0,1093,
        1096,3,228,114,0,1094,1096,3,232,116,0,1095,1093,1,0,0,0,1095,1094,
        1,0,0,0,1096,119,1,0,0,0,1097,1099,3,122,61,0,1098,1097,1,0,0,0,
        1098,1099,1,0,0,0,1099,1100,1,0,0,0,1100,1119,3,124,62,0,1101,1103,
        5,129,0,0,1102,1104,3,246,123,0,1103,1102,1,0,0,0,1103,1104,1,0,
        0,0,1104,1106,1,0,0,0,1105,1107,3,132,66,0,1106,1105,1,0,0,0,1106,
        1107,1,0,0,0,1107,1109,1,0,0,0,1108,1110,3,128,64,0,1109,1108,1,
        0,0,0,1109,1110,1,0,0,0,1110,1112,1,0,0,0,1111,1113,3,118,59,0,1112,
        1111,1,0,0,0,1112,1113,1,0,0,0,1113,1116,1,0,0,0,1114,1115,5,263,
        0,0,1115,1117,3,150,75,0,1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,
        1118,1,0,0,0,1118,1120,5,185,0,0,1119,1101,1,0,0,0,1119,1120,1,0,
        0,0,1120,1121,1,0,0,0,1121,1123,3,124,62,0,1122,1124,3,126,63,0,
        1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,121,1,0,0,0,1125,1126,7,
        4,0,0,1126,123,1,0,0,0,1127,1128,7,5,0,0,1128,125,1,0,0,0,1129,1130,
        7,6,0,0,1130,127,1,0,0,0,1131,1133,5,239,0,0,1132,1134,3,130,65,
        0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,129,1,0,0,0,1135,1137,
        5,4,0,0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,1138,1,0,0,0,1138,
        1140,5,72,0,0,1139,1141,5,4,0,0,1140,1139,1,0,0,0,1140,1141,1,0,
        0,0,1141,1144,1,0,0,0,1142,1144,5,4,0,0,1143,1136,1,0,0,0,1143,1142,
        1,0,0,0,1144,131,1,0,0,0,1145,1146,5,37,0,0,1146,1150,3,134,67,0,
        1147,1148,5,122,0,0,1148,1150,3,136,68,0,1149,1145,1,0,0,0,1149,
        1147,1,0,0,0,1150,133,1,0,0,0,1151,1160,3,138,69,0,1152,1156,5,23,
        0,0,1153,1154,5,37,0,0,1154,1157,3,138,69,0,1155,1157,3,138,69,0,
        1156,1153,1,0,0,0,1156,1155,1,0,0,0,1157,1159,1,0,0,0,1158,1152,
        1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,
        135,1,0,0,0,1162,1160,1,0,0,0,1163,1172,3,140,70,0,1164,1168,5,23,
        0,0,1165,1166,5,37,0,0,1166,1169,3,140,70,0,1167,1169,3,140,70,0,
        1168,1165,1,0,0,0,1168,1167,1,0,0,0,1169,1171,1,0,0,0,1170,1164,
        1,0,0,0,1171,1174,1,0,0,0,1172,1170,1,0,0,0,1172,1173,1,0,0,0,1173,
        137,1,0,0,0,1174,1172,1,0,0,0,1175,1182,3,142,71,0,1176,1177,5,127,
        0,0,1177,1181,3,142,71,0,1178,1179,5,37,0,0,1179,1181,3,142,71,0,
        1180,1176,1,0,0,0,1180,1178,1,0,0,0,1181,1184,1,0,0,0,1182,1180,
        1,0,0,0,1182,1183,1,0,0,0,1183,139,1,0,0,0,1184,1182,1,0,0,0,1185,
        1192,3,144,72,0,1186,1187,5,127,0,0,1187,1191,3,144,72,0,1188,1189,
        5,37,0,0,1189,1191,3,144,72,0,1190,1186,1,0,0,0,1190,1188,1,0,0,
        0,1191,1194,1,0,0,0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,1193,141,
        1,0,0,0,1194,1192,1,0,0,0,1195,1196,5,128,0,0,1196,1199,3,142,71,
        0,1197,1199,3,146,73,0,1198,1195,1,0,0,0,1198,1197,1,0,0,0,1199,
        143,1,0,0,0,1200,1201,5,128,0,0,1201,1204,3,144,72,0,1202,1204,3,
        148,74,0,1203,1200,1,0,0,0,1203,1202,1,0,0,0,1204,145,1,0,0,0,1205,
        1206,5,136,0,0,1206,1207,3,134,67,0,1207,1208,5,207,0,0,1208,1212,
        1,0,0,0,1209,1212,5,142,0,0,1210,1212,3,512,256,0,1211,1205,1,0,
        0,0,1211,1209,1,0,0,0,1211,1210,1,0,0,0,1212,147,1,0,0,0,1213,1214,
        5,136,0,0,1214,1215,3,136,68,0,1215,1216,5,207,0,0,1216,1220,1,0,
        0,0,1217,1220,5,142,0,0,1218,1220,3,518,259,0,1219,1213,1,0,0,0,
        1219,1217,1,0,0,0,1219,1218,1,0,0,0,1220,149,1,0,0,0,1221,1222,3,
        152,76,0,1222,151,1,0,0,0,1223,1228,3,154,77,0,1224,1225,5,161,0,
        0,1225,1227,3,154,77,0,1226,1224,1,0,0,0,1227,1230,1,0,0,0,1228,
        1226,1,0,0,0,1228,1229,1,0,0,0,1229,153,1,0,0,0,1230,1228,1,0,0,
        0,1231,1236,3,156,78,0,1232,1233,5,267,0,0,1233,1235,3,156,78,0,
        1234,1232,1,0,0,0,1235,1238,1,0,0,0,1236,1234,1,0,0,0,1236,1237,
        1,0,0,0,1237,155,1,0,0,0,1238,1236,1,0,0,0,1239,1244,3,158,79,0,
        1240,1241,5,16,0,0,1241,1243,3,158,79,0,1242,1240,1,0,0,0,1243,1246,
        1,0,0,0,1244,1242,1,0,0,0,1244,1245,1,0,0,0,1245,157,1,0,0,0,1246,
        1244,1,0,0,0,1247,1248,5,152,0,0,1248,1251,3,158,79,0,1249,1251,
        3,160,80,0,1250,1247,1,0,0,0,1250,1249,1,0,0,0,1251,159,1,0,0,0,
        1252,1269,3,162,81,0,1253,1254,5,86,0,0,1254,1268,3,162,81,0,1255,
        1256,5,143,0,0,1256,1268,3,162,81,0,1257,1258,5,144,0,0,1258,1268,
        3,162,81,0,1259,1260,5,131,0,0,1260,1268,3,162,81,0,1261,1262,5,
        103,0,0,1262,1268,3,162,81,0,1263,1264,5,137,0,0,1264,1268,3,162,
        81,0,1265,1266,5,109,0,0,1266,1268,3,162,81,0,1267,1253,1,0,0,0,
        1267,1255,1,0,0,0,1267,1257,1,0,0,0,1267,1259,1,0,0,0,1267,1261,
        1,0,0,0,1267,1263,1,0,0,0,1267,1265,1,0,0,0,1268,1271,1,0,0,0,1269,
        1267,1,0,0,0,1269,1270,1,0,0,0,1270,161,1,0,0,0,1271,1269,1,0,0,
        0,1272,1274,3,166,83,0,1273,1275,3,164,82,0,1274,1273,1,0,0,0,1274,
        1275,1,0,0,0,1275,163,1,0,0,0,1276,1277,5,191,0,0,1277,1303,3,166,
        83,0,1278,1279,5,228,0,0,1279,1280,5,264,0,0,1280,1303,3,166,83,
        0,1281,1282,5,85,0,0,1282,1283,5,264,0,0,1283,1303,3,166,83,0,1284,
        1285,5,46,0,0,1285,1303,3,166,83,0,1286,1287,5,115,0,0,1287,1303,
        3,166,83,0,1288,1298,5,122,0,0,1289,1299,5,154,0,0,1290,1294,5,152,
        0,0,1291,1295,5,154,0,0,1292,1293,7,7,0,0,1293,1295,3,304,152,0,
        1294,1291,1,0,0,0,1294,1292,1,0,0,0,1295,1299,1,0,0,0,1296,1297,
        7,7,0,0,1297,1299,3,304,152,0,1298,1289,1,0,0,0,1298,1290,1,0,0,
        0,1298,1296,1,0,0,0,1299,1303,1,0,0,0,1300,1301,5,38,0,0,1301,1303,
        3,304,152,0,1302,1276,1,0,0,0,1302,1278,1,0,0,0,1302,1281,1,0,0,
        0,1302,1284,1,0,0,0,1302,1286,1,0,0,0,1302,1288,1,0,0,0,1302,1300,
        1,0,0,0,1303,165,1,0,0,0,1304,1311,3,168,84,0,1305,1306,5,170,0,
        0,1306,1310,3,168,84,0,1307,1308,5,141,0,0,1308,1310,3,168,84,0,
        1309,1305,1,0,0,0,1309,1307,1,0,0,0,1310,1313,1,0,0,0,1311,1309,
        1,0,0,0,1311,1312,1,0,0,0,1312,167,1,0,0,0,1313,1311,1,0,0,0,1314,
        1323,3,170,85,0,1315,1316,5,239,0,0,1316,1322,3,170,85,0,1317,1318,
        5,70,0,0,1318,1322,3,170,85,0,1319,1320,5,142,0,0,1320,1322,3,170,
        85,0,1321,1315,1,0,0,0,1321,1317,1,0,0,0,1321,1319,1,0,0,0,1322,
        1325,1,0,0,0,1323,1321,1,0,0,0,1323,1324,1,0,0,0,1324,169,1,0,0,
        0,1325,1323,1,0,0,0,1326,1331,3,172,86,0,1327,1328,5,174,0,0,1328,
        1330,3,172,86,0,1329,1327,1,0,0,0,1330,1333,1,0,0,0,1331,1329,1,
        0,0,0,1331,1332,1,0,0,0,1332,171,1,0,0,0,1333,1331,1,0,0,0,1334,
        1340,3,174,87,0,1335,1336,5,170,0,0,1336,1340,3,174,87,0,1337,1338,
        5,141,0,0,1338,1340,3,174,87,0,1339,1334,1,0,0,0,1339,1335,1,0,0,
        0,1339,1337,1,0,0,0,1340,173,1,0,0,0,1341,1345,3,182,91,0,1342,1344,
        3,176,88,0,1343,1342,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,0,0,
        1345,1346,1,0,0,0,1346,175,1,0,0,0,1347,1345,1,0,0,0,1348,1365,3,
        178,89,0,1349,1365,3,112,56,0,1350,1365,3,112,56,0,1351,1352,5,129,
        0,0,1352,1353,3,150,75,0,1353,1354,5,185,0,0,1354,1365,1,0,0,0,1355,
        1357,5,129,0,0,1356,1358,3,150,75,0,1357,1356,1,0,0,0,1357,1358,
        1,0,0,0,1358,1359,1,0,0,0,1359,1361,5,72,0,0,1360,1362,3,150,75,
        0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,1363,1,0,0,0,1363,1365,
        5,185,0,0,1364,1348,1,0,0,0,1364,1349,1,0,0,0,1364,1350,1,0,0,0,
        1364,1351,1,0,0,0,1364,1355,1,0,0,0,1365,177,1,0,0,0,1366,1367,5,
        71,0,0,1367,1368,3,230,115,0,1368,179,1,0,0,0,1369,1371,3,182,91,
        0,1370,1372,3,178,89,0,1371,1370,1,0,0,0,1372,1373,1,0,0,0,1373,
        1371,1,0,0,0,1373,1374,1,0,0,0,1374,181,1,0,0,0,1375,1402,3,184,
        92,0,1376,1402,3,232,116,0,1377,1402,3,186,93,0,1378,1379,5,49,0,
        0,1379,1380,5,136,0,0,1380,1381,5,239,0,0,1381,1402,5,207,0,0,1382,
        1402,3,214,107,0,1383,1402,3,216,108,0,1384,1402,3,218,109,0,1385,
        1402,3,210,105,0,1386,1402,3,188,94,0,1387,1402,3,192,96,0,1388,
        1402,3,196,98,0,1389,1402,3,198,99,0,1390,1402,3,200,100,0,1391,
        1402,3,202,101,0,1392,1402,3,204,102,0,1393,1402,3,206,103,0,1394,
        1402,3,208,104,0,1395,1396,5,136,0,0,1396,1397,3,150,75,0,1397,1398,
        5,207,0,0,1398,1402,1,0,0,0,1399,1402,3,236,118,0,1400,1402,3,246,
        123,0,1401,1375,1,0,0,0,1401,1376,1,0,0,0,1401,1377,1,0,0,0,1401,
        1378,1,0,0,0,1401,1382,1,0,0,0,1401,1383,1,0,0,0,1401,1384,1,0,0,
        0,1401,1385,1,0,0,0,1401,1386,1,0,0,0,1401,1387,1,0,0,0,1401,1388,
        1,0,0,0,1401,1389,1,0,0,0,1401,1390,1,0,0,0,1401,1391,1,0,0,0,1401,
        1392,1,0,0,0,1401,1393,1,0,0,0,1401,1394,1,0,0,0,1401,1395,1,0,0,
        0,1401,1399,1,0,0,0,1401,1400,1,0,0,0,1402,183,1,0,0,0,1403,1413,
        3,222,111,0,1404,1413,3,220,110,0,1405,1413,3,228,114,0,1406,1413,
        3,226,113,0,1407,1413,5,247,0,0,1408,1413,5,94,0,0,1409,1413,7,8,
        0,0,1410,1413,5,147,0,0,1411,1413,5,154,0,0,1412,1403,1,0,0,0,1412,
        1404,1,0,0,0,1412,1405,1,0,0,0,1412,1406,1,0,0,0,1412,1407,1,0,0,
        0,1412,1408,1,0,0,0,1412,1409,1,0,0,0,1412,1410,1,0,0,0,1412,1411,
        1,0,0,0,1413,185,1,0,0,0,1414,1419,5,34,0,0,1415,1416,3,150,75,0,
        1416,1417,5,262,0,0,1417,1420,1,0,0,0,1418,1420,5,262,0,0,1419,1415,
        1,0,0,0,1419,1418,1,0,0,0,1420,1421,1,0,0,0,1421,1422,3,150,75,0,
        1422,1423,5,237,0,0,1423,1431,3,150,75,0,1424,1425,5,262,0,0,1425,
        1426,3,150,75,0,1426,1427,5,237,0,0,1427,1428,3,150,75,0,1428,1430,
        1,0,0,0,1429,1424,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1431,
        1432,1,0,0,0,1432,1436,1,0,0,0,1433,1431,1,0,0,0,1434,1435,5,82,
        0,0,1435,1437,3,150,75,0,1436,1434,1,0,0,0,1436,1437,1,0,0,0,1437,
        1438,1,0,0,0,1438,1439,5,84,0,0,1439,187,1,0,0,0,1440,1441,5,129,
        0,0,1441,1442,3,246,123,0,1442,1443,5,115,0,0,1443,1444,3,150,75,
        0,1444,1445,3,190,95,0,1445,189,1,0,0,0,1446,1447,5,263,0,0,1447,
        1449,3,150,75,0,1448,1446,1,0,0,0,1448,1449,1,0,0,0,1449,1450,1,
        0,0,0,1450,1451,5,23,0,0,1451,1452,3,150,75,0,1452,1453,5,185,0,
        0,1453,1460,1,0,0,0,1454,1455,5,263,0,0,1455,1457,3,150,75,0,1456,
        1454,1,0,0,0,1456,1457,1,0,0,0,1457,1458,1,0,0,0,1458,1460,5,185,
        0,0,1459,1448,1,0,0,0,1459,1456,1,0,0,0,1460,191,1,0,0,0,1461,1465,
        5,129,0,0,1462,1463,3,246,123,0,1463,1464,5,86,0,0,1464,1466,1,0,
        0,0,1465,1462,1,0,0,0,1465,1466,1,0,0,0,1466,1467,1,0,0,0,1467,1470,
        3,104,52,0,1468,1469,5,263,0,0,1469,1471,3,150,75,0,1470,1468,1,
        0,0,0,1470,1471,1,0,0,0,1471,1472,1,0,0,0,1472,1473,5,23,0,0,1473,
        1474,3,150,75,0,1474,1475,5,185,0,0,1475,193,1,0,0,0,1476,1480,5,
        129,0,0,1477,1478,3,246,123,0,1478,1479,5,86,0,0,1479,1481,1,0,0,
        0,1480,1477,1,0,0,0,1480,1481,1,0,0,0,1481,1482,1,0,0,0,1482,1483,
        3,104,52,0,1483,1484,7,9,0,0,1484,195,1,0,0,0,1485,1486,5,189,0,
        0,1486,1487,5,136,0,0,1487,1488,3,246,123,0,1488,1489,5,86,0,0,1489,
        1490,3,150,75,0,1490,1491,5,39,0,0,1491,1492,3,246,123,0,1492,1493,
        5,115,0,0,1493,1494,3,150,75,0,1494,1495,5,23,0,0,1495,1496,3,150,
        75,0,1496,1497,5,207,0,0,1497,197,1,0,0,0,1498,1499,5,14,0,0,1499,
        1500,5,136,0,0,1500,1501,3,246,123,0,1501,1502,5,115,0,0,1502,1505,
        3,150,75,0,1503,1504,5,263,0,0,1504,1506,3,150,75,0,1505,1503,1,
        0,0,0,1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1508,5,207,0,0,1508,
        199,1,0,0,0,1509,1510,5,17,0,0,1510,1511,5,136,0,0,1511,1512,3,246,
        123,0,1512,1513,5,115,0,0,1513,1516,3,150,75,0,1514,1515,5,263,0,
        0,1515,1517,3,150,75,0,1516,1514,1,0,0,0,1516,1517,1,0,0,0,1517,
        1518,1,0,0,0,1518,1519,5,207,0,0,1519,201,1,0,0,0,1520,1521,5,151,
        0,0,1521,1522,5,136,0,0,1522,1523,3,246,123,0,1523,1524,5,115,0,
        0,1524,1527,3,150,75,0,1525,1526,5,263,0,0,1526,1528,3,150,75,0,
        1527,1525,1,0,0,0,1527,1528,1,0,0,0,1528,1529,1,0,0,0,1529,1530,
        5,207,0,0,1530,203,1,0,0,0,1531,1532,5,225,0,0,1532,1533,5,136,0,
        0,1533,1534,3,246,123,0,1534,1535,5,115,0,0,1535,1538,3,150,75,0,
        1536,1537,5,263,0,0,1537,1539,3,150,75,0,1538,1536,1,0,0,0,1538,
        1539,1,0,0,0,1539,1540,1,0,0,0,1540,1541,5,207,0,0,1541,205,1,0,
        0,0,1542,1543,3,104,52,0,1543,207,1,0,0,0,1544,1545,3,94,47,0,1545,
        209,1,0,0,0,1546,1547,3,246,123,0,1547,1549,5,130,0,0,1548,1550,
        3,212,106,0,1549,1548,1,0,0,0,1549,1550,1,0,0,0,1550,1555,1,0,0,
        0,1551,1552,5,39,0,0,1552,1554,3,212,106,0,1553,1551,1,0,0,0,1554,
        1557,1,0,0,0,1555,1553,1,0,0,0,1555,1556,1,0,0,0,1556,1558,1,0,0,
        0,1557,1555,1,0,0,0,1558,1559,5,186,0,0,1559,211,1,0,0,0,1560,1561,
        3,230,115,0,1561,1562,5,37,0,0,1562,1563,3,150,75,0,1563,1570,1,
        0,0,0,1564,1565,5,71,0,0,1565,1570,3,230,115,0,1566,1570,3,246,123,
        0,1567,1568,5,71,0,0,1568,1570,5,239,0,0,1569,1560,1,0,0,0,1569,
        1564,1,0,0,0,1569,1566,1,0,0,0,1569,1567,1,0,0,0,1570,213,1,0,0,
        0,1571,1572,5,91,0,0,1572,1581,5,130,0,0,1573,1582,3,10,5,0,1574,
        1576,3,54,27,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1577,1,0,
        0,0,1577,1579,3,86,43,0,1578,1580,3,36,18,0,1579,1578,1,0,0,0,1579,
        1580,1,0,0,0,1580,1582,1,0,0,0,1581,1573,1,0,0,0,1581,1575,1,0,0,
        0,1582,1583,1,0,0,0,1583,1584,5,186,0,0,1584,215,1,0,0,0,1585,1586,
        5,49,0,0,1586,1595,5,130,0,0,1587,1596,3,10,5,0,1588,1590,3,54,27,
        0,1589,1588,1,0,0,0,1589,1590,1,0,0,0,1590,1591,1,0,0,0,1591,1593,
        3,86,43,0,1592,1594,3,36,18,0,1593,1592,1,0,0,0,1593,1594,1,0,0,
        0,1594,1596,1,0,0,0,1595,1587,1,0,0,0,1595,1589,1,0,0,0,1596,1597,
        1,0,0,0,1597,1598,5,186,0,0,1598,217,1,0,0,0,1599,1600,5,36,0,0,
        1600,1601,5,130,0,0,1601,1602,3,10,5,0,1602,1603,5,186,0,0,1603,
        219,1,0,0,0,1604,1605,3,502,251,0,1605,221,1,0,0,0,1606,1608,5,141,
        0,0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,1609,1,0,0,0,1609,1610,
        7,10,0,0,1610,223,1,0,0,0,1611,1613,5,141,0,0,1612,1611,1,0,0,0,
        1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,1615,5,4,0,0,1615,225,1,
        0,0,0,1616,1618,5,129,0,0,1617,1619,3,150,75,0,1618,1617,1,0,0,0,
        1618,1619,1,0,0,0,1619,1624,1,0,0,0,1620,1621,5,39,0,0,1621,1623,
        3,150,75,0,1622,1620,1,0,0,0,1623,1626,1,0,0,0,1624,1622,1,0,0,0,
        1624,1625,1,0,0,0,1625,1627,1,0,0,0,1626,1624,1,0,0,0,1627,1628,
        5,185,0,0,1628,227,1,0,0,0,1629,1634,5,130,0,0,1630,1631,3,230,115,
        0,1631,1632,5,37,0,0,1632,1633,3,150,75,0,1633,1635,1,0,0,0,1634,
        1630,1,0,0,0,1634,1635,1,0,0,0,1635,1643,1,0,0,0,1636,1637,5,39,
        0,0,1637,1638,3,230,115,0,1638,1639,5,37,0,0,1639,1640,3,150,75,
        0,1640,1642,1,0,0,0,1641,1636,1,0,0,0,1642,1645,1,0,0,0,1643,1641,
        1,0,0,0,1643,1644,1,0,0,0,1644,1646,1,0,0,0,1645,1643,1,0,0,0,1646,
        1647,5,186,0,0,1647,229,1,0,0,0,1648,1649,3,512,256,0,1649,231,1,
        0,0,0,1650,1651,5,68,0,0,1651,1652,3,234,117,0,1652,233,1,0,0,0,
        1653,1656,3,246,123,0,1654,1656,5,4,0,0,1655,1653,1,0,0,0,1655,1654,
        1,0,0,0,1656,235,1,0,0,0,1657,1658,3,238,119,0,1658,1660,5,136,0,
        0,1659,1661,5,69,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1663,
        1,0,0,0,1662,1664,3,240,120,0,1663,1662,1,0,0,0,1663,1664,1,0,0,
        0,1664,1669,1,0,0,0,1665,1666,5,39,0,0,1666,1668,3,240,120,0,1667,
        1665,1,0,0,0,1668,1671,1,0,0,0,1669,1667,1,0,0,0,1669,1670,1,0,0,
        0,1670,1672,1,0,0,0,1671,1669,1,0,0,0,1672,1673,5,207,0,0,1673,237,
        1,0,0,0,1674,1675,3,242,121,0,1675,1676,3,512,256,0,1676,239,1,0,
        0,0,1677,1678,3,150,75,0,1678,241,1,0,0,0,1679,1680,3,512,256,0,
        1680,1681,5,71,0,0,1681,1683,1,0,0,0,1682,1679,1,0,0,0,1683,1686,
        1,0,0,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,243,1,0,0,0,1686,
        1684,1,0,0,0,1687,1692,3,512,256,0,1688,1689,5,39,0,0,1689,1691,
        3,512,256,0,1690,1688,1,0,0,0,1691,1694,1,0,0,0,1692,1690,1,0,0,
        0,1692,1693,1,0,0,0,1693,245,1,0,0,0,1694,1692,1,0,0,0,1695,1696,
        3,512,256,0,1696,247,1,0,0,0,1697,1702,3,512,256,0,1698,1699,5,39,
        0,0,1699,1701,3,512,256,0,1700,1698,1,0,0,0,1701,1704,1,0,0,0,1702,
        1700,1,0,0,0,1702,1703,1,0,0,0,1703,249,1,0,0,0,1704,1702,1,0,0,
        0,1705,1708,5,50,0,0,1706,1707,5,161,0,0,1707,1709,5,197,0,0,1708,
        1706,1,0,0,0,1708,1709,1,0,0,0,1709,1717,1,0,0,0,1710,1718,3,356,
        178,0,1711,1718,3,368,184,0,1712,1718,3,454,227,0,1713,1718,3,302,
        151,0,1714,1718,3,318,159,0,1715,1718,3,476,238,0,1716,1718,3,458,
        229,0,1717,1710,1,0,0,0,1717,1711,1,0,0,0,1717,1712,1,0,0,0,1717,
        1713,1,0,0,0,1717,1714,1,0,0,0,1717,1715,1,0,0,0,1717,1716,1,0,0,
        0,1718,251,1,0,0,0,1719,1723,3,254,127,0,1720,1723,3,260,130,0,1721,
        1723,3,262,131,0,1722,1719,1,0,0,0,1722,1720,1,0,0,0,1722,1721,1,
        0,0,0,1723,253,1,0,0,0,1724,1735,3,256,128,0,1725,1735,3,258,129,
        0,1726,1735,3,334,167,0,1727,1735,3,408,204,0,1728,1735,3,338,169,
        0,1729,1735,3,336,168,0,1730,1735,3,464,232,0,1731,1735,3,466,233,
        0,1732,1735,3,340,170,0,1733,1735,3,350,175,0,1734,1724,1,0,0,0,
        1734,1725,1,0,0,0,1734,1726,1,0,0,0,1734,1727,1,0,0,0,1734,1728,
        1,0,0,0,1734,1729,1,0,0,0,1734,1730,1,0,0,0,1734,1731,1,0,0,0,1734,
        1732,1,0,0,0,1734,1733,1,0,0,0,1735,255,1,0,0,0,1736,1744,5,74,0,
        0,1737,1745,3,358,179,0,1738,1745,3,370,185,0,1739,1745,3,460,230,
        0,1740,1745,3,314,157,0,1741,1745,3,330,165,0,1742,1745,3,478,239,
        0,1743,1745,3,346,173,0,1744,1737,1,0,0,0,1744,1738,1,0,0,0,1744,
        1739,1,0,0,0,1744,1740,1,0,0,0,1744,1741,1,0,0,0,1744,1742,1,0,0,
        0,1744,1743,1,0,0,0,1745,257,1,0,0,0,1746,1752,5,15,0,0,1747,1753,
        3,462,231,0,1748,1753,3,480,240,0,1749,1753,3,374,187,0,1750,1753,
        3,376,188,0,1751,1753,3,342,171,0,1752,1747,1,0,0,0,1752,1748,1,
        0,0,0,1752,1749,1,0,0,0,1752,1750,1,0,0,0,1752,1751,1,0,0,0,1753,
        259,1,0,0,0,1754,1822,5,223,0,0,1755,1756,5,14,0,0,1756,1823,3,264,
        132,0,1757,1758,5,173,0,0,1758,1759,7,11,0,0,1759,1823,3,362,181,
        0,1760,1761,5,30,0,0,1761,1823,3,278,139,0,1762,1763,5,184,0,0,1763,
        1823,3,280,140,0,1764,1765,5,100,0,0,1765,1823,3,280,140,0,1766,
        1767,5,236,0,0,1767,1823,3,280,140,0,1768,1769,5,172,0,0,1769,1823,
        3,280,140,0,1770,1771,5,135,0,0,1771,1823,3,280,140,0,1772,1773,
        5,252,0,0,1773,1823,3,282,141,0,1774,1775,5,253,0,0,1775,1823,3,
        286,143,0,1776,1777,5,124,0,0,1777,1823,3,286,143,0,1778,1779,5,
        149,0,0,1779,1823,3,266,133,0,1780,1781,5,182,0,0,1781,1823,3,272,
        136,0,1782,1783,5,90,0,0,1783,1823,3,286,143,0,1784,1785,5,91,0,
        0,1785,1823,3,284,142,0,1786,1787,5,89,0,0,1787,1823,3,282,141,0,
        1788,1789,5,193,0,0,1789,1823,3,268,134,0,1790,1791,5,192,0,0,1791,
        1823,3,270,135,0,1792,1793,5,31,0,0,1793,1794,5,115,0,0,1794,1823,
        3,290,145,0,1795,1823,3,278,139,0,1796,1823,3,470,235,0,1797,1823,
        3,390,195,0,1798,1823,3,282,141,0,1799,1823,3,288,144,0,1800,1823,
        3,300,150,0,1801,1823,3,290,145,0,1802,1823,3,292,146,0,1803,1823,
        3,482,241,0,1804,1823,3,348,174,0,1805,1823,3,394,197,0,1806,1823,
        3,392,196,0,1807,1811,7,11,0,0,1808,1812,3,396,198,0,1809,1812,3,
        362,181,0,1810,1812,3,396,198,0,1811,1808,1,0,0,0,1811,1809,1,0,
        0,0,1811,1810,1,0,0,0,1812,1823,1,0,0,0,1813,1814,5,256,0,0,1814,
        1815,5,61,0,0,1815,1823,3,290,145,0,1816,1820,7,12,0,0,1817,1821,
        3,398,199,0,1818,1821,3,388,194,0,1819,1821,3,398,199,0,1820,1817,
        1,0,0,0,1820,1818,1,0,0,0,1820,1819,1,0,0,0,1821,1823,1,0,0,0,1822,
        1755,1,0,0,0,1822,1757,1,0,0,0,1822,1760,1,0,0,0,1822,1762,1,0,0,
        0,1822,1764,1,0,0,0,1822,1766,1,0,0,0,1822,1768,1,0,0,0,1822,1770,
        1,0,0,0,1822,1772,1,0,0,0,1822,1774,1,0,0,0,1822,1776,1,0,0,0,1822,
        1778,1,0,0,0,1822,1780,1,0,0,0,1822,1782,1,0,0,0,1822,1784,1,0,0,
        0,1822,1786,1,0,0,0,1822,1788,1,0,0,0,1822,1790,1,0,0,0,1822,1792,
        1,0,0,0,1822,1795,1,0,0,0,1822,1796,1,0,0,0,1822,1797,1,0,0,0,1822,
        1798,1,0,0,0,1822,1799,1,0,0,0,1822,1800,1,0,0,0,1822,1801,1,0,0,
        0,1822,1802,1,0,0,0,1822,1803,1,0,0,0,1822,1804,1,0,0,0,1822,1805,
        1,0,0,0,1822,1806,1,0,0,0,1822,1807,1,0,0,0,1822,1813,1,0,0,0,1822,
        1816,1,0,0,0,1823,261,1,0,0,0,1824,1825,5,235,0,0,1825,1826,3,294,
        147,0,1826,263,1,0,0,0,1827,1828,7,11,0,0,1828,1834,3,362,181,0,
        1829,1834,3,278,139,0,1830,1834,3,282,141,0,1831,1834,3,290,145,
        0,1832,1834,3,394,197,0,1833,1827,1,0,0,0,1833,1829,1,0,0,0,1833,
        1830,1,0,0,0,1833,1831,1,0,0,0,1833,1832,1,0,0,0,1834,265,1,0,0,
        0,1835,1836,7,13,0,0,1836,1848,3,286,143,0,1837,1838,5,124,0,0,1838,
        1848,3,282,141,0,1839,1840,5,182,0,0,1840,1848,3,272,136,0,1841,
        1842,5,90,0,0,1842,1848,3,286,143,0,1843,1844,5,91,0,0,1844,1848,
        3,284,142,0,1845,1846,5,89,0,0,1846,1848,3,282,141,0,1847,1835,1,
        0,0,0,1847,1837,1,0,0,0,1847,1839,1,0,0,0,1847,1841,1,0,0,0,1847,
        1843,1,0,0,0,1847,1845,1,0,0,0,1848,267,1,0,0,0,1849,1850,7,13,0,
        0,1850,1862,3,286,143,0,1851,1852,5,124,0,0,1852,1862,3,286,143,
        0,1853,1854,5,182,0,0,1854,1862,3,272,136,0,1855,1856,5,90,0,0,1856,
        1862,3,286,143,0,1857,1858,5,91,0,0,1858,1862,3,284,142,0,1859,1860,
        5,89,0,0,1860,1862,3,282,141,0,1861,1849,1,0,0,0,1861,1851,1,0,0,
        0,1861,1853,1,0,0,0,1861,1855,1,0,0,0,1861,1857,1,0,0,0,1861,1859,
        1,0,0,0,1862,269,1,0,0,0,1863,1864,7,13,0,0,1864,1874,3,286,143,
        0,1865,1866,5,124,0,0,1866,1874,3,286,143,0,1867,1868,5,182,0,0,
        1868,1874,3,272,136,0,1869,1870,5,90,0,0,1870,1874,3,286,143,0,1871,
        1872,5,89,0,0,1872,1874,3,286,143,0,1873,1863,1,0,0,0,1873,1865,
        1,0,0,0,1873,1867,1,0,0,0,1873,1869,1,0,0,0,1873,1871,1,0,0,0,1874,
        271,1,0,0,0,1875,1878,7,14,0,0,1876,1878,5,248,0,0,1877,1875,1,0,
        0,0,1877,1876,1,0,0,0,1878,1879,1,0,0,0,1879,1880,3,286,143,0,1880,
        273,1,0,0,0,1881,1884,3,246,123,0,1882,1883,5,18,0,0,1883,1885,3,
        246,123,0,1884,1882,1,0,0,0,1884,1885,1,0,0,0,1885,275,1,0,0,0,1886,
        1896,5,268,0,0,1887,1897,5,239,0,0,1888,1893,3,274,137,0,1889,1890,
        5,39,0,0,1890,1892,3,274,137,0,1891,1889,1,0,0,0,1892,1895,1,0,0,
        0,1893,1891,1,0,0,0,1893,1894,1,0,0,0,1894,1897,1,0,0,0,1895,1893,
        1,0,0,0,1896,1887,1,0,0,0,1896,1888,1,0,0,0,1897,1908,1,0,0,0,1898,
        1899,5,162,0,0,1899,1900,5,32,0,0,1900,1905,3,30,15,0,1901,1902,
        5,39,0,0,1902,1904,3,30,15,0,1903,1901,1,0,0,0,1904,1907,1,0,0,0,
        1905,1903,1,0,0,0,1905,1906,1,0,0,0,1906,1909,1,0,0,0,1907,1905,
        1,0,0,0,1908,1898,1,0,0,0,1908,1909,1,0,0,0,1909,1912,1,0,0,0,1910,
        1911,5,226,0,0,1911,1913,3,224,112,0,1912,1910,1,0,0,0,1912,1913,
        1,0,0,0,1913,1916,1,0,0,0,1914,1915,5,132,0,0,1915,1917,3,224,112,
        0,1916,1914,1,0,0,0,1916,1917,1,0,0,0,1917,1919,1,0,0,0,1918,1920,
        3,36,18,0,1919,1918,1,0,0,0,1919,1920,1,0,0,0,1920,277,1,0,0,0,1921,
        1931,7,15,0,0,1922,1924,7,16,0,0,1923,1925,5,163,0,0,1924,1923,1,
        0,0,0,1924,1925,1,0,0,0,1925,1932,1,0,0,0,1926,1928,3,276,138,0,
        1927,1929,3,22,11,0,1928,1927,1,0,0,0,1928,1929,1,0,0,0,1929,1932,
        1,0,0,0,1930,1932,3,36,18,0,1931,1922,1,0,0,0,1931,1926,1,0,0,0,
        1931,1930,1,0,0,0,1931,1932,1,0,0,0,1932,279,1,0,0,0,1933,1939,7,
        15,0,0,1934,1936,3,276,138,0,1935,1937,3,22,11,0,1936,1935,1,0,0,
        0,1936,1937,1,0,0,0,1937,1940,1,0,0,0,1938,1940,3,36,18,0,1939,1934,
        1,0,0,0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,281,1,0,0,0,1941,
        1951,7,17,0,0,1942,1944,7,16,0,0,1943,1945,5,163,0,0,1944,1943,1,
        0,0,0,1944,1945,1,0,0,0,1945,1952,1,0,0,0,1946,1948,3,276,138,0,
        1947,1949,3,22,11,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1952,
        1,0,0,0,1950,1952,3,36,18,0,1951,1942,1,0,0,0,1951,1946,1,0,0,0,
        1951,1950,1,0,0,0,1951,1952,1,0,0,0,1952,283,1,0,0,0,1953,1958,7,
        17,0,0,1954,1956,7,16,0,0,1955,1957,5,163,0,0,1956,1955,1,0,0,0,
        1956,1957,1,0,0,0,1957,1959,1,0,0,0,1958,1954,1,0,0,0,1958,1959,
        1,0,0,0,1959,285,1,0,0,0,1960,1966,7,17,0,0,1961,1963,3,276,138,
        0,1962,1964,3,22,11,0,1963,1962,1,0,0,0,1963,1964,1,0,0,0,1964,1967,
        1,0,0,0,1965,1967,3,36,18,0,1966,1961,1,0,0,0,1966,1965,1,0,0,0,
        1966,1967,1,0,0,0,1967,287,1,0,0,0,1968,1978,7,18,0,0,1969,1976,
        5,87,0,0,1970,1974,5,32,0,0,1971,1972,5,52,0,0,1972,1975,5,256,0,
        0,1973,1975,3,512,256,0,1974,1971,1,0,0,0,1974,1973,1,0,0,0,1975,
        1977,1,0,0,0,1976,1970,1,0,0,0,1976,1977,1,0,0,0,1977,1979,1,0,0,
        0,1978,1969,1,0,0,0,1978,1979,1,0,0,0,1979,1985,1,0,0,0,1980,1982,
        3,276,138,0,1981,1983,3,22,11,0,1982,1981,1,0,0,0,1982,1983,1,0,
        0,0,1983,1986,1,0,0,0,1984,1986,3,36,18,0,1985,1980,1,0,0,0,1985,
        1984,1,0,0,0,1985,1986,1,0,0,0,1986,289,1,0,0,0,1987,1997,7,19,0,
        0,1988,1995,5,87,0,0,1989,1993,5,32,0,0,1990,1991,5,52,0,0,1991,
        1994,5,256,0,0,1992,1994,3,512,256,0,1993,1990,1,0,0,0,1993,1992,
        1,0,0,0,1994,1996,1,0,0,0,1995,1989,1,0,0,0,1995,1996,1,0,0,0,1996,
        1998,1,0,0,0,1997,1988,1,0,0,0,1997,1998,1,0,0,0,1998,2004,1,0,0,
        0,1999,2001,3,276,138,0,2000,2002,3,22,11,0,2001,2000,1,0,0,0,2001,
        2002,1,0,0,0,2002,2005,1,0,0,0,2003,2005,3,36,18,0,2004,1999,1,0,
        0,0,2004,2003,1,0,0,0,2004,2005,1,0,0,0,2005,291,1,0,0,0,2006,2027,
        7,20,0,0,2007,2028,3,296,148,0,2008,2014,3,298,149,0,2009,2011,3,
        276,138,0,2010,2012,3,22,11,0,2011,2010,1,0,0,0,2011,2012,1,0,0,
        0,2012,2015,1,0,0,0,2013,2015,3,36,18,0,2014,2009,1,0,0,0,2014,2013,
        1,0,0,0,2015,2023,1,0,0,0,2016,2018,3,276,138,0,2017,2019,3,22,11,
        0,2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,2023,1,0,0,0,2020,2023,
        3,36,18,0,2021,2023,3,298,149,0,2022,2008,1,0,0,0,2022,2016,1,0,
        0,0,2022,2020,1,0,0,0,2022,2021,1,0,0,0,2023,2025,1,0,0,0,2024,2026,
        3,296,148,0,2025,2024,1,0,0,0,2025,2026,1,0,0,0,2026,2028,1,0,0,
        0,2027,2007,1,0,0,0,2027,2022,1,0,0,0,2027,2028,1,0,0,0,2028,293,
        1,0,0,0,2029,2050,7,20,0,0,2030,2051,3,296,148,0,2031,2037,3,298,
        149,0,2032,2034,3,276,138,0,2033,2035,3,22,11,0,2034,2033,1,0,0,
        0,2034,2035,1,0,0,0,2035,2038,1,0,0,0,2036,2038,3,36,18,0,2037,2032,
        1,0,0,0,2037,2036,1,0,0,0,2038,2046,1,0,0,0,2039,2041,3,276,138,
        0,2040,2042,3,22,11,0,2041,2040,1,0,0,0,2041,2042,1,0,0,0,2042,2046,
        1,0,0,0,2043,2046,3,36,18,0,2044,2046,3,298,149,0,2045,2031,1,0,
        0,0,2045,2039,1,0,0,0,2045,2043,1,0,0,0,2045,2044,1,0,0,0,2046,2048,
        1,0,0,0,2047,2049,3,296,148,0,2048,2047,1,0,0,0,2048,2049,1,0,0,
        0,2049,2051,1,0,0,0,2050,2030,1,0,0,0,2050,2045,1,0,0,0,2050,2051,
        1,0,0,0,2051,295,1,0,0,0,2052,2053,5,235,0,0,2053,2057,3,294,147,
        0,2054,2055,5,223,0,0,2055,2057,3,292,146,0,2056,2052,1,0,0,0,2056,
        2054,1,0,0,0,2057,297,1,0,0,0,2058,2061,3,500,250,0,2059,2061,3,
        150,75,0,2060,2058,1,0,0,0,2060,2059,1,0,0,0,2061,299,1,0,0,0,2062,
        2077,7,21,0,0,2063,2069,3,298,149,0,2064,2066,3,276,138,0,2065,2067,
        3,22,11,0,2066,2065,1,0,0,0,2066,2067,1,0,0,0,2067,2070,1,0,0,0,
        2068,2070,3,36,18,0,2069,2064,1,0,0,0,2069,2068,1,0,0,0,2070,2078,
        1,0,0,0,2071,2073,3,276,138,0,2072,2074,3,22,11,0,2073,2072,1,0,
        0,0,2073,2074,1,0,0,0,2074,2078,1,0,0,0,2075,2078,3,36,18,0,2076,
        2078,3,298,149,0,2077,2063,1,0,0,0,2077,2071,1,0,0,0,2077,2075,1,
        0,0,0,2077,2076,1,0,0,0,2077,2078,1,0,0,0,2078,301,1,0,0,0,2079,
        2099,5,44,0,0,2080,2081,5,156,0,0,2081,2100,5,136,0,0,2082,2083,
        5,97,0,0,2083,2100,5,136,0,0,2084,2085,5,112,0,0,2085,2086,5,152,
        0,0,2086,2087,5,91,0,0,2087,2088,7,22,0,0,2088,2100,5,136,0,0,2089,
        2091,3,512,256,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,2095,1,
        0,0,0,2092,2093,5,112,0,0,2093,2094,5,152,0,0,2094,2096,5,91,0,0,
        2095,2092,1,0,0,0,2095,2096,1,0,0,0,2096,2097,1,0,0,0,2097,2098,
        7,22,0,0,2098,2100,5,136,0,0,2099,2080,1,0,0,0,2099,2082,1,0,0,0,
        2099,2084,1,0,0,0,2099,2090,1,0,0,0,2100,2103,1,0,0,0,2101,2104,
        3,306,153,0,2102,2104,3,308,154,0,2103,2101,1,0,0,0,2103,2102,1,
        0,0,0,2104,2125,1,0,0,0,2105,2106,5,20,0,0,2106,2107,5,91,0,0,2107,
        2126,3,332,166,0,2108,2109,7,23,0,0,2109,2123,3,332,166,0,2110,2111,
        5,38,0,0,2111,2124,3,304,152,0,2112,2121,5,122,0,0,2113,2122,5,252,
        0,0,2114,2122,5,124,0,0,2115,2122,3,310,155,0,2116,2122,3,312,156,
        0,2117,2118,5,152,0,0,2118,2122,5,154,0,0,2119,2120,7,7,0,0,2120,
        2122,3,304,152,0,2121,2113,1,0,0,0,2121,2114,1,0,0,0,2121,2115,1,
        0,0,0,2121,2116,1,0,0,0,2121,2117,1,0,0,0,2121,2119,1,0,0,0,2122,
        2124,1,0,0,0,2123,2110,1,0,0,0,2123,2112,1,0,0,0,2124,2126,1,0,0,
        0,2125,2105,1,0,0,0,2125,2108,1,0,0,0,2126,2129,1,0,0,0,2127,2128,
        5,159,0,0,2128,2130,3,506,253,0,2129,2127,1,0,0,0,2129,2130,1,0,
        0,0,2130,303,1,0,0,0,2131,2163,7,24,0,0,2132,2163,7,25,0,0,2133,
        2139,5,120,0,0,2134,2136,5,224,0,0,2135,2134,1,0,0,0,2135,2136,1,
        0,0,0,2136,2137,1,0,0,0,2137,2139,5,121,0,0,2138,2133,1,0,0,0,2138,
        2135,1,0,0,0,2139,2163,1,0,0,0,2140,2163,5,96,0,0,2141,2163,5,56,
        0,0,2142,2143,5,134,0,0,2143,2163,7,26,0,0,2144,2145,5,269,0,0,2145,
        2163,7,26,0,0,2146,2151,5,238,0,0,2147,2148,5,265,0,0,2148,2152,
        5,241,0,0,2149,2150,5,264,0,0,2150,2152,5,241,0,0,2151,2147,1,0,
        0,0,2151,2149,1,0,0,0,2152,2163,1,0,0,0,2153,2158,5,240,0,0,2154,
        2155,5,265,0,0,2155,2159,5,241,0,0,2156,2157,5,264,0,0,2157,2159,
        5,241,0,0,2158,2154,1,0,0,0,2158,2156,1,0,0,0,2159,2163,1,0,0,0,
        2160,2163,5,77,0,0,2161,2163,5,172,0,0,2162,2131,1,0,0,0,2162,2132,
        1,0,0,0,2162,2138,1,0,0,0,2162,2140,1,0,0,0,2162,2141,1,0,0,0,2162,
        2142,1,0,0,0,2162,2144,1,0,0,0,2162,2146,1,0,0,0,2162,2153,1,0,0,
        0,2162,2160,1,0,0,0,2162,2161,1,0,0,0,2163,305,1,0,0,0,2164,2165,
        3,246,123,0,2165,2166,3,114,57,0,2166,2167,5,207,0,0,2167,307,1,
        0,0,0,2168,2170,5,207,0,0,2169,2171,3,122,61,0,2170,2169,1,0,0,0,
        2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2173,3,124,62,0,2173,2174,
        5,129,0,0,2174,2175,3,246,123,0,2175,2176,3,114,57,0,2176,2177,5,
        185,0,0,2177,2179,3,124,62,0,2178,2180,3,126,63,0,2179,2178,1,0,
        0,0,2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,2182,5,136,0,0,2182,
        2183,5,207,0,0,2183,309,1,0,0,0,2184,2185,5,149,0,0,2185,2186,7,
        27,0,0,2186,311,1,0,0,0,2187,2188,7,28,0,0,2188,2189,7,27,0,0,2189,
        313,1,0,0,0,2190,2214,5,44,0,0,2191,2192,5,156,0,0,2192,2195,5,136,
        0,0,2193,2196,3,306,153,0,2194,2196,3,308,154,0,2195,2193,1,0,0,
        0,2195,2194,1,0,0,0,2196,2197,1,0,0,0,2197,2207,5,20,0,0,2198,2199,
        5,91,0,0,2199,2208,3,332,166,0,2200,2201,3,332,166,0,2201,2205,5,
        122,0,0,2202,2206,3,316,158,0,2203,2204,5,152,0,0,2204,2206,5,154,
        0,0,2205,2202,1,0,0,0,2205,2203,1,0,0,0,2206,2208,1,0,0,0,2207,2198,
        1,0,0,0,2207,2200,1,0,0,0,2208,2215,1,0,0,0,2209,2212,3,512,256,
        0,2210,2211,5,112,0,0,2211,2213,5,91,0,0,2212,2210,1,0,0,0,2212,
        2213,1,0,0,0,2213,2215,1,0,0,0,2214,2191,1,0,0,0,2214,2209,1,0,0,
        0,2215,315,1,0,0,0,2216,2220,5,252,0,0,2217,2218,5,149,0,0,2218,
        2220,5,124,0,0,2219,2216,1,0,0,0,2219,2217,1,0,0,0,2220,317,1,0,
        0,0,2221,2222,5,30,0,0,2222,2223,5,116,0,0,2223,2246,3,322,161,0,
        2224,2225,5,184,0,0,2225,2226,5,116,0,0,2226,2246,3,322,161,0,2227,
        2228,5,100,0,0,2228,2229,5,116,0,0,2229,2246,3,324,162,0,2230,2231,
        5,236,0,0,2231,2232,5,116,0,0,2232,2246,3,322,161,0,2233,2234,5,
        172,0,0,2234,2235,5,116,0,0,2235,2246,3,322,161,0,2236,2237,5,135,
        0,0,2237,2238,5,116,0,0,2238,2246,3,326,163,0,2239,2243,5,116,0,
        0,2240,2241,5,156,0,0,2241,2244,3,320,160,0,2242,2244,3,322,161,
        0,2243,2240,1,0,0,0,2243,2242,1,0,0,0,2244,2246,1,0,0,0,2245,2221,
        1,0,0,0,2245,2224,1,0,0,0,2245,2227,1,0,0,0,2245,2230,1,0,0,0,2245,
        2233,1,0,0,0,2245,2236,1,0,0,0,2245,2239,1,0,0,0,2246,319,1,0,0,
        0,2247,2248,3,114,57,0,2248,2249,5,136,0,0,2249,2250,3,510,255,0,
        2250,2251,5,207,0,0,2251,321,1,0,0,0,2252,2253,5,97,0,0,2253,2269,
        5,136,0,0,2254,2255,5,112,0,0,2255,2256,5,152,0,0,2256,2257,5,91,
        0,0,2257,2258,5,97,0,0,2258,2269,5,136,0,0,2259,2263,3,512,256,0,
        2260,2261,5,112,0,0,2261,2262,5,152,0,0,2262,2264,5,91,0,0,2263,
        2260,1,0,0,0,2263,2264,1,0,0,0,2264,2265,1,0,0,0,2265,2266,5,97,
        0,0,2266,2267,5,136,0,0,2267,2269,1,0,0,0,2268,2252,1,0,0,0,2268,
        2254,1,0,0,0,2268,2259,1,0,0,0,2269,2290,1,0,0,0,2270,2271,3,246,
        123,0,2271,2272,3,114,57,0,2272,2273,5,207,0,0,2273,2291,1,0,0,0,
        2274,2276,5,207,0,0,2275,2277,3,122,61,0,2276,2275,1,0,0,0,2276,
        2277,1,0,0,0,2277,2278,1,0,0,0,2278,2279,3,124,62,0,2279,2280,5,
        129,0,0,2280,2281,3,246,123,0,2281,2282,3,114,57,0,2282,2283,5,185,
        0,0,2283,2285,3,124,62,0,2284,2286,3,126,63,0,2285,2284,1,0,0,0,
        2285,2286,1,0,0,0,2286,2287,1,0,0,0,2287,2288,5,136,0,0,2288,2289,
        5,207,0,0,2289,2291,1,0,0,0,2290,2270,1,0,0,0,2290,2274,1,0,0,0,
        2291,2292,1,0,0,0,2292,2293,5,156,0,0,2293,2296,3,332,166,0,2294,
        2295,5,159,0,0,2295,2297,3,506,253,0,2296,2294,1,0,0,0,2296,2297,
        1,0,0,0,2297,323,1,0,0,0,2298,2299,5,97,0,0,2299,2315,5,136,0,0,
        2300,2301,5,112,0,0,2301,2302,5,152,0,0,2302,2303,5,91,0,0,2303,
        2304,5,97,0,0,2304,2315,5,136,0,0,2305,2309,3,512,256,0,2306,2307,
        5,112,0,0,2307,2308,5,152,0,0,2308,2310,5,91,0,0,2309,2306,1,0,0,
        0,2309,2310,1,0,0,0,2310,2311,1,0,0,0,2311,2312,5,97,0,0,2312,2313,
        5,136,0,0,2313,2315,1,0,0,0,2314,2298,1,0,0,0,2314,2300,1,0,0,0,
        2314,2305,1,0,0,0,2315,2336,1,0,0,0,2316,2317,3,246,123,0,2317,2318,
        3,116,58,0,2318,2319,5,207,0,0,2319,2337,1,0,0,0,2320,2322,5,207,
        0,0,2321,2323,3,122,61,0,2322,2321,1,0,0,0,2322,2323,1,0,0,0,2323,
        2324,1,0,0,0,2324,2325,3,124,62,0,2325,2326,5,129,0,0,2326,2327,
        3,246,123,0,2327,2328,3,116,58,0,2328,2329,5,185,0,0,2329,2331,3,
        124,62,0,2330,2332,3,126,63,0,2331,2330,1,0,0,0,2331,2332,1,0,0,
        0,2332,2333,1,0,0,0,2333,2334,5,136,0,0,2334,2335,5,207,0,0,2335,
        2337,1,0,0,0,2336,2316,1,0,0,0,2336,2320,1,0,0,0,2337,2338,1,0,0,
        0,2338,2339,5,156,0,0,2339,2340,5,78,0,0,2340,2341,5,129,0,0,2341,
        2342,3,246,123,0,2342,2349,3,178,89,0,2343,2344,5,39,0,0,2344,2345,
        3,246,123,0,2345,2346,3,178,89,0,2346,2348,1,0,0,0,2347,2343,1,0,
        0,0,2348,2351,1,0,0,0,2349,2347,1,0,0,0,2349,2350,1,0,0,0,2350,2352,
        1,0,0,0,2351,2349,1,0,0,0,2352,2355,5,185,0,0,2353,2354,5,159,0,
        0,2354,2356,3,506,253,0,2355,2353,1,0,0,0,2355,2356,1,0,0,0,2356,
        325,1,0,0,0,2357,2358,5,97,0,0,2358,2374,5,136,0,0,2359,2360,5,112,
        0,0,2360,2361,5,152,0,0,2361,2362,5,91,0,0,2362,2363,5,97,0,0,2363,
        2374,5,136,0,0,2364,2368,3,512,256,0,2365,2366,5,112,0,0,2366,2367,
        5,152,0,0,2367,2369,5,91,0,0,2368,2365,1,0,0,0,2368,2369,1,0,0,0,
        2369,2370,1,0,0,0,2370,2371,5,97,0,0,2371,2372,5,136,0,0,2372,2374,
        1,0,0,0,2373,2357,1,0,0,0,2373,2359,1,0,0,0,2373,2364,1,0,0,0,2374,
        2398,1,0,0,0,2375,2376,3,246,123,0,2376,2377,5,207,0,0,2377,2378,
        5,156,0,0,2378,2379,5,78,0,0,2379,2399,1,0,0,0,2380,2382,5,207,0,
        0,2381,2383,3,122,61,0,2382,2381,1,0,0,0,2382,2383,1,0,0,0,2383,
        2384,1,0,0,0,2384,2385,3,124,62,0,2385,2386,5,129,0,0,2386,2387,
        3,246,123,0,2387,2388,5,185,0,0,2388,2390,3,124,62,0,2389,2391,3,
        126,63,0,2390,2389,1,0,0,0,2390,2391,1,0,0,0,2391,2392,1,0,0,0,2392,
        2393,5,136,0,0,2393,2394,5,207,0,0,2394,2396,5,156,0,0,2395,2397,
        5,78,0,0,2396,2395,1,0,0,0,2396,2397,1,0,0,0,2397,2399,1,0,0,0,2398,
        2375,1,0,0,0,2398,2380,1,0,0,0,2399,2400,1,0,0,0,2400,2401,3,328,
        164,0,2401,2402,5,136,0,0,2402,2403,3,246,123,0,2403,2406,5,207,
        0,0,2404,2405,5,159,0,0,2405,2407,3,506,253,0,2406,2404,1,0,0,0,
        2406,2407,1,0,0,0,2407,327,1,0,0,0,2408,2409,3,512,256,0,2409,329,
        1,0,0,0,2410,2422,5,116,0,0,2411,2412,5,156,0,0,2412,2413,3,114,
        57,0,2413,2414,5,136,0,0,2414,2415,3,510,255,0,2415,2416,5,207,0,
        0,2416,2423,1,0,0,0,2417,2420,3,512,256,0,2418,2419,5,112,0,0,2419,
        2421,5,91,0,0,2420,2418,1,0,0,0,2420,2421,1,0,0,0,2421,2423,1,0,
        0,0,2422,2411,1,0,0,0,2422,2417,1,0,0,0,2423,331,1,0,0,0,2424,2425,
        3,246,123,0,2425,2426,3,178,89,0,2426,2442,1,0,0,0,2427,2428,5,136,
        0,0,2428,2429,3,246,123,0,2429,2436,3,178,89,0,2430,2431,5,39,0,
        0,2431,2432,3,246,123,0,2432,2433,3,178,89,0,2433,2435,1,0,0,0,2434,
        2430,1,0,0,0,2435,2438,1,0,0,0,2436,2434,1,0,0,0,2436,2437,1,0,0,
        0,2437,2439,1,0,0,0,2438,2436,1,0,0,0,2439,2440,5,207,0,0,2440,2442,
        1,0,0,0,2441,2424,1,0,0,0,2441,2427,1,0,0,0,2442,333,1,0,0,0,2443,
        2447,5,190,0,0,2444,2448,3,360,180,0,2445,2448,3,372,186,0,2446,
        2448,3,344,172,0,2447,2444,1,0,0,0,2447,2445,1,0,0,0,2447,2446,1,
        0,0,0,2448,335,1,0,0,0,2449,2466,5,104,0,0,2450,2454,5,114,0,0,2451,
        2455,3,406,203,0,2452,2453,5,203,0,0,2453,2455,3,400,200,0,2454,
        2451,1,0,0,0,2454,2452,1,0,0,0,2455,2467,1,0,0,0,2456,2465,3,406,
        203,0,2457,2460,5,203,0,0,2458,2461,3,400,200,0,2459,2461,3,364,
        182,0,2460,2458,1,0,0,0,2460,2459,1,0,0,0,2461,2465,1,0,0,0,2462,
        2463,5,204,0,0,2463,2465,3,364,182,0,2464,2456,1,0,0,0,2464,2457,
        1,0,0,0,2464,2462,1,0,0,0,2465,2467,1,0,0,0,2466,2450,1,0,0,0,2466,
        2464,1,0,0,0,2467,337,1,0,0,0,2468,2500,5,202,0,0,2469,2471,5,63,
        0,0,2470,2472,5,114,0,0,2471,2470,1,0,0,0,2471,2472,1,0,0,0,2472,
        2476,1,0,0,0,2473,2477,3,410,205,0,2474,2475,5,203,0,0,2475,2477,
        3,402,201,0,2476,2473,1,0,0,0,2476,2474,1,0,0,0,2477,2501,1,0,0,
        0,2478,2480,5,104,0,0,2479,2481,5,114,0,0,2480,2479,1,0,0,0,2480,
        2481,1,0,0,0,2481,2485,1,0,0,0,2482,2486,3,410,205,0,2483,2484,5,
        203,0,0,2484,2486,3,402,201,0,2485,2482,1,0,0,0,2485,2483,1,0,0,
        0,2486,2501,1,0,0,0,2487,2491,5,114,0,0,2488,2492,3,410,205,0,2489,
        2490,5,203,0,0,2490,2492,3,402,201,0,2491,2488,1,0,0,0,2491,2489,
        1,0,0,0,2492,2501,1,0,0,0,2493,2499,3,410,205,0,2494,2495,5,203,
        0,0,2495,2499,3,402,201,0,2496,2497,7,11,0,0,2497,2499,3,366,183,
        0,2498,2493,1,0,0,0,2498,2494,1,0,0,0,2498,2496,1,0,0,0,2499,2501,
        1,0,0,0,2500,2469,1,0,0,0,2500,2478,1,0,0,0,2500,2487,1,0,0,0,2500,
        2498,1,0,0,0,2501,339,1,0,0,0,2502,2503,5,79,0,0,2503,2504,5,216,
        0,0,2504,2506,3,504,252,0,2505,2507,3,456,228,0,2506,2505,1,0,0,
        0,2506,2507,1,0,0,0,2507,341,1,0,0,0,2508,2509,5,216,0,0,2509,2510,
        3,504,252,0,2510,2511,5,218,0,0,2511,2512,3,456,228,0,2512,343,1,
        0,0,0,2513,2514,5,216,0,0,2514,2515,3,504,252,0,2515,2516,5,242,
        0,0,2516,2517,3,504,252,0,2517,345,1,0,0,0,2518,2519,5,216,0,0,2519,
        2520,3,504,252,0,2520,347,1,0,0,0,2521,2527,7,29,0,0,2522,2524,3,
        276,138,0,2523,2525,3,22,11,0,2524,2523,1,0,0,0,2524,2525,1,0,0,
        0,2525,2528,1,0,0,0,2526,2528,3,36,18,0,2527,2522,1,0,0,0,2527,2526,
        1,0,0,0,2527,2528,1,0,0,0,2528,349,1,0,0,0,2529,2531,5,75,0,0,2530,
        2529,1,0,0,0,2530,2531,1,0,0,0,2531,2534,1,0,0,0,2532,2535,3,352,
        176,0,2533,2535,3,354,177,0,2534,2532,1,0,0,0,2534,2533,1,0,0,0,
        2535,351,1,0,0,0,2536,2537,5,59,0,0,2537,2538,7,30,0,0,2538,2539,
        5,99,0,0,2539,2540,7,29,0,0,2540,2545,3,504,252,0,2541,2542,5,39,
        0,0,2542,2544,3,504,252,0,2543,2541,1,0,0,0,2544,2547,1,0,0,0,2545,
        2543,1,0,0,0,2545,2546,1,0,0,0,2546,353,1,0,0,0,2547,2545,1,0,0,
        0,2548,2549,5,188,0,0,2549,2550,7,30,0,0,2550,355,1,0,0,0,2551,2552,
        5,203,0,0,2552,2556,3,490,245,0,2553,2554,5,112,0,0,2554,2555,5,
        152,0,0,2555,2557,5,91,0,0,2556,2553,1,0,0,0,2556,2557,1,0,0,0,2557,
        2562,1,0,0,0,2558,2559,5,18,0,0,2559,2560,5,47,0,0,2560,2561,5,155,
        0,0,2561,2563,3,490,245,0,2562,2558,1,0,0,0,2562,2563,1,0,0,0,2563,
        357,1,0,0,0,2564,2565,5,203,0,0,2565,2568,3,490,245,0,2566,2567,
        5,112,0,0,2567,2569,5,91,0,0,2568,2566,1,0,0,0,2568,2569,1,0,0,0,
        2569,359,1,0,0,0,2570,2571,5,203,0,0,2571,2574,3,490,245,0,2572,
        2573,5,112,0,0,2573,2575,5,91,0,0,2574,2572,1,0,0,0,2574,2575,1,
        0,0,0,2575,2576,1,0,0,0,2576,2577,5,242,0,0,2577,2578,3,490,245,
        0,2578,361,1,0,0,0,2579,2580,5,264,0,0,2580,2582,7,12,0,0,2581,2579,
        1,0,0,0,2581,2582,1,0,0,0,2582,2588,1,0,0,0,2583,2585,3,276,138,
        0,2584,2586,3,22,11,0,2585,2584,1,0,0,0,2585,2586,1,0,0,0,2586,2589,
        1,0,0,0,2587,2589,3,36,18,0,2588,2583,1,0,0,0,2588,2587,1,0,0,0,
        2588,2589,1,0,0,0,2589,363,1,0,0,0,2590,2591,3,488,244,0,2591,2592,
        5,242,0,0,2592,2593,3,488,244,0,2593,365,1,0,0,0,2594,2595,3,488,
        244,0,2595,2596,5,99,0,0,2596,2597,3,488,244,0,2597,367,1,0,0,0,
        2598,2599,5,256,0,0,2599,2603,3,490,245,0,2600,2601,5,112,0,0,2601,
        2602,5,152,0,0,2602,2604,5,91,0,0,2603,2600,1,0,0,0,2603,2604,1,
        0,0,0,2604,2605,1,0,0,0,2605,2607,5,218,0,0,2606,2608,7,31,0,0,2607,
        2606,1,0,0,0,2607,2608,1,0,0,0,2608,2609,1,0,0,0,2609,2610,5,164,
        0,0,2610,2612,3,380,190,0,2611,2613,3,382,191,0,2612,2611,1,0,0,
        0,2612,2613,1,0,0,0,2613,2623,1,0,0,0,2614,2619,5,218,0,0,2615,2616,
        5,164,0,0,2616,2620,3,382,191,0,2617,2620,3,384,192,0,2618,2620,
        3,386,193,0,2619,2615,1,0,0,0,2619,2617,1,0,0,0,2619,2618,1,0,0,
        0,2620,2622,1,0,0,0,2621,2614,1,0,0,0,2622,2625,1,0,0,0,2623,2621,
        1,0,0,0,2623,2624,1,0,0,0,2624,369,1,0,0,0,2625,2623,1,0,0,0,2626,
        2627,5,256,0,0,2627,2630,3,490,245,0,2628,2629,5,112,0,0,2629,2631,
        5,91,0,0,2630,2628,1,0,0,0,2630,2631,1,0,0,0,2631,371,1,0,0,0,2632,
        2633,5,256,0,0,2633,2636,3,490,245,0,2634,2635,5,112,0,0,2635,2637,
        5,91,0,0,2636,2634,1,0,0,0,2636,2637,1,0,0,0,2637,2638,1,0,0,0,2638,
        2639,5,242,0,0,2639,2640,3,490,245,0,2640,373,1,0,0,0,2641,2642,
        5,52,0,0,2642,2643,5,256,0,0,2643,2644,5,218,0,0,2644,2645,5,164,
        0,0,2645,2646,5,99,0,0,2646,2647,3,380,190,0,2647,2648,5,242,0,0,
        2648,2649,3,380,190,0,2649,375,1,0,0,0,2650,2651,5,256,0,0,2651,
        2654,3,490,245,0,2652,2653,5,112,0,0,2653,2655,5,91,0,0,2654,2652,
        1,0,0,0,2654,2655,1,0,0,0,2655,2688,1,0,0,0,2656,2679,5,218,0,0,
        2657,2658,5,169,0,0,2658,2659,5,164,0,0,2659,2661,3,378,189,0,2660,
        2662,3,382,191,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,2680,1,
        0,0,0,2663,2664,5,83,0,0,2664,2665,5,164,0,0,2665,2667,3,378,189,
        0,2666,2668,3,382,191,0,2667,2666,1,0,0,0,2667,2668,1,0,0,0,2668,
        2680,1,0,0,0,2669,2675,5,164,0,0,2670,2676,3,382,191,0,2671,2673,
        3,378,189,0,2672,2674,3,382,191,0,2673,2672,1,0,0,0,2673,2674,1,
        0,0,0,2674,2676,1,0,0,0,2675,2670,1,0,0,0,2675,2671,1,0,0,0,2676,
        2680,1,0,0,0,2677,2680,3,384,192,0,2678,2680,3,386,193,0,2679,2657,
        1,0,0,0,2679,2663,1,0,0,0,2679,2669,1,0,0,0,2679,2677,1,0,0,0,2679,
        2678,1,0,0,0,2680,2682,1,0,0,0,2681,2656,1,0,0,0,2682,2683,1,0,0,
        0,2683,2681,1,0,0,0,2683,2684,1,0,0,0,2684,2689,1,0,0,0,2685,2686,
        5,195,0,0,2686,2687,5,111,0,0,2687,2689,5,54,0,0,2688,2681,1,0,0,
        0,2688,2685,1,0,0,0,2689,377,1,0,0,0,2690,2691,3,380,190,0,2691,
        379,1,0,0,0,2692,2695,3,502,251,0,2693,2695,3,232,116,0,2694,2692,
        1,0,0,0,2694,2693,1,0,0,0,2695,381,1,0,0,0,2696,2698,5,35,0,0,2697,
        2699,5,152,0,0,2698,2697,1,0,0,0,2698,2699,1,0,0,0,2699,2700,1,0,
        0,0,2700,2701,5,200,0,0,2701,383,1,0,0,0,2702,2703,5,229,0,0,2703,
        2704,7,32,0,0,2704,385,1,0,0,0,2705,2706,5,111,0,0,2706,2707,5,54,
        0,0,2707,2708,3,486,243,0,2708,387,1,0,0,0,2709,2711,3,276,138,0,
        2710,2712,3,22,11,0,2711,2710,1,0,0,0,2711,2712,1,0,0,0,2712,2715,
        1,0,0,0,2713,2715,3,36,18,0,2714,2709,1,0,0,0,2714,2713,1,0,0,0,
        2714,2715,1,0,0,0,2715,389,1,0,0,0,2716,2717,5,52,0,0,2717,2723,
        5,256,0,0,2718,2720,3,276,138,0,2719,2721,3,22,11,0,2720,2719,1,
        0,0,0,2720,2721,1,0,0,0,2721,2724,1,0,0,0,2722,2724,3,36,18,0,2723,
        2718,1,0,0,0,2723,2722,1,0,0,0,2723,2724,1,0,0,0,2724,391,1,0,0,
        0,2725,2726,5,232,0,0,2726,2732,7,33,0,0,2727,2729,3,276,138,0,2728,
        2730,3,22,11,0,2729,2728,1,0,0,0,2729,2730,1,0,0,0,2730,2733,1,0,
        0,0,2731,2733,3,36,18,0,2732,2727,1,0,0,0,2732,2731,1,0,0,0,2732,
        2733,1,0,0,0,2733,393,1,0,0,0,2734,2740,7,33,0,0,2735,2737,5,18,
        0,0,2736,2738,5,202,0,0,2737,2736,1,0,0,0,2737,2738,1,0,0,0,2738,
        2739,1,0,0,0,2739,2741,7,34,0,0,2740,2735,1,0,0,0,2740,2741,1,0,
        0,0,2741,2747,1,0,0,0,2742,2744,3,276,138,0,2743,2745,3,22,11,0,
        2744,2743,1,0,0,0,2744,2745,1,0,0,0,2745,2748,1,0,0,0,2746,2748,
        3,36,18,0,2747,2742,1,0,0,0,2747,2746,1,0,0,0,2747,2748,1,0,0,0,
        2748,395,1,0,0,0,2749,2750,3,488,244,0,2750,2756,7,33,0,0,2751,2753,
        5,18,0,0,2752,2754,5,202,0,0,2753,2752,1,0,0,0,2753,2754,1,0,0,0,
        2754,2755,1,0,0,0,2755,2757,7,34,0,0,2756,2751,1,0,0,0,2756,2757,
        1,0,0,0,2757,2763,1,0,0,0,2758,2760,3,276,138,0,2759,2761,3,22,11,
        0,2760,2759,1,0,0,0,2760,2761,1,0,0,0,2761,2764,1,0,0,0,2762,2764,
        3,36,18,0,2763,2758,1,0,0,0,2763,2762,1,0,0,0,2763,2764,1,0,0,0,
        2764,397,1,0,0,0,2765,2766,3,488,244,0,2766,2767,7,33,0,0,2767,2773,
        1,0,0,0,2768,2773,7,33,0,0,2769,2770,3,488,244,0,2770,2771,7,33,
        0,0,2771,2773,1,0,0,0,2772,2765,1,0,0,0,2772,2768,1,0,0,0,2772,2769,
        1,0,0,0,2773,2779,1,0,0,0,2774,2776,5,18,0,0,2775,2777,5,202,0,0,
        2776,2775,1,0,0,0,2776,2777,1,0,0,0,2777,2778,1,0,0,0,2778,2780,
        7,34,0,0,2779,2774,1,0,0,0,2779,2780,1,0,0,0,2780,2786,1,0,0,0,2781,
        2783,3,276,138,0,2782,2784,3,22,11,0,2783,2782,1,0,0,0,2783,2784,
        1,0,0,0,2784,2787,1,0,0,0,2785,2787,3,36,18,0,2786,2781,1,0,0,0,
        2786,2785,1,0,0,0,2786,2787,1,0,0,0,2787,399,1,0,0,0,2788,2789,3,
        404,202,0,2789,2790,5,242,0,0,2790,2791,3,488,244,0,2791,401,1,0,
        0,0,2792,2793,3,404,202,0,2793,2794,5,99,0,0,2794,2795,3,488,244,
        0,2795,403,1,0,0,0,2796,2797,5,138,0,0,2797,2798,5,156,0,0,2798,
        2799,5,58,0,0,2799,405,1,0,0,0,2800,2801,3,412,206,0,2801,2802,5,
        242,0,0,2802,2803,3,488,244,0,2803,407,1,0,0,0,2804,2806,5,63,0,
        0,2805,2807,5,114,0,0,2806,2805,1,0,0,0,2806,2807,1,0,0,0,2807,2811,
        1,0,0,0,2808,2812,3,412,206,0,2809,2810,5,203,0,0,2810,2812,3,404,
        202,0,2811,2808,1,0,0,0,2811,2809,1,0,0,0,2812,2813,1,0,0,0,2813,
        2814,5,242,0,0,2814,2815,3,488,244,0,2815,409,1,0,0,0,2816,2817,
        3,412,206,0,2817,2818,5,99,0,0,2818,2819,3,488,244,0,2819,411,1,
        0,0,0,2820,2832,3,414,207,0,2821,2832,3,420,210,0,2822,2832,3,422,
        211,0,2823,2832,3,424,212,0,2824,2832,3,426,213,0,2825,2832,3,428,
        214,0,2826,2832,3,432,216,0,2827,2832,3,434,217,0,2828,2832,3,430,
        215,0,2829,2832,3,446,223,0,2830,2832,3,444,222,0,2831,2820,1,0,
        0,0,2831,2821,1,0,0,0,2831,2822,1,0,0,0,2831,2823,1,0,0,0,2831,2824,
        1,0,0,0,2831,2825,1,0,0,0,2831,2826,1,0,0,0,2831,2827,1,0,0,0,2831,
        2828,1,0,0,0,2831,2829,1,0,0,0,2831,2830,1,0,0,0,2832,413,1,0,0,
        0,2833,2835,5,14,0,0,2834,2836,3,416,208,0,2835,2834,1,0,0,0,2835,
        2836,1,0,0,0,2836,2837,1,0,0,0,2837,2838,5,156,0,0,2838,2839,3,418,
        209,0,2839,415,1,0,0,0,2840,2842,7,35,0,0,2841,2840,1,0,0,0,2841,
        2842,1,0,0,0,2842,2843,1,0,0,0,2843,2844,5,178,0,0,2844,417,1,0,
        0,0,2845,2846,5,60,0,0,2846,2861,7,36,0,0,2847,2848,5,111,0,0,2848,
        2861,7,36,0,0,2849,2861,5,58,0,0,2850,2853,7,37,0,0,2851,2854,5,
        239,0,0,2852,2854,3,484,242,0,2853,2851,1,0,0,0,2853,2852,1,0,0,
        0,2854,2861,1,0,0,0,2855,2858,7,30,0,0,2856,2859,5,239,0,0,2857,
        2859,3,484,242,0,2858,2856,1,0,0,0,2858,2857,1,0,0,0,2859,2861,1,
        0,0,0,2860,2845,1,0,0,0,2860,2847,1,0,0,0,2860,2849,1,0,0,0,2860,
        2850,1,0,0,0,2860,2855,1,0,0,0,2861,419,1,0,0,0,2862,2898,5,50,0,
        0,2863,2881,7,15,0,0,2864,2881,7,17,0,0,2865,2878,5,148,0,0,2866,
        2868,5,149,0,0,2867,2866,1,0,0,0,2867,2868,1,0,0,0,2868,2869,1,0,
        0,0,2869,2879,7,38,0,0,2870,2872,5,193,0,0,2871,2870,1,0,0,0,2871,
        2872,1,0,0,0,2872,2873,1,0,0,0,2873,2879,7,39,0,0,2874,2876,5,182,
        0,0,2875,2874,1,0,0,0,2875,2876,1,0,0,0,2876,2877,1,0,0,0,2877,2879,
        7,40,0,0,2878,2867,1,0,0,0,2878,2871,1,0,0,0,2878,2875,1,0,0,0,2879,
        2881,1,0,0,0,2880,2863,1,0,0,0,2880,2864,1,0,0,0,2880,2865,1,0,0,
        0,2881,2882,1,0,0,0,2882,2883,5,156,0,0,2883,2899,3,472,236,0,2884,
        2891,5,54,0,0,2885,2891,5,11,0,0,2886,2891,5,203,0,0,2887,2891,5,
        256,0,0,2888,2889,5,43,0,0,2889,2891,5,54,0,0,2890,2884,1,0,0,0,
        2890,2885,1,0,0,0,2890,2886,1,0,0,0,2890,2887,1,0,0,0,2890,2888,
        1,0,0,0,2891,2892,1,0,0,0,2892,2893,5,156,0,0,2893,2899,5,58,0,0,
        2894,2895,5,156,0,0,2895,2896,3,474,237,0,2896,2897,3,452,226,0,
        2897,2899,1,0,0,0,2898,2880,1,0,0,0,2898,2890,1,0,0,0,2898,2894,
        1,0,0,0,2899,421,1,0,0,0,2900,2917,5,74,0,0,2901,2904,7,15,0,0,2902,
        2904,7,17,0,0,2903,2901,1,0,0,0,2903,2902,1,0,0,0,2904,2905,1,0,
        0,0,2905,2906,5,156,0,0,2906,2918,3,472,236,0,2907,2914,5,54,0,0,
        2908,2914,5,11,0,0,2909,2914,5,203,0,0,2910,2914,5,256,0,0,2911,
        2912,5,43,0,0,2912,2914,5,54,0,0,2913,2907,1,0,0,0,2913,2908,1,0,
        0,0,2913,2909,1,0,0,0,2913,2910,1,0,0,0,2913,2911,1,0,0,0,2914,2915,
        1,0,0,0,2915,2916,5,156,0,0,2916,2918,5,58,0,0,2917,2903,1,0,0,0,
        2917,2913,1,0,0,0,2918,423,1,0,0,0,2919,2946,5,223,0,0,2920,2932,
        7,15,0,0,2921,2932,7,17,0,0,2922,2929,7,20,0,0,2923,2926,5,136,0,
        0,2924,2927,5,239,0,0,2925,2927,3,488,244,0,2926,2924,1,0,0,0,2926,
        2925,1,0,0,0,2927,2928,1,0,0,0,2928,2930,5,207,0,0,2929,2923,1,0,
        0,0,2929,2930,1,0,0,0,2930,2932,1,0,0,0,2931,2920,1,0,0,0,2931,2921,
        1,0,0,0,2931,2922,1,0,0,0,2932,2933,1,0,0,0,2933,2934,5,156,0,0,
        2934,2947,3,472,236,0,2935,2943,5,11,0,0,2936,2943,5,177,0,0,2937,
        2943,5,203,0,0,2938,2943,5,256,0,0,2939,2943,7,29,0,0,2940,2941,
        7,21,0,0,2941,2943,3,440,220,0,2942,2935,1,0,0,0,2942,2936,1,0,0,
        0,2942,2937,1,0,0,0,2942,2938,1,0,0,0,2942,2939,1,0,0,0,2942,2940,
        1,0,0,0,2943,2944,1,0,0,0,2944,2945,5,156,0,0,2945,2947,5,58,0,0,
        2946,2931,1,0,0,0,2946,2942,1,0,0,0,2947,425,1,0,0,0,2948,2975,5,
        218,0,0,2949,2959,7,41,0,0,2950,2954,5,256,0,0,2951,2955,5,229,0,
        0,2952,2953,5,111,0,0,2953,2955,5,54,0,0,2954,2951,1,0,0,0,2954,
        2952,1,0,0,0,2955,2959,1,0,0,0,2956,2957,5,54,0,0,2957,2959,5,7,
        0,0,2958,2949,1,0,0,0,2958,2950,1,0,0,0,2958,2956,1,0,0,0,2959,2960,
        1,0,0,0,2960,2961,5,156,0,0,2961,2976,5,58,0,0,2962,2963,5,125,0,
        0,2963,2964,3,448,224,0,2964,2965,5,156,0,0,2965,2966,3,474,237,
        0,2966,2974,1,0,0,0,2967,2968,5,182,0,0,2968,2969,3,450,225,0,2969,
        2970,5,156,0,0,2970,2971,3,474,237,0,2971,2972,3,452,226,0,2972,
        2974,1,0,0,0,2973,2962,1,0,0,0,2973,2967,1,0,0,0,2974,2976,1,0,0,
        0,2975,2958,1,0,0,0,2975,2973,1,0,0,0,2976,427,1,0,0,0,2977,2986,
        5,195,0,0,2978,2979,7,42,0,0,2979,2980,5,156,0,0,2980,2987,5,58,
        0,0,2981,2982,5,125,0,0,2982,2983,3,448,224,0,2983,2984,5,156,0,
        0,2984,2985,3,474,237,0,2985,2987,1,0,0,0,2986,2978,1,0,0,0,2986,
        2981,1,0,0,0,2987,429,1,0,0,0,2988,2989,5,266,0,0,2989,2990,5,156,
        0,0,2990,2991,3,474,237,0,2991,431,1,0,0,0,2992,3030,5,7,0,0,2993,
        3030,5,227,0,0,2994,3030,5,230,0,0,2995,2997,7,15,0,0,2996,2998,
        5,138,0,0,2997,2996,1,0,0,0,2997,2998,1,0,0,0,2998,3030,1,0,0,0,
        2999,3001,7,17,0,0,3000,3002,5,138,0,0,3001,3000,1,0,0,0,3001,3002,
        1,0,0,0,3002,3030,1,0,0,0,3003,3005,5,244,0,0,3004,3006,5,138,0,
        0,3005,3004,1,0,0,0,3005,3006,1,0,0,0,3006,3013,1,0,0,0,3007,3010,
        5,136,0,0,3008,3011,5,239,0,0,3009,3011,3,488,244,0,3010,3008,1,
        0,0,0,3010,3009,1,0,0,0,3011,3012,1,0,0,0,3012,3014,5,207,0,0,3013,
        3007,1,0,0,0,3013,3014,1,0,0,0,3014,3030,1,0,0,0,3015,3016,5,235,
        0,0,3016,3023,7,20,0,0,3017,3020,5,136,0,0,3018,3021,5,239,0,0,3019,
        3021,3,488,244,0,3020,3018,1,0,0,0,3020,3019,1,0,0,0,3021,3022,1,
        0,0,0,3022,3024,5,207,0,0,3023,3017,1,0,0,0,3023,3024,1,0,0,0,3024,
        3030,1,0,0,0,3025,3027,5,145,0,0,3026,3028,5,138,0,0,3027,3026,1,
        0,0,0,3027,3028,1,0,0,0,3028,3030,1,0,0,0,3029,2992,1,0,0,0,3029,
        2993,1,0,0,0,3029,2994,1,0,0,0,3029,2995,1,0,0,0,3029,2999,1,0,0,
        0,3029,3003,1,0,0,0,3029,3015,1,0,0,0,3029,3025,1,0,0,0,3030,3031,
        1,0,0,0,3031,3032,5,156,0,0,3032,3033,3,472,236,0,3033,433,1,0,0,
        0,3034,3035,5,15,0,0,3035,3091,7,43,0,0,3036,3037,5,21,0,0,3037,
        3091,7,42,0,0,3038,3039,5,43,0,0,3039,3040,5,54,0,0,3040,3091,5,
        138,0,0,3041,3042,5,54,0,0,3042,3091,5,138,0,0,3043,3044,5,11,0,
        0,3044,3091,5,138,0,0,3045,3071,5,88,0,0,3046,3047,7,44,0,0,3047,
        3072,5,180,0,0,3048,3059,5,27,0,0,3049,3050,7,18,0,0,3050,3060,3,
        438,219,0,3051,3053,5,256,0,0,3052,3054,5,61,0,0,3053,3052,1,0,0,
        0,3053,3054,1,0,0,0,3054,3056,1,0,0,0,3055,3051,1,0,0,0,3055,3056,
        1,0,0,0,3056,3057,1,0,0,0,3057,3058,7,19,0,0,3058,3060,3,436,218,
        0,3059,3049,1,0,0,0,3059,3055,1,0,0,0,3060,3072,1,0,0,0,3061,3062,
        7,18,0,0,3062,3072,3,438,219,0,3063,3065,5,256,0,0,3064,3066,5,61,
        0,0,3065,3064,1,0,0,0,3065,3066,1,0,0,0,3066,3068,1,0,0,0,3067,3063,
        1,0,0,0,3067,3068,1,0,0,0,3068,3069,1,0,0,0,3069,3070,7,19,0,0,3070,
        3072,3,436,218,0,3071,3046,1,0,0,0,3071,3048,1,0,0,0,3071,3061,1,
        0,0,0,3071,3067,1,0,0,0,3072,3091,1,0,0,0,3073,3074,5,177,0,0,3074,
        3091,5,138,0,0,3075,3076,5,190,0,0,3076,3091,7,45,0,0,3077,3078,
        5,216,0,0,3078,3091,5,138,0,0,3079,3080,5,256,0,0,3080,3091,5,138,
        0,0,3081,3088,5,113,0,0,3082,3085,5,136,0,0,3083,3086,5,239,0,0,
        3084,3086,3,488,244,0,3085,3083,1,0,0,0,3085,3084,1,0,0,0,3086,3087,
        1,0,0,0,3087,3089,5,207,0,0,3088,3082,1,0,0,0,3088,3089,1,0,0,0,
        3089,3091,1,0,0,0,3090,3034,1,0,0,0,3090,3036,1,0,0,0,3090,3038,
        1,0,0,0,3090,3041,1,0,0,0,3090,3043,1,0,0,0,3090,3045,1,0,0,0,3090,
        3073,1,0,0,0,3090,3075,1,0,0,0,3090,3077,1,0,0,0,3090,3079,1,0,0,
        0,3090,3081,1,0,0,0,3091,3092,1,0,0,0,3092,3093,5,156,0,0,3093,3094,
        5,58,0,0,3094,435,1,0,0,0,3095,3096,3,442,221,0,3096,437,1,0,0,0,
        3097,3098,3,442,221,0,3098,439,1,0,0,0,3099,3100,3,442,221,0,3100,
        441,1,0,0,0,3101,3106,3,492,246,0,3102,3103,5,39,0,0,3103,3105,3,
        492,246,0,3104,3102,1,0,0,0,3105,3108,1,0,0,0,3106,3104,1,0,0,0,
        3106,3107,1,0,0,0,3107,443,1,0,0,0,3108,3106,1,0,0,0,3109,3115,5,
        246,0,0,3110,3111,5,187,0,0,3111,3115,3,450,225,0,3112,3113,5,139,
        0,0,3113,3115,3,450,225,0,3114,3109,1,0,0,0,3114,3110,1,0,0,0,3114,
        3112,1,0,0,0,3115,3116,1,0,0,0,3116,3117,5,156,0,0,3117,3118,3,474,
        237,0,3118,3122,3,452,226,0,3119,3120,5,136,0,0,3120,3121,5,239,
        0,0,3121,3123,5,207,0,0,3122,3119,1,0,0,0,3122,3123,1,0,0,0,3123,
        445,1,0,0,0,3124,3128,5,62,0,0,3125,3126,5,140,0,0,3126,3128,3,450,
        225,0,3127,3124,1,0,0,0,3127,3125,1,0,0,0,3128,3129,1,0,0,0,3129,
        3130,5,156,0,0,3130,3131,3,474,237,0,3131,3132,3,452,226,0,3132,
        447,1,0,0,0,3133,3136,5,239,0,0,3134,3136,3,248,124,0,3135,3133,
        1,0,0,0,3135,3134,1,0,0,0,3136,449,1,0,0,0,3137,3140,5,130,0,0,3138,
        3141,5,239,0,0,3139,3141,3,248,124,0,3140,3138,1,0,0,0,3140,3139,
        1,0,0,0,3141,3142,1,0,0,0,3142,3143,5,186,0,0,3143,451,1,0,0,0,3144,
        3154,7,46,0,0,3145,3155,5,239,0,0,3146,3151,3,512,256,0,3147,3148,
        5,39,0,0,3148,3150,3,512,256,0,3149,3147,1,0,0,0,3150,3153,1,0,0,
        0,3151,3149,1,0,0,0,3151,3152,1,0,0,0,3152,3155,1,0,0,0,3153,3151,
        1,0,0,0,3154,3145,1,0,0,0,3154,3146,1,0,0,0,3155,3181,1,0,0,0,3156,
        3166,7,47,0,0,3157,3167,5,239,0,0,3158,3163,3,512,256,0,3159,3160,
        5,39,0,0,3160,3162,3,512,256,0,3161,3159,1,0,0,0,3162,3165,1,0,0,
        0,3163,3161,1,0,0,0,3163,3164,1,0,0,0,3164,3167,1,0,0,0,3165,3163,
        1,0,0,0,3166,3157,1,0,0,0,3166,3158,1,0,0,0,3167,3181,1,0,0,0,3168,
        3178,7,48,0,0,3169,3179,5,239,0,0,3170,3175,3,512,256,0,3171,3172,
        5,39,0,0,3172,3174,3,512,256,0,3173,3171,1,0,0,0,3174,3177,1,0,0,
        0,3175,3173,1,0,0,0,3175,3176,1,0,0,0,3176,3179,1,0,0,0,3177,3175,
        1,0,0,0,3178,3169,1,0,0,0,3178,3170,1,0,0,0,3179,3181,1,0,0,0,3180,
        3144,1,0,0,0,3180,3156,1,0,0,0,3180,3168,1,0,0,0,3180,3181,1,0,0,
        0,3181,453,1,0,0,0,3182,3183,5,54,0,0,3183,3187,3,486,243,0,3184,
        3185,5,112,0,0,3185,3186,5,152,0,0,3186,3188,5,91,0,0,3187,3184,
        1,0,0,0,3187,3188,1,0,0,0,3188,3199,1,0,0,0,3189,3195,5,243,0,0,
        3190,3193,5,4,0,0,3191,3194,7,49,0,0,3192,3194,7,50,0,0,3193,3191,
        1,0,0,0,3193,3192,1,0,0,0,3194,3196,1,0,0,0,3195,3190,1,0,0,0,3196,
        3197,1,0,0,0,3197,3195,1,0,0,0,3197,3198,1,0,0,0,3198,3200,1,0,0,
        0,3199,3189,1,0,0,0,3199,3200,1,0,0,0,3200,3202,1,0,0,0,3201,3203,
        3,456,228,0,3202,3201,1,0,0,0,3202,3203,1,0,0,0,3203,3205,1,0,0,
        0,3204,3206,3,468,234,0,3205,3204,1,0,0,0,3205,3206,1,0,0,0,3206,
        455,1,0,0,0,3207,3208,5,159,0,0,3208,3209,3,506,253,0,3209,457,1,
        0,0,0,3210,3211,5,43,0,0,3211,3212,5,54,0,0,3212,3216,3,486,243,
        0,3213,3214,5,112,0,0,3214,3215,5,152,0,0,3215,3217,5,91,0,0,3216,
        3213,1,0,0,0,3216,3217,1,0,0,0,3217,3219,1,0,0,0,3218,3220,3,456,
        228,0,3219,3218,1,0,0,0,3219,3220,1,0,0,0,3220,3222,1,0,0,0,3221,
        3223,3,468,234,0,3222,3221,1,0,0,0,3222,3223,1,0,0,0,3223,459,1,
        0,0,0,3224,3226,5,43,0,0,3225,3224,1,0,0,0,3225,3226,1,0,0,0,3226,
        3227,1,0,0,0,3227,3228,5,54,0,0,3228,3231,3,486,243,0,3229,3230,
        5,112,0,0,3230,3232,5,91,0,0,3231,3229,1,0,0,0,3231,3232,1,0,0,0,
        3232,3235,1,0,0,0,3233,3234,7,51,0,0,3234,3236,5,53,0,0,3235,3233,
        1,0,0,0,3235,3236,1,0,0,0,3236,3238,1,0,0,0,3237,3239,3,468,234,
        0,3238,3237,1,0,0,0,3238,3239,1,0,0,0,3239,461,1,0,0,0,3240,3241,
        5,54,0,0,3241,3244,3,486,243,0,3242,3243,5,112,0,0,3243,3245,5,91,
        0,0,3244,3242,1,0,0,0,3244,3245,1,0,0,0,3245,3277,1,0,0,0,3246,3264,
        5,218,0,0,3247,3248,5,7,0,0,3248,3249,5,187,0,0,3249,3265,7,52,0,
        0,3250,3256,5,243,0,0,3251,3254,5,4,0,0,3252,3255,7,49,0,0,3253,
        3255,7,50,0,0,3254,3252,1,0,0,0,3254,3253,1,0,0,0,3255,3257,1,0,
        0,0,3256,3251,1,0,0,0,3257,3258,1,0,0,0,3258,3256,1,0,0,0,3258,3259,
        1,0,0,0,3259,3265,1,0,0,0,3260,3261,5,160,0,0,3261,3262,3,512,256,
        0,3262,3263,3,150,75,0,3263,3265,1,0,0,0,3264,3247,1,0,0,0,3264,
        3250,1,0,0,0,3264,3260,1,0,0,0,3265,3267,1,0,0,0,3266,3246,1,0,0,
        0,3267,3268,1,0,0,0,3268,3266,1,0,0,0,3268,3269,1,0,0,0,3269,3278,
        1,0,0,0,3270,3271,5,195,0,0,3271,3272,5,160,0,0,3272,3274,3,512,
        256,0,3273,3270,1,0,0,0,3274,3275,1,0,0,0,3275,3273,1,0,0,0,3275,
        3276,1,0,0,0,3276,3278,1,0,0,0,3277,3266,1,0,0,0,3277,3273,1,0,0,
        0,3278,3280,1,0,0,0,3279,3281,3,468,234,0,3280,3279,1,0,0,0,3280,
        3281,1,0,0,0,3281,463,1,0,0,0,3282,3283,5,227,0,0,3283,3284,5,54,
        0,0,3284,3286,3,486,243,0,3285,3287,3,468,234,0,3286,3285,1,0,0,
        0,3286,3287,1,0,0,0,3287,465,1,0,0,0,3288,3289,5,230,0,0,3289,3290,
        5,54,0,0,3290,3292,3,486,243,0,3291,3293,3,468,234,0,3292,3291,1,
        0,0,0,3292,3293,1,0,0,0,3293,467,1,0,0,0,3294,3299,5,261,0,0,3295,
        3297,5,4,0,0,3296,3298,7,53,0,0,3297,3296,1,0,0,0,3297,3298,1,0,
        0,0,3298,3300,1,0,0,0,3299,3295,1,0,0,0,3299,3300,1,0,0,0,3300,3303,
        1,0,0,0,3301,3303,5,153,0,0,3302,3294,1,0,0,0,3302,3301,1,0,0,0,
        3303,469,1,0,0,0,3304,3319,7,30,0,0,3305,3311,3,486,243,0,3306,3308,
        3,276,138,0,3307,3309,3,22,11,0,3308,3307,1,0,0,0,3308,3309,1,0,
        0,0,3309,3312,1,0,0,0,3310,3312,3,36,18,0,3311,3306,1,0,0,0,3311,
        3310,1,0,0,0,3312,3320,1,0,0,0,3313,3315,3,276,138,0,3314,3316,3,
        22,11,0,3315,3314,1,0,0,0,3315,3316,1,0,0,0,3316,3320,1,0,0,0,3317,
        3320,3,36,18,0,3318,3320,3,486,243,0,3319,3305,1,0,0,0,3319,3313,
        1,0,0,0,3319,3317,1,0,0,0,3319,3318,1,0,0,0,3319,3320,1,0,0,0,3320,
        3335,1,0,0,0,3321,3322,5,60,0,0,3322,3326,5,54,0,0,3323,3324,5,111,
        0,0,3324,3326,5,54,0,0,3325,3321,1,0,0,0,3325,3323,1,0,0,0,3326,
        3332,1,0,0,0,3327,3329,3,276,138,0,3328,3330,3,22,11,0,3329,3328,
        1,0,0,0,3329,3330,1,0,0,0,3330,3333,1,0,0,0,3331,3333,3,36,18,0,
        3332,3327,1,0,0,0,3332,3331,1,0,0,0,3332,3333,1,0,0,0,3333,3335,
        1,0,0,0,3334,3304,1,0,0,0,3334,3325,1,0,0,0,3335,471,1,0,0,0,3336,
        3339,7,30,0,0,3337,3340,5,239,0,0,3338,3340,3,484,242,0,3339,3337,
        1,0,0,0,3339,3338,1,0,0,0,3340,3346,1,0,0,0,3341,3342,5,60,0,0,3342,
        3346,5,54,0,0,3343,3344,5,111,0,0,3344,3346,5,54,0,0,3345,3336,1,
        0,0,0,3345,3341,1,0,0,0,3345,3343,1,0,0,0,3346,473,1,0,0,0,3347,
        3350,7,37,0,0,3348,3351,5,239,0,0,3349,3351,3,484,242,0,3350,3348,
        1,0,0,0,3350,3349,1,0,0,0,3351,3357,1,0,0,0,3352,3353,5,60,0,0,3353,
        3357,5,105,0,0,3354,3355,5,111,0,0,3355,3357,5,105,0,0,3356,3347,
        1,0,0,0,3356,3352,1,0,0,0,3356,3354,1,0,0,0,3357,475,1,0,0,0,3358,
        3359,5,11,0,0,3359,3363,3,486,243,0,3360,3361,5,112,0,0,3361,3362,
        5,152,0,0,3362,3364,5,91,0,0,3363,3360,1,0,0,0,3363,3364,1,0,0,0,
        3364,3365,1,0,0,0,3365,3366,5,97,0,0,3366,3367,5,54,0,0,3367,3378,
        3,486,243,0,3368,3369,5,22,0,0,3369,3370,3,504,252,0,3370,3371,5,
        256,0,0,3371,3372,3,490,245,0,3372,3373,5,164,0,0,3373,3376,3,380,
        190,0,3374,3375,5,73,0,0,3375,3377,3,506,253,0,3376,3374,1,0,0,0,
        3376,3377,1,0,0,0,3377,3379,1,0,0,0,3378,3368,1,0,0,0,3378,3379,
        1,0,0,0,3379,3382,1,0,0,0,3380,3381,5,181,0,0,3381,3383,3,506,253,
        0,3382,3380,1,0,0,0,3382,3383,1,0,0,0,3383,477,1,0,0,0,3384,3385,
        5,11,0,0,3385,3388,3,486,243,0,3386,3387,5,112,0,0,3387,3389,5,91,
        0,0,3388,3386,1,0,0,0,3388,3389,1,0,0,0,3389,3390,1,0,0,0,3390,3391,
        5,97,0,0,3391,3392,5,54,0,0,3392,479,1,0,0,0,3393,3394,5,11,0,0,
        3394,3397,3,486,243,0,3395,3396,5,112,0,0,3396,3398,5,91,0,0,3397,
        3395,1,0,0,0,3397,3398,1,0,0,0,3398,3399,1,0,0,0,3399,3400,5,218,
        0,0,3400,3415,5,54,0,0,3401,3402,5,234,0,0,3402,3405,3,486,243,0,
        3403,3404,5,22,0,0,3404,3406,3,504,252,0,3405,3403,1,0,0,0,3405,
        3406,1,0,0,0,3406,3416,1,0,0,0,3407,3408,5,256,0,0,3408,3416,3,490,
        245,0,3409,3410,5,164,0,0,3410,3416,3,380,190,0,3411,3412,5,73,0,
        0,3412,3416,3,506,253,0,3413,3414,5,181,0,0,3414,3416,3,506,253,
        0,3415,3401,1,0,0,0,3415,3407,1,0,0,0,3415,3409,1,0,0,0,3415,3411,
        1,0,0,0,3415,3413,1,0,0,0,3416,3417,1,0,0,0,3417,3415,1,0,0,0,3417,
        3418,1,0,0,0,3418,481,1,0,0,0,3419,3421,7,54,0,0,3420,3422,3,486,
        243,0,3421,3420,1,0,0,0,3421,3422,1,0,0,0,3422,3423,1,0,0,0,3423,
        3424,5,97,0,0,3424,3430,7,30,0,0,3425,3427,3,276,138,0,3426,3428,
        3,22,11,0,3427,3426,1,0,0,0,3427,3428,1,0,0,0,3428,3431,1,0,0,0,
        3429,3431,3,36,18,0,3430,3425,1,0,0,0,3430,3429,1,0,0,0,3430,3431,
        1,0,0,0,3431,483,1,0,0,0,3432,3437,3,486,243,0,3433,3434,5,39,0,
        0,3434,3436,3,486,243,0,3435,3433,1,0,0,0,3436,3439,1,0,0,0,3437,
        3435,1,0,0,0,3437,3438,1,0,0,0,3438,485,1,0,0,0,3439,3437,1,0,0,
        0,3440,3445,3,512,256,0,3441,3442,5,71,0,0,3442,3444,3,512,256,0,
        3443,3441,1,0,0,0,3444,3447,1,0,0,0,3445,3443,1,0,0,0,3445,3446,
        1,0,0,0,3446,3450,1,0,0,0,3447,3445,1,0,0,0,3448,3450,3,232,116,
        0,3449,3440,1,0,0,0,3449,3448,1,0,0,0,3450,487,1,0,0,0,3451,3456,
        3,490,245,0,3452,3453,5,39,0,0,3453,3455,3,490,245,0,3454,3452,1,
        0,0,0,3455,3458,1,0,0,0,3456,3454,1,0,0,0,3456,3457,1,0,0,0,3457,
        489,1,0,0,0,3458,3456,1,0,0,0,3459,3462,3,512,256,0,3460,3462,3,
        232,116,0,3461,3459,1,0,0,0,3461,3460,1,0,0,0,3462,491,1,0,0,0,3463,
        3469,3,514,257,0,3464,3465,3,514,257,0,3465,3466,3,494,247,0,3466,
        3469,1,0,0,0,3467,3469,3,494,247,0,3468,3463,1,0,0,0,3468,3464,1,
        0,0,0,3468,3467,1,0,0,0,3469,493,1,0,0,0,3470,3475,3,496,248,0,3471,
        3472,3,496,248,0,3472,3473,3,494,247,0,3473,3475,1,0,0,0,3474,3470,
        1,0,0,0,3474,3471,1,0,0,0,3475,495,1,0,0,0,3476,3477,5,71,0,0,3477,
        3483,3,514,257,0,3478,3483,5,183,0,0,3479,3483,5,239,0,0,3480,3483,
        5,71,0,0,3481,3483,3,516,258,0,3482,3476,1,0,0,0,3482,3478,1,0,0,
        0,3482,3479,1,0,0,0,3482,3480,1,0,0,0,3482,3481,1,0,0,0,3483,497,
        1,0,0,0,3484,3485,3,502,251,0,3485,499,1,0,0,0,3486,3491,3,498,249,
        0,3487,3488,5,39,0,0,3488,3490,3,498,249,0,3489,3487,1,0,0,0,3490,
        3493,1,0,0,0,3491,3489,1,0,0,0,3491,3492,1,0,0,0,3492,501,1,0,0,
        0,3493,3491,1,0,0,0,3494,3495,7,55,0,0,3495,503,1,0,0,0,3496,3499,
        3,502,251,0,3497,3499,3,232,116,0,3498,3496,1,0,0,0,3498,3497,1,
        0,0,0,3499,505,1,0,0,0,3500,3503,3,508,254,0,3501,3503,3,232,116,
        0,3502,3500,1,0,0,0,3502,3501,1,0,0,0,3503,507,1,0,0,0,3504,3518,
        5,130,0,0,3505,3506,3,512,256,0,3506,3507,5,37,0,0,3507,3515,3,150,
        75,0,3508,3509,5,39,0,0,3509,3510,3,512,256,0,3510,3511,5,37,0,0,
        3511,3512,3,150,75,0,3512,3514,1,0,0,0,3513,3508,1,0,0,0,3514,3517,
        1,0,0,0,3515,3513,1,0,0,0,3515,3516,1,0,0,0,3516,3519,1,0,0,0,3517,
        3515,1,0,0,0,3518,3505,1,0,0,0,3518,3519,1,0,0,0,3519,3520,1,0,0,
        0,3520,3521,5,186,0,0,3521,509,1,0,0,0,3522,3527,3,512,256,0,3523,
        3524,5,39,0,0,3524,3526,3,512,256,0,3525,3523,1,0,0,0,3526,3529,
        1,0,0,0,3527,3525,1,0,0,0,3527,3528,1,0,0,0,3528,511,1,0,0,0,3529,
        3527,1,0,0,0,3530,3533,3,514,257,0,3531,3533,3,516,258,0,3532,3530,
        1,0,0,0,3532,3531,1,0,0,0,3533,513,1,0,0,0,3534,3535,5,279,0,0,3535,
        515,1,0,0,0,3536,3541,3,520,260,0,3537,3541,5,152,0,0,3538,3541,
        5,154,0,0,3539,3541,5,249,0,0,3540,3536,1,0,0,0,3540,3537,1,0,0,
        0,3540,3538,1,0,0,0,3540,3539,1,0,0,0,3541,517,1,0,0,0,3542,3545,
        3,514,257,0,3543,3545,3,520,260,0,3544,3542,1,0,0,0,3544,3543,1,
        0,0,0,3545,519,1,0,0,0,3546,3547,7,56,0,0,3547,521,1,0,0,0,3548,
        3549,5,0,0,1,3549,523,1,0,0,0,470,529,533,538,544,552,555,563,566,
        572,578,583,590,595,612,618,624,634,637,640,643,648,655,663,666,
        671,673,687,698,716,724,731,734,742,748,751,757,761,768,773,776,
        778,802,805,820,824,836,842,846,855,859,861,863,873,879,887,898,
        907,914,916,937,943,946,948,957,961,966,970,982,986,996,1000,1002,
        1007,1012,1016,1019,1023,1027,1030,1036,1038,1046,1050,1053,1056,
        1060,1068,1072,1077,1090,1095,1098,1103,1106,1109,1112,1116,1119,
        1123,1133,1136,1140,1143,1149,1156,1160,1168,1172,1180,1182,1190,
        1192,1198,1203,1211,1219,1228,1236,1244,1250,1267,1269,1274,1294,
        1298,1302,1309,1311,1321,1323,1331,1339,1345,1357,1361,1364,1373,
        1401,1412,1419,1431,1436,1448,1456,1459,1465,1470,1480,1505,1516,
        1527,1538,1549,1555,1569,1575,1579,1581,1589,1593,1595,1607,1612,
        1618,1624,1634,1643,1655,1660,1663,1669,1684,1692,1702,1708,1717,
        1722,1734,1744,1752,1811,1820,1822,1833,1847,1861,1873,1877,1884,
        1893,1896,1905,1908,1912,1916,1919,1924,1928,1931,1936,1939,1944,
        1948,1951,1956,1958,1963,1966,1974,1976,1978,1982,1985,1993,1995,
        1997,2001,2004,2011,2014,2018,2022,2025,2027,2034,2037,2041,2045,
        2048,2050,2056,2060,2066,2069,2073,2077,2090,2095,2099,2103,2121,
        2123,2125,2129,2135,2138,2151,2158,2162,2170,2179,2195,2205,2207,
        2212,2214,2219,2243,2245,2263,2268,2276,2285,2290,2296,2309,2314,
        2322,2331,2336,2349,2355,2368,2373,2382,2390,2396,2398,2406,2420,
        2422,2436,2441,2447,2454,2460,2464,2466,2471,2476,2480,2485,2491,
        2498,2500,2506,2524,2527,2530,2534,2545,2556,2562,2568,2574,2581,
        2585,2588,2603,2607,2612,2619,2623,2630,2636,2654,2661,2667,2673,
        2675,2679,2683,2688,2694,2698,2711,2714,2720,2723,2729,2732,2737,
        2740,2744,2747,2753,2756,2760,2763,2772,2776,2779,2783,2786,2806,
        2811,2831,2835,2841,2853,2858,2860,2867,2871,2875,2878,2880,2890,
        2898,2903,2913,2917,2926,2929,2931,2942,2946,2954,2958,2973,2975,
        2986,2997,3001,3005,3010,3013,3020,3023,3027,3029,3053,3055,3059,
        3065,3067,3071,3085,3088,3090,3106,3114,3122,3127,3135,3140,3151,
        3154,3163,3166,3175,3178,3180,3187,3193,3197,3199,3202,3205,3216,
        3219,3222,3225,3231,3235,3238,3244,3254,3258,3264,3268,3275,3277,
        3280,3286,3292,3297,3299,3302,3308,3311,3315,3319,3325,3329,3332,
        3334,3339,3345,3350,3356,3363,3376,3378,3382,3388,3397,3405,3415,
        3417,3421,3427,3430,3437,3445,3449,3456,3461,3468,3474,3482,3491,
        3498,3502,3515,3518,3527,3532,3540,3544
    ]

class CypherParser ( Parser ):

    grammarFileName = "CypherParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'|'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "':'", "'::'", "','", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'$'", "<INVALID>", "'/'", "'.'", "'..'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'>='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'>'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'&'", "'!'", 
                     "'['", "'{'", "'<='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "'<'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'-'", "'%'", "'!='", "'<>'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'+='", "<INVALID>", "<INVALID>", "'^'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'?'", "<INVALID>", 
                     "']'", "'}'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'=~'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "')'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'*'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'/*'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'``'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SINGLE_LINE_COMMENT", "DECIMAL_DOUBLE", 
                      "UNSIGNED_DECIMAL_INTEGER", "UNSIGNED_HEX_INTEGER", 
                      "UNSIGNED_OCTAL_INTEGER", "ACCESS", "ACTIVE", "ADMIN", 
                      "ADMINISTRATOR", "ALIAS", "ALIASES", "ALL_SHORTEST_PATH", 
                      "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "ASSERT", 
                      "ASSIGN", "AT", "BAR", "BINDINGS", "BOOL", "BOOLEAN", 
                      "BOOSTED", "BREAK", "BRIEF", "BTREE", "BUILT", "BY", 
                      "CALL", "CASE", "CHANGE", "COLLECT", "COLON", "COLONCOLON", 
                      "COMMA", "COMMAND", "COMMANDS", "COMMIT", "COMPOSITE", 
                      "CONSTRAINT", "CONSTRAINTS", "CONTAINS", "COPY", "CONTINUE", 
                      "COUNT", "CREATE", "CSV", "CURRENT", "DATA", "DATABASE", 
                      "DATABASES", "DATE", "DATETIME", "DBMS", "DEALLOCATE", 
                      "DEFAULT", "DEFINED", "DELETE", "DENY", "DESC", "DESTROY", 
                      "DETACH", "DIFFERENT", "DOLLAR", "DISTINCT", "DIVIDE", 
                      "DOT", "DOTDOT", "DRIVER", "DROP", "DRYRUN", "DUMP", 
                      "DURATION", "EACH", "ENABLE", "ELEMENT", "ELEMENTS", 
                      "ELSE", "ENCRYPTED", "END", "ENDS", "EQ", "EXECUTABLE", 
                      "EXECUTE", "EXIST", "EXISTENCE", "EXISTS", "ERROR", 
                      "FAIL", "FALSE", "FIELDTERMINATOR", "FLOAT", "FOR", 
                      "FOREACH", "FROM", "FULLTEXT", "FUNCTION", "FUNCTIONS", 
                      "GE", "GRANT", "GRAPH", "GRAPHS", "GROUP", "GROUPS", 
                      "GT", "HEADERS", "HOME", "IF", "IMPERSONATE", "IMMUTABLE", 
                      "IN", "INDEX", "INDEXES", "INF", "INFINITY", "INT", 
                      "INTEGER", "IS", "JOIN", "KEY", "LABEL", "LABELS", 
                      "AMPERSAND", "EXCLAMATION_MARK", "LBRACKET", "LCURLY", 
                      "LE", "LIMITROWS", "LOAD", "LOCAL", "LOOKUP", "LPAREN", 
                      "LT", "MANAGEMENT", "MATCH", "MERGE", "MINUS", "PERCENT", 
                      "NEQ", "NEQ2", "NAME", "NAMES", "NAN", "NEW", "NODE", 
                      "NODES", "NONE", "NOT", "NOWAIT", "NULL", "OF", "ON", 
                      "ONLY", "OPTIONAL", "OPTIONS", "OPTION", "OR", "ORDER", 
                      "OUTPUT", "PASSWORD", "PASSWORDS", "PATH", "PATHS", 
                      "PERIODIC", "PLAINTEXT", "PLUS", "PLUSEQUAL", "POINT", 
                      "POPULATED", "POW", "PRIMARY", "PRIMARIES", "PRIVILEGE", 
                      "PRIVILEGES", "PROCEDURE", "PROCEDURES", "PROPERTIES", 
                      "PROPERTY", "QUESTION", "RANGE", "RBRACKET", "RCURLY", 
                      "READ", "REALLOCATE", "REDUCE", "RENAME", "REGEQ", 
                      "REL", "RELATIONSHIP", "RELATIONSHIPS", "REMOVE", 
                      "REPEATABLE", "REPLACE", "REPORT", "REQUIRE", "REQUIRED", 
                      "RETURN", "REVOKE", "ROLE", "ROLES", "ROW", "ROWS", 
                      "RPAREN", "SCAN", "SEC", "SECOND", "SECONDARY", "SECONDARIES", 
                      "SECONDS", "SEEK", "SEMICOLON", "SERVER", "SERVERS", 
                      "SET", "SETTING", "SETTINGS", "SHORTEST_PATH", "SHORTEST", 
                      "SHOW", "SIGNED", "SINGLE", "SKIPROWS", "START", "STARTS", 
                      "STATUS", "STOP", "STRING", "SUPPORTED", "SUSPENDED", 
                      "TARGET", "TERMINATE", "TEXT", "THEN", "TIME", "TIMES", 
                      "TIMESTAMP", "TIMEZONE", "TO", "TOPOLOGY", "TRANSACTION", 
                      "TRANSACTIONS", "TRAVERSE", "TRUE", "TYPE", "TYPED", 
                      "TYPES", "UNION", "UNIQUE", "UNIQUENESS", "UNWIND", 
                      "USE", "USER", "USERS", "USING", "VARCHAR", "VERBOSE", 
                      "WAIT", "WHEN", "WHERE", "WITH", "WITHOUT", "WRITE", 
                      "XOR", "YIELD", "ZONED", "IDENTIFIER", "ErrorChar", 
                      "ARROW_LINE", "ARROW_LEFT_HEAD", "ARROW_RIGHT_HEAD", 
                      "FORMAL_COMMENT", "STRING_LITERAL1", "STRING_LITERAL2", 
                      "MULTI_LINE_COMMENT", "ESCAPED_SYMBOLIC_NAME", "MORE1", 
                      "STRING1_OPEN", "STRING2_OPEN", "ESCAPED_SYMBOLIC_NAME_OPEN", 
                      "MORE3", "MORE4", "MORE5", "MORE6", "MORE7", "MORE8", 
                      "MORE9", "MORE10", "MORE11", "MORE24" ]

    RULE_statements = 0
    RULE_statement = 1
    RULE_singleQueryOrCommand = 2
    RULE_singleQueryOrCommandWithUseClause = 3
    RULE_periodicCommitQueryHintFailure = 4
    RULE_regularQuery = 5
    RULE_union = 6
    RULE_singleQuery = 7
    RULE_singleQueryWithUseClause = 8
    RULE_clause = 9
    RULE_useClause = 10
    RULE_returnClause = 11
    RULE_returnBody = 12
    RULE_returnItem = 13
    RULE_returnItems = 14
    RULE_orderItem = 15
    RULE_skip = 16
    RULE_limit = 17
    RULE_whereClause = 18
    RULE_withClause = 19
    RULE_createClause = 20
    RULE_setClause = 21
    RULE_setItem = 22
    RULE_removeClause = 23
    RULE_removeItem = 24
    RULE_deleteClause = 25
    RULE_matchClause = 26
    RULE_matchMode = 27
    RULE_hints = 28
    RULE_indexHintBody = 29
    RULE_mergeClause = 30
    RULE_unwindClause = 31
    RULE_callClause = 32
    RULE_procedureName = 33
    RULE_procedureArgument = 34
    RULE_procedureResultItem = 35
    RULE_loadCSVClause = 36
    RULE_foreachClause = 37
    RULE_subqueryClause = 38
    RULE_subqueryInTransactionsParameters = 39
    RULE_subqueryInTransactionsBatchParameters = 40
    RULE_subqueryInTransactionsErrorParameters = 41
    RULE_subqueryInTransactionsReportParameters = 42
    RULE_patternList = 43
    RULE_pattern = 44
    RULE_quantifier = 45
    RULE_anonymousPattern = 46
    RULE_shortestPathPattern = 47
    RULE_maybeQuantifiedRelationshipPattern = 48
    RULE_patternElement = 49
    RULE_pathPatternAtoms = 50
    RULE_selector = 51
    RULE_pathPatternNonEmpty = 52
    RULE_nodePattern = 53
    RULE_parenthesizedPath = 54
    RULE_nodeLabels = 55
    RULE_labelExpressionPredicate = 56
    RULE_labelOrRelType = 57
    RULE_labelOrRelTypes = 58
    RULE_properties = 59
    RULE_relationshipPattern = 60
    RULE_leftArrow = 61
    RULE_arrowLine = 62
    RULE_rightArrow = 63
    RULE_pathLength = 64
    RULE_pathLengthLiteral = 65
    RULE_labelExpression = 66
    RULE_labelExpression4 = 67
    RULE_labelExpression4Is = 68
    RULE_labelExpression3 = 69
    RULE_labelExpression3Is = 70
    RULE_labelExpression2 = 71
    RULE_labelExpression2Is = 72
    RULE_labelExpression1 = 73
    RULE_labelExpression1Is = 74
    RULE_expression = 75
    RULE_expression12 = 76
    RULE_expression11 = 77
    RULE_expression10 = 78
    RULE_expression9 = 79
    RULE_expression8 = 80
    RULE_expression7 = 81
    RULE_comparisonExpression6 = 82
    RULE_expression6 = 83
    RULE_expression5 = 84
    RULE_expression4 = 85
    RULE_expression3 = 86
    RULE_expression2 = 87
    RULE_postFix1 = 88
    RULE_property = 89
    RULE_propertyExpression = 90
    RULE_expression1 = 91
    RULE_literal = 92
    RULE_caseExpression = 93
    RULE_listComprehension = 94
    RULE_listComprehensionWhereAndBar = 95
    RULE_patternComprehension = 96
    RULE_patternComprehensionPrefix = 97
    RULE_reduceExpression = 98
    RULE_allExpression = 99
    RULE_anyExpression = 100
    RULE_noneExpression = 101
    RULE_singleExpression = 102
    RULE_patternExpression = 103
    RULE_shortestPathExpression = 104
    RULE_mapProjection = 105
    RULE_mapProjectionItem = 106
    RULE_existsExpression = 107
    RULE_countExpression = 108
    RULE_collectExpression = 109
    RULE_stringLiteral = 110
    RULE_numberLiteral = 111
    RULE_signedIntegerLiteral = 112
    RULE_listLiteral = 113
    RULE_mapLiteral = 114
    RULE_propertyKeyName = 115
    RULE_parameter = 116
    RULE_parameterName = 117
    RULE_functionInvocation = 118
    RULE_functionName = 119
    RULE_functionArgument = 120
    RULE_namespace = 121
    RULE_variableList1 = 122
    RULE_variable = 123
    RULE_symbolicNameList1 = 124
    RULE_createCommand = 125
    RULE_command = 126
    RULE_commandWithUseGraph = 127
    RULE_dropCommand = 128
    RULE_alterCommand = 129
    RULE_showCommand = 130
    RULE_terminateCommand = 131
    RULE_showAllCommand = 132
    RULE_showNodeCommand = 133
    RULE_showRelationshipCommand = 134
    RULE_showRelCommand = 135
    RULE_showPropertyCommand = 136
    RULE_yieldItem = 137
    RULE_yieldClause = 138
    RULE_showIndexesAllowBrief = 139
    RULE_showIndexesNoBrief = 140
    RULE_showConstraintsAllowBriefAndYield = 141
    RULE_showConstraintsAllowBrief = 142
    RULE_showConstraintsAllowYield = 143
    RULE_showProcedures = 144
    RULE_showFunctions = 145
    RULE_showTransactions = 146
    RULE_terminateTransactions = 147
    RULE_showOrTerminateTransactions = 148
    RULE_stringsOrExpression = 149
    RULE_showSettings = 150
    RULE_createConstraint = 151
    RULE_cypherTypeName = 152
    RULE_constraintNodePattern = 153
    RULE_constraintRelPattern = 154
    RULE_createConstraintNodeCheck = 155
    RULE_createConstraintRelCheck = 156
    RULE_dropConstraint = 157
    RULE_dropConstraintNodeCheck = 158
    RULE_createIndex = 159
    RULE_oldCreateIndex = 160
    RULE_createIndex_ = 161
    RULE_createFulltextIndex = 162
    RULE_createLookupIndex = 163
    RULE_lookupIndexFunctionName = 164
    RULE_dropIndex = 165
    RULE_propertyList = 166
    RULE_renameCommand = 167
    RULE_grantCommand = 168
    RULE_revokeCommand = 169
    RULE_enableServerCommand = 170
    RULE_alterServer = 171
    RULE_renameServer = 172
    RULE_dropServer = 173
    RULE_showServers = 174
    RULE_allocationCommand = 175
    RULE_deallocateDatabaseFromServers = 176
    RULE_reallocateDatabases = 177
    RULE_createRole = 178
    RULE_dropRole = 179
    RULE_renameRole = 180
    RULE_showRoles = 181
    RULE_grantRole = 182
    RULE_revokeRole = 183
    RULE_createUser = 184
    RULE_dropUser = 185
    RULE_renameUser = 186
    RULE_alterCurrentUser = 187
    RULE_alterUser = 188
    RULE_setPassword = 189
    RULE_passwordExpression = 190
    RULE_passwordChangeRequired = 191
    RULE_userStatus = 192
    RULE_homeDatabase = 193
    RULE_showUsers = 194
    RULE_showCurrentUser = 195
    RULE_showSupportedPrivileges = 196
    RULE_showPrivileges = 197
    RULE_showRolePrivileges = 198
    RULE_showUserPrivileges = 199
    RULE_grantRoleManagement = 200
    RULE_revokeRoleManagement = 201
    RULE_roleManagementPrivilege = 202
    RULE_grantPrivilege = 203
    RULE_denyPrivilege = 204
    RULE_revokePrivilege = 205
    RULE_privilege = 206
    RULE_allPrivilege = 207
    RULE_allPrivilegeType = 208
    RULE_allPrivilegeTarget = 209
    RULE_createPrivilege = 210
    RULE_dropPrivilege = 211
    RULE_showPrivilege = 212
    RULE_setPrivilege = 213
    RULE_removePrivilege = 214
    RULE_writePrivilege = 215
    RULE_databasePrivilege = 216
    RULE_dbmsPrivilege = 217
    RULE_executeFunctionQualifier = 218
    RULE_executeProcedureQualifier = 219
    RULE_settingQualifier = 220
    RULE_globs = 221
    RULE_qualifiedGraphPrivilegesWithProperty = 222
    RULE_qualifiedGraphPrivileges = 223
    RULE_labelResource = 224
    RULE_propertyResource = 225
    RULE_graphQualifier = 226
    RULE_createDatabase = 227
    RULE_options_ = 228
    RULE_createCompositeDatabase = 229
    RULE_dropDatabase = 230
    RULE_alterDatabase = 231
    RULE_startDatabase = 232
    RULE_stopDatabase = 233
    RULE_waitClause = 234
    RULE_showDatabase = 235
    RULE_databaseScopeList = 236
    RULE_graphScopeList = 237
    RULE_createAlias = 238
    RULE_dropAlias = 239
    RULE_alterAlias = 240
    RULE_showAliases = 241
    RULE_symbolicAliasNameList = 242
    RULE_symbolicAliasName = 243
    RULE_symbolicNameOrStringParameterList = 244
    RULE_symbolicNameOrStringParameter = 245
    RULE_glob = 246
    RULE_globRecursive = 247
    RULE_globPart = 248
    RULE_stringImage = 249
    RULE_stringList = 250
    RULE_stringToken = 251
    RULE_stringOrParameter = 252
    RULE_mapOrParameter = 253
    RULE_map = 254
    RULE_symbolicNamePositions = 255
    RULE_symbolicNameString = 256
    RULE_escapedSymbolicNameString = 257
    RULE_unescapedSymbolicNameString = 258
    RULE_symbolicLabelNameString = 259
    RULE_unescapedLabelSymbolicNameString = 260
    RULE_endOfFile = 261

    ruleNames =  [ "statements", "statement", "singleQueryOrCommand", "singleQueryOrCommandWithUseClause", 
                   "periodicCommitQueryHintFailure", "regularQuery", "union", 
                   "singleQuery", "singleQueryWithUseClause", "clause", 
                   "useClause", "returnClause", "returnBody", "returnItem", 
                   "returnItems", "orderItem", "skip", "limit", "whereClause", 
                   "withClause", "createClause", "setClause", "setItem", 
                   "removeClause", "removeItem", "deleteClause", "matchClause", 
                   "matchMode", "hints", "indexHintBody", "mergeClause", 
                   "unwindClause", "callClause", "procedureName", "procedureArgument", 
                   "procedureResultItem", "loadCSVClause", "foreachClause", 
                   "subqueryClause", "subqueryInTransactionsParameters", 
                   "subqueryInTransactionsBatchParameters", "subqueryInTransactionsErrorParameters", 
                   "subqueryInTransactionsReportParameters", "patternList", 
                   "pattern", "quantifier", "anonymousPattern", "shortestPathPattern", 
                   "maybeQuantifiedRelationshipPattern", "patternElement", 
                   "pathPatternAtoms", "selector", "pathPatternNonEmpty", 
                   "nodePattern", "parenthesizedPath", "nodeLabels", "labelExpressionPredicate", 
                   "labelOrRelType", "labelOrRelTypes", "properties", "relationshipPattern", 
                   "leftArrow", "arrowLine", "rightArrow", "pathLength", 
                   "pathLengthLiteral", "labelExpression", "labelExpression4", 
                   "labelExpression4Is", "labelExpression3", "labelExpression3Is", 
                   "labelExpression2", "labelExpression2Is", "labelExpression1", 
                   "labelExpression1Is", "expression", "expression12", "expression11", 
                   "expression10", "expression9", "expression8", "expression7", 
                   "comparisonExpression6", "expression6", "expression5", 
                   "expression4", "expression3", "expression2", "postFix1", 
                   "property", "propertyExpression", "expression1", "literal", 
                   "caseExpression", "listComprehension", "listComprehensionWhereAndBar", 
                   "patternComprehension", "patternComprehensionPrefix", 
                   "reduceExpression", "allExpression", "anyExpression", 
                   "noneExpression", "singleExpression", "patternExpression", 
                   "shortestPathExpression", "mapProjection", "mapProjectionItem", 
                   "existsExpression", "countExpression", "collectExpression", 
                   "stringLiteral", "numberLiteral", "signedIntegerLiteral", 
                   "listLiteral", "mapLiteral", "propertyKeyName", "parameter", 
                   "parameterName", "functionInvocation", "functionName", 
                   "functionArgument", "namespace", "variableList1", "variable", 
                   "symbolicNameList1", "createCommand", "command", "commandWithUseGraph", 
                   "dropCommand", "alterCommand", "showCommand", "terminateCommand", 
                   "showAllCommand", "showNodeCommand", "showRelationshipCommand", 
                   "showRelCommand", "showPropertyCommand", "yieldItem", 
                   "yieldClause", "showIndexesAllowBrief", "showIndexesNoBrief", 
                   "showConstraintsAllowBriefAndYield", "showConstraintsAllowBrief", 
                   "showConstraintsAllowYield", "showProcedures", "showFunctions", 
                   "showTransactions", "terminateTransactions", "showOrTerminateTransactions", 
                   "stringsOrExpression", "showSettings", "createConstraint", 
                   "cypherTypeName", "constraintNodePattern", "constraintRelPattern", 
                   "createConstraintNodeCheck", "createConstraintRelCheck", 
                   "dropConstraint", "dropConstraintNodeCheck", "createIndex", 
                   "oldCreateIndex", "createIndex_", "createFulltextIndex", 
                   "createLookupIndex", "lookupIndexFunctionName", "dropIndex", 
                   "propertyList", "renameCommand", "grantCommand", "revokeCommand", 
                   "enableServerCommand", "alterServer", "renameServer", 
                   "dropServer", "showServers", "allocationCommand", "deallocateDatabaseFromServers", 
                   "reallocateDatabases", "createRole", "dropRole", "renameRole", 
                   "showRoles", "grantRole", "revokeRole", "createUser", 
                   "dropUser", "renameUser", "alterCurrentUser", "alterUser", 
                   "setPassword", "passwordExpression", "passwordChangeRequired", 
                   "userStatus", "homeDatabase", "showUsers", "showCurrentUser", 
                   "showSupportedPrivileges", "showPrivileges", "showRolePrivileges", 
                   "showUserPrivileges", "grantRoleManagement", "revokeRoleManagement", 
                   "roleManagementPrivilege", "grantPrivilege", "denyPrivilege", 
                   "revokePrivilege", "privilege", "allPrivilege", "allPrivilegeType", 
                   "allPrivilegeTarget", "createPrivilege", "dropPrivilege", 
                   "showPrivilege", "setPrivilege", "removePrivilege", "writePrivilege", 
                   "databasePrivilege", "dbmsPrivilege", "executeFunctionQualifier", 
                   "executeProcedureQualifier", "settingQualifier", "globs", 
                   "qualifiedGraphPrivilegesWithProperty", "qualifiedGraphPrivileges", 
                   "labelResource", "propertyResource", "graphQualifier", 
                   "createDatabase", "options_", "createCompositeDatabase", 
                   "dropDatabase", "alterDatabase", "startDatabase", "stopDatabase", 
                   "waitClause", "showDatabase", "databaseScopeList", "graphScopeList", 
                   "createAlias", "dropAlias", "alterAlias", "showAliases", 
                   "symbolicAliasNameList", "symbolicAliasName", "symbolicNameOrStringParameterList", 
                   "symbolicNameOrStringParameter", "glob", "globRecursive", 
                   "globPart", "stringImage", "stringList", "stringToken", 
                   "stringOrParameter", "mapOrParameter", "map", "symbolicNamePositions", 
                   "symbolicNameString", "escapedSymbolicNameString", "unescapedSymbolicNameString", 
                   "symbolicLabelNameString", "unescapedLabelSymbolicNameString", 
                   "endOfFile" ]

    EOF = Token.EOF
    SPACE=1
    SINGLE_LINE_COMMENT=2
    DECIMAL_DOUBLE=3
    UNSIGNED_DECIMAL_INTEGER=4
    UNSIGNED_HEX_INTEGER=5
    UNSIGNED_OCTAL_INTEGER=6
    ACCESS=7
    ACTIVE=8
    ADMIN=9
    ADMINISTRATOR=10
    ALIAS=11
    ALIASES=12
    ALL_SHORTEST_PATH=13
    ALL=14
    ALTER=15
    AND=16
    ANY=17
    AS=18
    ASC=19
    ASSERT=20
    ASSIGN=21
    AT=22
    BAR=23
    BINDINGS=24
    BOOL=25
    BOOLEAN=26
    BOOSTED=27
    BREAK=28
    BRIEF=29
    BTREE=30
    BUILT=31
    BY=32
    CALL=33
    CASE=34
    CHANGE=35
    COLLECT=36
    COLON=37
    COLONCOLON=38
    COMMA=39
    COMMAND=40
    COMMANDS=41
    COMMIT=42
    COMPOSITE=43
    CONSTRAINT=44
    CONSTRAINTS=45
    CONTAINS=46
    COPY=47
    CONTINUE=48
    COUNT=49
    CREATE=50
    CSV=51
    CURRENT=52
    DATA=53
    DATABASE=54
    DATABASES=55
    DATE=56
    DATETIME=57
    DBMS=58
    DEALLOCATE=59
    DEFAULT=60
    DEFINED=61
    DELETE=62
    DENY=63
    DESC=64
    DESTROY=65
    DETACH=66
    DIFFERENT=67
    DOLLAR=68
    DISTINCT=69
    DIVIDE=70
    DOT=71
    DOTDOT=72
    DRIVER=73
    DROP=74
    DRYRUN=75
    DUMP=76
    DURATION=77
    EACH=78
    ENABLE=79
    ELEMENT=80
    ELEMENTS=81
    ELSE=82
    ENCRYPTED=83
    END=84
    ENDS=85
    EQ=86
    EXECUTABLE=87
    EXECUTE=88
    EXIST=89
    EXISTENCE=90
    EXISTS=91
    ERROR=92
    FAIL=93
    FALSE=94
    FIELDTERMINATOR=95
    FLOAT=96
    FOR=97
    FOREACH=98
    FROM=99
    FULLTEXT=100
    FUNCTION=101
    FUNCTIONS=102
    GE=103
    GRANT=104
    GRAPH=105
    GRAPHS=106
    GROUP=107
    GROUPS=108
    GT=109
    HEADERS=110
    HOME=111
    IF=112
    IMPERSONATE=113
    IMMUTABLE=114
    IN=115
    INDEX=116
    INDEXES=117
    INF=118
    INFINITY=119
    INT=120
    INTEGER=121
    IS=122
    JOIN=123
    KEY=124
    LABEL=125
    LABELS=126
    AMPERSAND=127
    EXCLAMATION_MARK=128
    LBRACKET=129
    LCURLY=130
    LE=131
    LIMITROWS=132
    LOAD=133
    LOCAL=134
    LOOKUP=135
    LPAREN=136
    LT=137
    MANAGEMENT=138
    MATCH=139
    MERGE=140
    MINUS=141
    PERCENT=142
    NEQ=143
    NEQ2=144
    NAME=145
    NAMES=146
    NAN=147
    NEW=148
    NODE=149
    NODES=150
    NONE=151
    NOT=152
    NOWAIT=153
    NULL=154
    OF=155
    ON=156
    ONLY=157
    OPTIONAL=158
    OPTIONS=159
    OPTION=160
    OR=161
    ORDER=162
    OUTPUT=163
    PASSWORD=164
    PASSWORDS=165
    PATH=166
    PATHS=167
    PERIODIC=168
    PLAINTEXT=169
    PLUS=170
    PLUSEQUAL=171
    POINT=172
    POPULATED=173
    POW=174
    PRIMARY=175
    PRIMARIES=176
    PRIVILEGE=177
    PRIVILEGES=178
    PROCEDURE=179
    PROCEDURES=180
    PROPERTIES=181
    PROPERTY=182
    QUESTION=183
    RANGE=184
    RBRACKET=185
    RCURLY=186
    READ=187
    REALLOCATE=188
    REDUCE=189
    RENAME=190
    REGEQ=191
    REL=192
    RELATIONSHIP=193
    RELATIONSHIPS=194
    REMOVE=195
    REPEATABLE=196
    REPLACE=197
    REPORT=198
    REQUIRE=199
    REQUIRED=200
    RETURN=201
    REVOKE=202
    ROLE=203
    ROLES=204
    ROW=205
    ROWS=206
    RPAREN=207
    SCAN=208
    SEC=209
    SECOND=210
    SECONDARY=211
    SECONDARIES=212
    SECONDS=213
    SEEK=214
    SEMICOLON=215
    SERVER=216
    SERVERS=217
    SET=218
    SETTING=219
    SETTINGS=220
    SHORTEST_PATH=221
    SHORTEST=222
    SHOW=223
    SIGNED=224
    SINGLE=225
    SKIPROWS=226
    START=227
    STARTS=228
    STATUS=229
    STOP=230
    STRING=231
    SUPPORTED=232
    SUSPENDED=233
    TARGET=234
    TERMINATE=235
    TEXT=236
    THEN=237
    TIME=238
    TIMES=239
    TIMESTAMP=240
    TIMEZONE=241
    TO=242
    TOPOLOGY=243
    TRANSACTION=244
    TRANSACTIONS=245
    TRAVERSE=246
    TRUE=247
    TYPE=248
    TYPED=249
    TYPES=250
    UNION=251
    UNIQUE=252
    UNIQUENESS=253
    UNWIND=254
    USE=255
    USER=256
    USERS=257
    USING=258
    VARCHAR=259
    VERBOSE=260
    WAIT=261
    WHEN=262
    WHERE=263
    WITH=264
    WITHOUT=265
    WRITE=266
    XOR=267
    YIELD=268
    ZONED=269
    IDENTIFIER=270
    ErrorChar=271
    ARROW_LINE=272
    ARROW_LEFT_HEAD=273
    ARROW_RIGHT_HEAD=274
    FORMAL_COMMENT=275
    STRING_LITERAL1=276
    STRING_LITERAL2=277
    MULTI_LINE_COMMENT=278
    ESCAPED_SYMBOLIC_NAME=279
    MORE1=280
    STRING1_OPEN=281
    STRING2_OPEN=282
    ESCAPED_SYMBOLIC_NAME_OPEN=283
    MORE3=284
    MORE4=285
    MORE5=286
    MORE6=287
    MORE7=288
    MORE8=289
    MORE9=290
    MORE10=291
    MORE11=292
    MORE24=293

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.StatementContext)
            else:
                return self.getTypedRuleContext(CypherParser.StatementContext,i)


        def EOF(self):
            return self.getToken(CypherParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SEMICOLON)
            else:
                return self.getToken(CypherParser.SEMICOLON, i)

        def getRuleIndex(self):
            return CypherParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = CypherParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.statement()
            self.state = 529
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 525
                    self.match(CypherParser.SEMICOLON)
                    self.state = 526
                    self.statement() 
                self.state = 531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==215:
                self.state = 532
                self.match(CypherParser.SEMICOLON)


            self.state = 535
            self.match(CypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useClause(self):
            return self.getTypedRuleContext(CypherParser.UseClauseContext,0)


        def singleQueryOrCommandWithUseClause(self):
            return self.getTypedRuleContext(CypherParser.SingleQueryOrCommandWithUseClauseContext,0)


        def singleQueryOrCommand(self):
            return self.getTypedRuleContext(CypherParser.SingleQueryOrCommandContext,0)


        def periodicCommitQueryHintFailure(self):
            return self.getTypedRuleContext(CypherParser.PeriodicCommitQueryHintFailureContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CypherParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 537
                self.periodicCommitQueryHintFailure()


            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 540
                self.useClause()
                self.state = 541
                self.singleQueryOrCommandWithUseClause()
                pass

            elif la_ == 2:
                self.state = 543
                self.singleQueryOrCommand()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleQueryOrCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createCommand(self):
            return self.getTypedRuleContext(CypherParser.CreateCommandContext,0)


        def command(self):
            return self.getTypedRuleContext(CypherParser.CommandContext,0)


        def singleQuery(self):
            return self.getTypedRuleContext(CypherParser.SingleQueryContext,0)


        def union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.UnionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_singleQueryOrCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleQueryOrCommand" ):
                listener.enterSingleQueryOrCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleQueryOrCommand" ):
                listener.exitSingleQueryOrCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleQueryOrCommand" ):
                return visitor.visitSingleQueryOrCommand(self)
            else:
                return visitor.visitChildren(self)




    def singleQueryOrCommand(self):

        localctx = CypherParser.SingleQueryOrCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleQueryOrCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 546
                self.createCommand()
                pass

            elif la_ == 2:
                self.state = 547
                self.command()
                pass

            elif la_ == 3:
                self.state = 548
                self.singleQuery()
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==251:
                    self.state = 549
                    self.union()
                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleQueryOrCommandWithUseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createCommand(self):
            return self.getTypedRuleContext(CypherParser.CreateCommandContext,0)


        def command(self):
            return self.getTypedRuleContext(CypherParser.CommandContext,0)


        def singleQueryWithUseClause(self):
            return self.getTypedRuleContext(CypherParser.SingleQueryWithUseClauseContext,0)


        def union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.UnionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_singleQueryOrCommandWithUseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleQueryOrCommandWithUseClause" ):
                listener.enterSingleQueryOrCommandWithUseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleQueryOrCommandWithUseClause" ):
                listener.exitSingleQueryOrCommandWithUseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleQueryOrCommandWithUseClause" ):
                return visitor.visitSingleQueryOrCommandWithUseClause(self)
            else:
                return visitor.visitChildren(self)




    def singleQueryOrCommandWithUseClause(self):

        localctx = CypherParser.SingleQueryOrCommandWithUseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_singleQueryOrCommandWithUseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 557
                self.createCommand()
                pass

            elif la_ == 2:
                self.state = 558
                self.command()
                pass

            elif la_ == 3:
                self.state = 559
                self.singleQueryWithUseClause()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==251:
                    self.state = 560
                    self.union()
                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeriodicCommitQueryHintFailureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CypherParser.USING, 0)

        def PERIODIC(self):
            return self.getToken(CypherParser.PERIODIC, 0)

        def COMMIT(self):
            return self.getToken(CypherParser.COMMIT, 0)

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_periodicCommitQueryHintFailure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodicCommitQueryHintFailure" ):
                listener.enterPeriodicCommitQueryHintFailure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodicCommitQueryHintFailure" ):
                listener.exitPeriodicCommitQueryHintFailure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeriodicCommitQueryHintFailure" ):
                return visitor.visitPeriodicCommitQueryHintFailure(self)
            else:
                return visitor.visitChildren(self)




    def periodicCommitQueryHintFailure(self):

        localctx = CypherParser.PeriodicCommitQueryHintFailureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_periodicCommitQueryHintFailure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(CypherParser.USING)
            self.state = 569
            self.match(CypherParser.PERIODIC)
            self.state = 570
            self.match(CypherParser.COMMIT)
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 571
                self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleQuery(self):
            return self.getTypedRuleContext(CypherParser.SingleQueryContext,0)


        def union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.UnionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_regularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularQuery" ):
                listener.enterRegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularQuery" ):
                listener.exitRegularQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularQuery" ):
                return visitor.visitRegularQuery(self)
            else:
                return visitor.visitChildren(self)




    def regularQuery(self):

        localctx = CypherParser.RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_regularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.singleQuery()
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==251:
                self.state = 575
                self.union()
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def singleQuery(self):
            return self.getTypedRuleContext(CypherParser.SingleQueryContext,0)


        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion" ):
                listener.enterUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion" ):
                listener.exitUnion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion" ):
                return visitor.visitUnion(self)
            else:
                return visitor.visitChildren(self)




    def union(self):

        localctx = CypherParser.UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_union)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(CypherParser.UNION)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 582
                self.match(CypherParser.ALL)


            self.state = 585
            self.singleQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.ClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_singleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleQuery" ):
                listener.enterSingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleQuery" ):
                listener.exitSingleQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleQuery" ):
                return visitor.visitSingleQuery(self)
            else:
                return visitor.visitChildren(self)




    def singleQuery(self):

        localctx = CypherParser.SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_singleQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 587
                self.clause()
                self.state = 590 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4612811926924165120) != 0) or _la==66 or _la==98 or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 4611686018460942529) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -9196350439090421759) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleQueryWithUseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.ClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_singleQueryWithUseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleQueryWithUseClause" ):
                listener.enterSingleQueryWithUseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleQueryWithUseClause" ):
                listener.exitSingleQueryWithUseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleQueryWithUseClause" ):
                return visitor.visitSingleQueryWithUseClause(self)
            else:
                return visitor.visitChildren(self)




    def singleQueryWithUseClause(self):

        localctx = CypherParser.SingleQueryWithUseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_singleQueryWithUseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612811926924165120) != 0) or _la==66 or _la==98 or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 4611686018460942529) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -9196350439090421759) != 0):
                self.state = 592
                self.clause()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useClause(self):
            return self.getTypedRuleContext(CypherParser.UseClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def createClause(self):
            return self.getTypedRuleContext(CypherParser.CreateClauseContext,0)


        def deleteClause(self):
            return self.getTypedRuleContext(CypherParser.DeleteClauseContext,0)


        def setClause(self):
            return self.getTypedRuleContext(CypherParser.SetClauseContext,0)


        def removeClause(self):
            return self.getTypedRuleContext(CypherParser.RemoveClauseContext,0)


        def matchClause(self):
            return self.getTypedRuleContext(CypherParser.MatchClauseContext,0)


        def mergeClause(self):
            return self.getTypedRuleContext(CypherParser.MergeClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(CypherParser.WithClauseContext,0)


        def unwindClause(self):
            return self.getTypedRuleContext(CypherParser.UnwindClauseContext,0)


        def callClause(self):
            return self.getTypedRuleContext(CypherParser.CallClauseContext,0)


        def subqueryClause(self):
            return self.getTypedRuleContext(CypherParser.SubqueryClauseContext,0)


        def loadCSVClause(self):
            return self.getTypedRuleContext(CypherParser.LoadCSVClauseContext,0)


        def foreachClause(self):
            return self.getTypedRuleContext(CypherParser.ForeachClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClause" ):
                listener.enterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClause" ):
                listener.exitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClause" ):
                return visitor.visitClause(self)
            else:
                return visitor.visitChildren(self)




    def clause(self):

        localctx = CypherParser.ClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 598
                self.useClause()
                pass

            elif la_ == 2:
                self.state = 599
                self.returnClause()
                pass

            elif la_ == 3:
                self.state = 600
                self.createClause()
                pass

            elif la_ == 4:
                self.state = 601
                self.deleteClause()
                pass

            elif la_ == 5:
                self.state = 602
                self.setClause()
                pass

            elif la_ == 6:
                self.state = 603
                self.removeClause()
                pass

            elif la_ == 7:
                self.state = 604
                self.matchClause()
                pass

            elif la_ == 8:
                self.state = 605
                self.mergeClause()
                pass

            elif la_ == 9:
                self.state = 606
                self.withClause()
                pass

            elif la_ == 10:
                self.state = 607
                self.unwindClause()
                pass

            elif la_ == 11:
                self.state = 608
                self.callClause()
                pass

            elif la_ == 12:
                self.state = 609
                self.subqueryClause()
                pass

            elif la_ == 13:
                self.state = 610
                self.loadCSVClause()
                pass

            elif la_ == 14:
                self.state = 611
                self.foreachClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(CypherParser.USE, 0)

        def GRAPH(self):
            return self.getToken(CypherParser.GRAPH, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_useClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseClause" ):
                listener.enterUseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseClause" ):
                listener.exitUseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseClause" ):
                return visitor.visitUseClause(self)
            else:
                return visitor.visitChildren(self)




    def useClause(self):

        localctx = CypherParser.UseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_useClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(CypherParser.USE)
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 615
                self.match(CypherParser.GRAPH)
                self.state = 616
                self.expression()
                pass

            elif la_ == 2:
                self.state = 617
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def returnBody(self):
            return self.getTypedRuleContext(CypherParser.ReturnBodyContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_returnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnClause" ):
                listener.enterReturnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnClause" ):
                listener.exitReturnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnClause" ):
                return visitor.visitReturnClause(self)
            else:
                return visitor.visitChildren(self)




    def returnClause(self):

        localctx = CypherParser.ReturnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_returnClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(CypherParser.RETURN)
            self.state = 621
            self.returnBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnItems(self):
            return self.getTypedRuleContext(CypherParser.ReturnItemsContext,0)


        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def orderItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OrderItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OrderItemContext,i)


        def skip(self):
            return self.getTypedRuleContext(CypherParser.SkipContext,0)


        def limit(self):
            return self.getTypedRuleContext(CypherParser.LimitContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_returnBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnBody" ):
                listener.enterReturnBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnBody" ):
                listener.exitReturnBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnBody" ):
                return visitor.visitReturnBody(self)
            else:
                return visitor.visitChildren(self)




    def returnBody(self):

        localctx = CypherParser.ReturnBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_returnBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 623
                self.match(CypherParser.DISTINCT)


            self.state = 626
            self.returnItems()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==162:
                self.state = 627
                self.match(CypherParser.ORDER)
                self.state = 628
                self.match(CypherParser.BY)
                self.state = 629
                self.orderItem()
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==39:
                    self.state = 630
                    self.match(CypherParser.COMMA)
                    self.state = 631
                    self.orderItem()
                    self.state = 636
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226:
                self.state = 639
                self.skip()


            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 642
                self.limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_returnItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnItem" ):
                listener.enterReturnItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnItem" ):
                listener.exitReturnItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnItem" ):
                return visitor.visitReturnItem(self)
            else:
                return visitor.visitChildren(self)




    def returnItem(self):

        localctx = CypherParser.ReturnItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_returnItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.expression()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 646
                self.match(CypherParser.AS)
                self.state = 647
                self.variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def returnItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ReturnItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.ReturnItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_returnItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnItems" ):
                listener.enterReturnItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnItems" ):
                listener.exitReturnItems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnItems" ):
                return visitor.visitReturnItems(self)
            else:
                return visitor.visitChildren(self)




    def returnItems(self):

        localctx = CypherParser.ReturnItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_returnItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [239]:
                self.state = 650
                self.match(CypherParser.TIMES)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==39:
                    self.state = 651
                    self.match(CypherParser.COMMA)
                    self.state = 652
                    self.returnItem()
                    self.state = 657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 276, 277, 279]:
                self.state = 658
                self.returnItem()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==39:
                    self.state = 659
                    self.match(CypherParser.COMMA)
                    self.state = 660
                    self.returnItem()
                    self.state = 665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_orderItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderItem" ):
                listener.enterOrderItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderItem" ):
                listener.exitOrderItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderItem" ):
                return visitor.visitOrderItem(self)
            else:
                return visitor.visitChildren(self)




    def orderItem(self):

        localctx = CypherParser.OrderItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_orderItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.expression()
            self.state = 673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 669
                self.match(CypherParser.DESC)
                pass
            elif token in [-1, 19, 33, 39, 50, 62, 66, 98, 132, 133, 139, 140, 158, 186, 195, 201, 207, 215, 218, 223, 226, 235, 251, 254, 255, 263, 264]:
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 670
                    self.match(CypherParser.ASC)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIPROWS(self):
            return self.getToken(CypherParser.SKIPROWS, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkip" ):
                listener.enterSkip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkip" ):
                listener.exitSkip(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkip" ):
                return visitor.visitSkip(self)
            else:
                return visitor.visitChildren(self)




    def skip(self):

        localctx = CypherParser.SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(CypherParser.SKIPROWS)
            self.state = 676
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMITROWS(self):
            return self.getToken(CypherParser.LIMITROWS, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit" ):
                listener.enterLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit" ):
                listener.exitLimit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit" ):
                return visitor.visitLimit(self)
            else:
                return visitor.visitChildren(self)




    def limit(self):

        localctx = CypherParser.LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(CypherParser.LIMITROWS)
            self.state = 679
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = CypherParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(CypherParser.WHERE)
            self.state = 682
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def returnBody(self):
            return self.getTypedRuleContext(CypherParser.ReturnBodyContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = CypherParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_withClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(CypherParser.WITH)
            self.state = 685
            self.returnBody()
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 686
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def patternList(self):
            return self.getTypedRuleContext(CypherParser.PatternListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_createClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateClause" ):
                listener.enterCreateClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateClause" ):
                listener.exitCreateClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateClause" ):
                return visitor.visitCreateClause(self)
            else:
                return visitor.visitChildren(self)




    def createClause(self):

        localctx = CypherParser.CreateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_createClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(CypherParser.CREATE)
            self.state = 690
            self.patternList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def setItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SetItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.SetItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_setClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetClause" ):
                listener.enterSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetClause" ):
                listener.exitSetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetClause" ):
                return visitor.visitSetClause(self)
            else:
                return visitor.visitChildren(self)




    def setClause(self):

        localctx = CypherParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_setClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(CypherParser.SET)
            self.state = 693
            self.setItem()
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 694
                self.match(CypherParser.COMMA)
                self.state = 695
                self.setItem()
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyExpression(self):
            return self.getTypedRuleContext(CypherParser.PropertyExpressionContext,0)


        def EQ(self):
            return self.getToken(CypherParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def PLUSEQUAL(self):
            return self.getToken(CypherParser.PLUSEQUAL, 0)

        def nodeLabels(self):
            return self.getTypedRuleContext(CypherParser.NodeLabelsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_setItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetItem" ):
                listener.enterSetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetItem" ):
                listener.exitSetItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetItem" ):
                return visitor.visitSetItem(self)
            else:
                return visitor.visitChildren(self)




    def setItem(self):

        localctx = CypherParser.SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_setItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 701
                self.propertyExpression()
                self.state = 702
                self.match(CypherParser.EQ)
                self.state = 703
                self.expression()
                pass

            elif la_ == 2:
                self.state = 705
                self.variable()
                self.state = 706
                self.match(CypherParser.EQ)
                self.state = 707
                self.expression()
                pass

            elif la_ == 3:
                self.state = 709
                self.variable()
                self.state = 710
                self.match(CypherParser.PLUSEQUAL)
                self.state = 711
                self.expression()
                pass

            elif la_ == 4:
                self.state = 713
                self.variable()
                self.state = 714
                self.nodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def removeItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.RemoveItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.RemoveItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_removeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveClause" ):
                listener.enterRemoveClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveClause" ):
                listener.exitRemoveClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemoveClause" ):
                return visitor.visitRemoveClause(self)
            else:
                return visitor.visitChildren(self)




    def removeClause(self):

        localctx = CypherParser.RemoveClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_removeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(CypherParser.REMOVE)
            self.state = 719
            self.removeItem()
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 720
                self.match(CypherParser.COMMA)
                self.state = 721
                self.removeItem()
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyExpression(self):
            return self.getTypedRuleContext(CypherParser.PropertyExpressionContext,0)


        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def nodeLabels(self):
            return self.getTypedRuleContext(CypherParser.NodeLabelsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_removeItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveItem" ):
                listener.enterRemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveItem" ):
                listener.exitRemoveItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemoveItem" ):
                return visitor.visitRemoveItem(self)
            else:
                return visitor.visitChildren(self)




    def removeItem(self):

        localctx = CypherParser.RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_removeItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 727
                self.propertyExpression()
                pass

            elif la_ == 2:
                self.state = 728
                self.variable()
                self.state = 729
                self.nodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_deleteClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteClause" ):
                listener.enterDeleteClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteClause" ):
                listener.exitDeleteClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteClause" ):
                return visitor.visitDeleteClause(self)
            else:
                return visitor.visitChildren(self)




    def deleteClause(self):

        localctx = CypherParser.DeleteClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_deleteClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 733
                self.match(CypherParser.DETACH)


            self.state = 736
            self.match(CypherParser.DELETE)
            self.state = 737
            self.expression()
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 738
                self.match(CypherParser.COMMA)
                self.state = 739
                self.expression()
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patternList(self):
            return self.getTypedRuleContext(CypherParser.PatternListContext,0)


        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def matchMode(self):
            return self.getTypedRuleContext(CypherParser.MatchModeContext,0)


        def hints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.HintsContext)
            else:
                return self.getTypedRuleContext(CypherParser.HintsContext,i)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_matchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchClause" ):
                listener.enterMatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchClause" ):
                listener.exitMatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchClause" ):
                return visitor.visitMatchClause(self)
            else:
                return visitor.visitChildren(self)




    def matchClause(self):

        localctx = CypherParser.MatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_matchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158]:
                self.state = 745
                self.match(CypherParser.OPTIONAL)
                self.state = 746
                self.match(CypherParser.MATCH)
                pass
            elif token in [139]:
                self.state = 747
                self.match(CypherParser.MATCH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 750
                self.matchMode()


            self.state = 753
            self.patternList()
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==258:
                self.state = 754
                self.hints()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 760
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(CypherParser.REPEATABLE, 0)

        def ELEMENT(self):
            return self.getToken(CypherParser.ELEMENT, 0)

        def BINDINGS(self):
            return self.getToken(CypherParser.BINDINGS, 0)

        def ELEMENTS(self):
            return self.getToken(CypherParser.ELEMENTS, 0)

        def DIFFERENT(self):
            return self.getToken(CypherParser.DIFFERENT, 0)

        def RELATIONSHIP(self):
            return self.getToken(CypherParser.RELATIONSHIP, 0)

        def RELATIONSHIPS(self):
            return self.getToken(CypherParser.RELATIONSHIPS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_matchMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchMode" ):
                listener.enterMatchMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchMode" ):
                listener.exitMatchMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchMode" ):
                return visitor.visitMatchMode(self)
            else:
                return visitor.visitChildren(self)




    def matchMode(self):

        localctx = CypherParser.MatchModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_matchMode)
        try:
            self.state = 778
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [196]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.match(CypherParser.REPEATABLE)
                self.state = 768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 764
                    self.match(CypherParser.ELEMENT)
                    self.state = 765
                    self.match(CypherParser.BINDINGS)
                    pass

                elif la_ == 2:
                    self.state = 766
                    self.match(CypherParser.ELEMENTS)
                    pass

                elif la_ == 3:
                    self.state = 767
                    self.match(CypherParser.ELEMENT)
                    pass


                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.match(CypherParser.DIFFERENT)
                self.state = 776
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [193]:
                    self.state = 771
                    self.match(CypherParser.RELATIONSHIP)
                    self.state = 773
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        self.state = 772
                        self.match(CypherParser.BINDINGS)


                    pass
                elif token in [194]:
                    self.state = 775
                    self.match(CypherParser.RELATIONSHIPS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CypherParser.USING, 0)

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def indexHintBody(self):
            return self.getTypedRuleContext(CypherParser.IndexHintBodyContext,0)


        def BTREE(self):
            return self.getToken(CypherParser.BTREE, 0)

        def TEXT(self):
            return self.getToken(CypherParser.TEXT, 0)

        def RANGE(self):
            return self.getToken(CypherParser.RANGE, 0)

        def POINT(self):
            return self.getToken(CypherParser.POINT, 0)

        def JOIN(self):
            return self.getToken(CypherParser.JOIN, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def variableList1(self):
            return self.getTypedRuleContext(CypherParser.VariableList1Context,0)


        def SCAN(self):
            return self.getToken(CypherParser.SCAN, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def labelOrRelType(self):
            return self.getTypedRuleContext(CypherParser.LabelOrRelTypeContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHints" ):
                listener.enterHints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHints" ):
                listener.exitHints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHints" ):
                return visitor.visitHints(self)
            else:
                return visitor.visitChildren(self)




    def hints(self):

        localctx = CypherParser.HintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_hints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(CypherParser.USING)
            self.state = 802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116]:
                self.state = 781
                self.match(CypherParser.INDEX)
                self.state = 782
                self.indexHintBody()
                pass
            elif token in [30]:
                self.state = 783
                self.match(CypherParser.BTREE)
                self.state = 784
                self.match(CypherParser.INDEX)
                self.state = 785
                self.indexHintBody()
                pass
            elif token in [236]:
                self.state = 786
                self.match(CypherParser.TEXT)
                self.state = 787
                self.match(CypherParser.INDEX)
                self.state = 788
                self.indexHintBody()
                pass
            elif token in [184]:
                self.state = 789
                self.match(CypherParser.RANGE)
                self.state = 790
                self.match(CypherParser.INDEX)
                self.state = 791
                self.indexHintBody()
                pass
            elif token in [172]:
                self.state = 792
                self.match(CypherParser.POINT)
                self.state = 793
                self.match(CypherParser.INDEX)
                self.state = 794
                self.indexHintBody()
                pass
            elif token in [123]:
                self.state = 795
                self.match(CypherParser.JOIN)
                self.state = 796
                self.match(CypherParser.ON)
                self.state = 797
                self.variableList1()
                pass
            elif token in [208]:
                self.state = 798
                self.match(CypherParser.SCAN)
                self.state = 799
                self.variable()
                self.state = 800
                self.labelOrRelType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def labelOrRelType(self):
            return self.getTypedRuleContext(CypherParser.LabelOrRelTypeContext,0)


        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def symbolicNameList1(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameList1Context,0)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def SEEK(self):
            return self.getToken(CypherParser.SEEK, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_indexHintBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintBody" ):
                listener.enterIndexHintBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintBody" ):
                listener.exitIndexHintBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexHintBody" ):
                return visitor.visitIndexHintBody(self)
            else:
                return visitor.visitChildren(self)




    def indexHintBody(self):

        localctx = CypherParser.IndexHintBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_indexHintBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 804
                self.match(CypherParser.SEEK)


            self.state = 807
            self.variable()
            self.state = 808
            self.labelOrRelType()
            self.state = 809
            self.match(CypherParser.LPAREN)
            self.state = 810
            self.symbolicNameList1()
            self.state = 811
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def pattern(self):
            return self.getTypedRuleContext(CypherParser.PatternContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.ON)
            else:
                return self.getToken(CypherParser.ON, i)

        def MATCH(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.MATCH)
            else:
                return self.getToken(CypherParser.MATCH, i)

        def setClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SetClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.SetClauseContext,i)


        def CREATE(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.CREATE)
            else:
                return self.getToken(CypherParser.CREATE, i)

        def getRuleIndex(self):
            return CypherParser.RULE_mergeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeClause" ):
                listener.enterMergeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeClause" ):
                listener.exitMergeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeClause" ):
                return visitor.visitMergeClause(self)
            else:
                return visitor.visitChildren(self)




    def mergeClause(self):

        localctx = CypherParser.MergeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_mergeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(CypherParser.MERGE)
            self.state = 814
            self.pattern()
            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==156:
                self.state = 815
                self.match(CypherParser.ON)
                self.state = 820
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 816
                    self.match(CypherParser.MATCH)
                    self.state = 817
                    self.setClause()
                    pass
                elif token in [50]:
                    self.state = 818
                    self.match(CypherParser.CREATE)
                    self.state = 819
                    self.setClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnwindClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_unwindClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnwindClause" ):
                listener.enterUnwindClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnwindClause" ):
                listener.exitUnwindClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnwindClause" ):
                return visitor.visitUnwindClause(self)
            else:
                return visitor.visitChildren(self)




    def unwindClause(self):

        localctx = CypherParser.UnwindClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_unwindClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(CypherParser.UNWIND)
            self.state = 828
            self.expression()
            self.state = 829
            self.match(CypherParser.AS)
            self.state = 830
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def procedureName(self):
            return self.getTypedRuleContext(CypherParser.ProcedureNameContext,0)


        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def procedureResultItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ProcedureResultItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.ProcedureResultItemContext,i)


        def procedureArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ProcedureArgumentContext)
            else:
                return self.getTypedRuleContext(CypherParser.ProcedureArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_callClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallClause" ):
                listener.enterCallClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallClause" ):
                listener.exitCallClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallClause" ):
                return visitor.visitCallClause(self)
            else:
                return visitor.visitChildren(self)




    def callClause(self):

        localctx = CypherParser.CallClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_callClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(CypherParser.CALL)
            self.state = 833
            self.procedureName()
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 834
                self.match(CypherParser.LPAREN)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081062920) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257023) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -4845912781469311237) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -70368748388353) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 5783551) != 0):
                    self.state = 835
                    self.procedureArgument()


                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==39:
                    self.state = 838
                    self.match(CypherParser.COMMA)
                    self.state = 839
                    self.procedureArgument()
                    self.state = 844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 845
                self.match(CypherParser.RPAREN)


            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 848
                self.match(CypherParser.YIELD)
                self.state = 861
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 849
                    self.match(CypherParser.TIMES)
                    pass
                elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                    self.state = 850
                    self.procedureResultItem()
                    self.state = 855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==39:
                        self.state = 851
                        self.match(CypherParser.COMMA)
                        self.state = 852
                        self.procedureResultItem()
                        self.state = 857
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==263:
                        self.state = 858
                        self.whereClause()


                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace(self):
            return self.getTypedRuleContext(CypherParser.NamespaceContext,0)


        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureName" ):
                return visitor.visitProcedureName(self)
            else:
                return visitor.visitChildren(self)




    def procedureName(self):

        localctx = CypherParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.namespace()
            self.state = 866
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_procedureArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureArgument" ):
                listener.enterProcedureArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureArgument" ):
                listener.exitProcedureArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureArgument" ):
                return visitor.visitProcedureArgument(self)
            else:
                return visitor.visitChildren(self)




    def procedureArgument(self):

        localctx = CypherParser.ProcedureArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_procedureArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureResultItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_procedureResultItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureResultItem" ):
                listener.enterProcedureResultItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureResultItem" ):
                listener.exitProcedureResultItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureResultItem" ):
                return visitor.visitProcedureResultItem(self)
            else:
                return visitor.visitChildren(self)




    def procedureResultItem(self):

        localctx = CypherParser.ProcedureResultItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_procedureResultItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.symbolicNameString()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 871
                self.match(CypherParser.AS)
                self.state = 872
                self.variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadCSVClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(CypherParser.LOAD, 0)

        def CSV(self):
            return self.getToken(CypherParser.CSV, 0)

        def FROM(self):
            return self.getToken(CypherParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def HEADERS(self):
            return self.getToken(CypherParser.HEADERS, 0)

        def FIELDTERMINATOR(self):
            return self.getToken(CypherParser.FIELDTERMINATOR, 0)

        def stringToken(self):
            return self.getTypedRuleContext(CypherParser.StringTokenContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_loadCSVClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadCSVClause" ):
                listener.enterLoadCSVClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadCSVClause" ):
                listener.exitLoadCSVClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadCSVClause" ):
                return visitor.visitLoadCSVClause(self)
            else:
                return visitor.visitChildren(self)




    def loadCSVClause(self):

        localctx = CypherParser.LoadCSVClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_loadCSVClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(CypherParser.LOAD)
            self.state = 876
            self.match(CypherParser.CSV)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==264:
                self.state = 877
                self.match(CypherParser.WITH)
                self.state = 878
                self.match(CypherParser.HEADERS)


            self.state = 881
            self.match(CypherParser.FROM)
            self.state = 882
            self.expression()
            self.state = 883
            self.match(CypherParser.AS)
            self.state = 884
            self.variable()
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 885
                self.match(CypherParser.FIELDTERMINATOR)
                self.state = 886
                self.stringToken()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(CypherParser.FOREACH, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def BAR(self):
            return self.getToken(CypherParser.BAR, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.ClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_foreachClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachClause" ):
                listener.enterForeachClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachClause" ):
                listener.exitForeachClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeachClause" ):
                return visitor.visitForeachClause(self)
            else:
                return visitor.visitChildren(self)




    def foreachClause(self):

        localctx = CypherParser.ForeachClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_foreachClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(CypherParser.FOREACH)
            self.state = 890
            self.match(CypherParser.LPAREN)
            self.state = 891
            self.variable()
            self.state = 892
            self.match(CypherParser.IN)
            self.state = 893
            self.expression()
            self.state = 894
            self.match(CypherParser.BAR)
            self.state = 896 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 895
                self.clause()
                self.state = 898 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4612811926924165120) != 0) or _la==66 or _la==98 or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 4611686018460942529) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -9196350439090421759) != 0)):
                    break

            self.state = 900
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def LCURLY(self):
            return self.getToken(CypherParser.LCURLY, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(CypherParser.RegularQueryContext,0)


        def RCURLY(self):
            return self.getToken(CypherParser.RCURLY, 0)

        def subqueryInTransactionsParameters(self):
            return self.getTypedRuleContext(CypherParser.SubqueryInTransactionsParametersContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_subqueryClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryClause" ):
                listener.enterSubqueryClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryClause" ):
                listener.exitSubqueryClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryClause" ):
                return visitor.visitSubqueryClause(self)
            else:
                return visitor.visitChildren(self)




    def subqueryClause(self):

        localctx = CypherParser.SubqueryClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_subqueryClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(CypherParser.CALL)
            self.state = 903
            self.match(CypherParser.LCURLY)
            self.state = 904
            self.regularQuery()
            self.state = 905
            self.match(CypherParser.RCURLY)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 906
                self.subqueryInTransactionsParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryInTransactionsParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def TRANSACTIONS(self):
            return self.getToken(CypherParser.TRANSACTIONS, 0)

        def subqueryInTransactionsBatchParameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SubqueryInTransactionsBatchParametersContext)
            else:
                return self.getTypedRuleContext(CypherParser.SubqueryInTransactionsBatchParametersContext,i)


        def subqueryInTransactionsErrorParameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SubqueryInTransactionsErrorParametersContext)
            else:
                return self.getTypedRuleContext(CypherParser.SubqueryInTransactionsErrorParametersContext,i)


        def subqueryInTransactionsReportParameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SubqueryInTransactionsReportParametersContext)
            else:
                return self.getTypedRuleContext(CypherParser.SubqueryInTransactionsReportParametersContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_subqueryInTransactionsParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryInTransactionsParameters" ):
                listener.enterSubqueryInTransactionsParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryInTransactionsParameters" ):
                listener.exitSubqueryInTransactionsParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryInTransactionsParameters" ):
                return visitor.visitSubqueryInTransactionsParameters(self)
            else:
                return visitor.visitChildren(self)




    def subqueryInTransactionsParameters(self):

        localctx = CypherParser.SubqueryInTransactionsParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_subqueryInTransactionsParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(CypherParser.IN)
            self.state = 910
            self.match(CypherParser.TRANSACTIONS)
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & 8796093022211) != 0):
                self.state = 914
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [155]:
                    self.state = 911
                    self.subqueryInTransactionsBatchParameters()
                    pass
                elif token in [156]:
                    self.state = 912
                    self.subqueryInTransactionsErrorParameters()
                    pass
                elif token in [198]:
                    self.state = 913
                    self.subqueryInTransactionsReportParameters()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryInTransactionsBatchParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def ROW(self):
            return self.getToken(CypherParser.ROW, 0)

        def ROWS(self):
            return self.getToken(CypherParser.ROWS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_subqueryInTransactionsBatchParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryInTransactionsBatchParameters" ):
                listener.enterSubqueryInTransactionsBatchParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryInTransactionsBatchParameters" ):
                listener.exitSubqueryInTransactionsBatchParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryInTransactionsBatchParameters" ):
                return visitor.visitSubqueryInTransactionsBatchParameters(self)
            else:
                return visitor.visitChildren(self)




    def subqueryInTransactionsBatchParameters(self):

        localctx = CypherParser.SubqueryInTransactionsBatchParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_subqueryInTransactionsBatchParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(CypherParser.OF)
            self.state = 920
            self.expression()
            self.state = 921
            _la = self._input.LA(1)
            if not(_la==205 or _la==206):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryInTransactionsErrorParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def ERROR(self):
            return self.getToken(CypherParser.ERROR, 0)

        def CONTINUE(self):
            return self.getToken(CypherParser.CONTINUE, 0)

        def BREAK(self):
            return self.getToken(CypherParser.BREAK, 0)

        def FAIL(self):
            return self.getToken(CypherParser.FAIL, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_subqueryInTransactionsErrorParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryInTransactionsErrorParameters" ):
                listener.enterSubqueryInTransactionsErrorParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryInTransactionsErrorParameters" ):
                listener.exitSubqueryInTransactionsErrorParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryInTransactionsErrorParameters" ):
                return visitor.visitSubqueryInTransactionsErrorParameters(self)
            else:
                return visitor.visitChildren(self)




    def subqueryInTransactionsErrorParameters(self):

        localctx = CypherParser.SubqueryInTransactionsErrorParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_subqueryInTransactionsErrorParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(CypherParser.ON)
            self.state = 924
            self.match(CypherParser.ERROR)
            self.state = 925
            _la = self._input.LA(1)
            if not(_la==28 or _la==48 or _la==93):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryInTransactionsReportParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(CypherParser.REPORT, 0)

        def STATUS(self):
            return self.getToken(CypherParser.STATUS, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_subqueryInTransactionsReportParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryInTransactionsReportParameters" ):
                listener.enterSubqueryInTransactionsReportParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryInTransactionsReportParameters" ):
                listener.exitSubqueryInTransactionsReportParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryInTransactionsReportParameters" ):
                return visitor.visitSubqueryInTransactionsReportParameters(self)
            else:
                return visitor.visitChildren(self)




    def subqueryInTransactionsReportParameters(self):

        localctx = CypherParser.SubqueryInTransactionsReportParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_subqueryInTransactionsReportParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(CypherParser.REPORT)
            self.state = 928
            self.match(CypherParser.STATUS)
            self.state = 929
            self.match(CypherParser.AS)
            self.state = 930
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PatternContext)
            else:
                return self.getTypedRuleContext(CypherParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_patternList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternList" ):
                listener.enterPatternList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternList" ):
                listener.exitPatternList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternList" ):
                return visitor.visitPatternList(self)
            else:
                return visitor.visitChildren(self)




    def patternList(self):

        localctx = CypherParser.PatternListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_patternList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.pattern()
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 933
                self.match(CypherParser.COMMA)
                self.state = 934
                self.pattern()
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymousPattern(self):
            return self.getTypedRuleContext(CypherParser.AnonymousPatternContext,0)


        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def EQ(self):
            return self.getToken(CypherParser.EQ, 0)

        def selector(self):
            return self.getTypedRuleContext(CypherParser.SelectorContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = CypherParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 940
                self.variable()
                self.state = 941
                self.match(CypherParser.EQ)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14 or _la==17 or _la==222:
                    self.state = 942
                    self.selector()


                pass

            elif la_ == 2:
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14 or _la==17 or _la==222:
                    self.state = 945
                    self.selector()


                pass


            self.state = 950
            self.anonymousPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(CypherParser.LCURLY, 0)

        def UNSIGNED_DECIMAL_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.UNSIGNED_DECIMAL_INTEGER)
            else:
                return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, i)

        def RCURLY(self):
            return self.getToken(CypherParser.RCURLY, 0)

        def COMMA(self):
            return self.getToken(CypherParser.COMMA, 0)

        def PLUS(self):
            return self.getToken(CypherParser.PLUS, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifier" ):
                listener.enterQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifier" ):
                listener.exitQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifier" ):
                return visitor.visitQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def quantifier(self):

        localctx = CypherParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 952
                self.match(CypherParser.LCURLY)
                self.state = 953
                self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)
                self.state = 954
                self.match(CypherParser.RCURLY)
                pass

            elif la_ == 2:
                self.state = 955
                self.match(CypherParser.LCURLY)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 956
                    self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)


                self.state = 959
                self.match(CypherParser.COMMA)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 960
                    self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)


                self.state = 963
                self.match(CypherParser.RCURLY)
                pass

            elif la_ == 3:
                self.state = 964
                self.match(CypherParser.PLUS)
                pass

            elif la_ == 4:
                self.state = 965
                self.match(CypherParser.TIMES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathPattern(self):
            return self.getTypedRuleContext(CypherParser.ShortestPathPatternContext,0)


        def patternElement(self):
            return self.getTypedRuleContext(CypherParser.PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_anonymousPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousPattern" ):
                listener.enterAnonymousPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousPattern" ):
                listener.exitAnonymousPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnonymousPattern" ):
                return visitor.visitAnonymousPattern(self)
            else:
                return visitor.visitChildren(self)




    def anonymousPattern(self):

        localctx = CypherParser.AnonymousPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_anonymousPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 221]:
                self.state = 968
                self.shortestPathPattern()
                pass
            elif token in [136]:
                self.state = 969
                self.patternElement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORTEST_PATH(self):
            return self.getToken(CypherParser.SHORTEST_PATH, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def patternElement(self):
            return self.getTypedRuleContext(CypherParser.PatternElementContext,0)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def ALL_SHORTEST_PATH(self):
            return self.getToken(CypherParser.ALL_SHORTEST_PATH, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_shortestPathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathPattern" ):
                listener.enterShortestPathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathPattern" ):
                listener.exitShortestPathPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortestPathPattern" ):
                return visitor.visitShortestPathPattern(self)
            else:
                return visitor.visitChildren(self)




    def shortestPathPattern(self):

        localctx = CypherParser.ShortestPathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_shortestPathPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [221]:
                self.state = 972
                self.match(CypherParser.SHORTEST_PATH)
                self.state = 973
                self.match(CypherParser.LPAREN)
                self.state = 974
                self.patternElement()
                self.state = 975
                self.match(CypherParser.RPAREN)
                pass
            elif token in [13]:
                self.state = 977
                self.match(CypherParser.ALL_SHORTEST_PATH)
                self.state = 978
                self.match(CypherParser.LPAREN)
                self.state = 979
                self.patternElement()
                self.state = 980
                self.match(CypherParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeQuantifiedRelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationshipPattern(self):
            return self.getTypedRuleContext(CypherParser.RelationshipPatternContext,0)


        def quantifier(self):
            return self.getTypedRuleContext(CypherParser.QuantifierContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_maybeQuantifiedRelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeQuantifiedRelationshipPattern" ):
                listener.enterMaybeQuantifiedRelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeQuantifiedRelationshipPattern" ):
                listener.exitMaybeQuantifiedRelationshipPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeQuantifiedRelationshipPattern" ):
                return visitor.visitMaybeQuantifiedRelationshipPattern(self)
            else:
                return visitor.visitChildren(self)




    def maybeQuantifiedRelationshipPattern(self):

        localctx = CypherParser.MaybeQuantifiedRelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_maybeQuantifiedRelationshipPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.relationshipPattern()
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130 or _la==170 or _la==239:
                self.state = 985
                self.quantifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPatternAtoms(self):
            return self.getTypedRuleContext(CypherParser.PathPatternAtomsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_patternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternElement" ):
                listener.enterPatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternElement" ):
                listener.exitPatternElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternElement" ):
                return visitor.visitPatternElement(self)
            else:
                return visitor.visitChildren(self)




    def patternElement(self):

        localctx = CypherParser.PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_patternElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.pathPatternAtoms()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPatternAtomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.NodePatternContext)
            else:
                return self.getTypedRuleContext(CypherParser.NodePatternContext,i)


        def parenthesizedPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ParenthesizedPathContext)
            else:
                return self.getTypedRuleContext(CypherParser.ParenthesizedPathContext,i)


        def maybeQuantifiedRelationshipPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.MaybeQuantifiedRelationshipPatternContext)
            else:
                return self.getTypedRuleContext(CypherParser.MaybeQuantifiedRelationshipPatternContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_pathPatternAtoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPatternAtoms" ):
                listener.enterPathPatternAtoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPatternAtoms" ):
                listener.exitPathPatternAtoms(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathPatternAtoms" ):
                return visitor.visitPathPatternAtoms(self)
            else:
                return visitor.visitChildren(self)




    def pathPatternAtoms(self):

        localctx = CypherParser.PathPatternAtomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pathPatternAtoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 990
                    self.nodePattern()
                    self.state = 996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==137 or _la==141 or _la==272 or _la==273:
                        self.state = 991
                        self.maybeQuantifiedRelationshipPattern()
                        self.state = 992
                        self.nodePattern()
                        self.state = 998
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 999
                    self.parenthesizedPath()
                    pass


                self.state = 1002 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==136):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def SHORTEST(self):
            return self.getToken(CypherParser.SHORTEST, 0)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def GROUP(self):
            return self.getToken(CypherParser.GROUP, 0)

        def GROUPS(self):
            return self.getToken(CypherParser.GROUPS, 0)

        def PATH(self):
            return self.getToken(CypherParser.PATH, 0)

        def PATHS(self):
            return self.getToken(CypherParser.PATHS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_selector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector" ):
                listener.enterSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector" ):
                listener.exitSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelector" ):
                return visitor.visitSelector(self)
            else:
                return visitor.visitChildren(self)




    def selector(self):

        localctx = CypherParser.SelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_selector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 1004
                self.match(CypherParser.ANY)
                self.state = 1005
                self.match(CypherParser.SHORTEST)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166 or _la==167:
                    self.state = 1006
                    _la = self._input.LA(1)
                    if not(_la==166 or _la==167):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.state = 1009
                self.match(CypherParser.ALL)
                self.state = 1010
                self.match(CypherParser.SHORTEST)
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166 or _la==167:
                    self.state = 1011
                    _la = self._input.LA(1)
                    if not(_la==166 or _la==167):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                self.state = 1014
                self.match(CypherParser.ANY)
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 1015
                    self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)


                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166 or _la==167:
                    self.state = 1018
                    _la = self._input.LA(1)
                    if not(_la==166 or _la==167):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 4:
                self.state = 1021
                self.match(CypherParser.ALL)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166 or _la==167:
                    self.state = 1022
                    _la = self._input.LA(1)
                    if not(_la==166 or _la==167):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                self.state = 1025
                self.match(CypherParser.SHORTEST)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 1026
                    self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)


                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166 or _la==167:
                    self.state = 1029
                    _la = self._input.LA(1)
                    if not(_la==166 or _la==167):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1032
                _la = self._input.LA(1)
                if not(_la==107 or _la==108):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                self.state = 1033
                self.match(CypherParser.SHORTEST)
                self.state = 1034
                self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166 or _la==167:
                    self.state = 1035
                    _la = self._input.LA(1)
                    if not(_la==166 or _la==167):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPatternNonEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.NodePatternContext)
            else:
                return self.getTypedRuleContext(CypherParser.NodePatternContext,i)


        def relationshipPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.RelationshipPatternContext)
            else:
                return self.getTypedRuleContext(CypherParser.RelationshipPatternContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_pathPatternNonEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPatternNonEmpty" ):
                listener.enterPathPatternNonEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPatternNonEmpty" ):
                listener.exitPathPatternNonEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathPatternNonEmpty" ):
                return visitor.visitPathPatternNonEmpty(self)
            else:
                return visitor.visitChildren(self)




    def pathPatternNonEmpty(self):

        localctx = CypherParser.PathPatternNonEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_pathPatternNonEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.nodePattern()
            self.state = 1044 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1041
                    self.relationshipPattern()
                    self.state = 1042
                    self.nodePattern()

                else:
                    raise NoViableAltException(self)
                self.state = 1046 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def labelExpression(self):
            return self.getTypedRuleContext(CypherParser.LabelExpressionContext,0)


        def properties(self):
            return self.getTypedRuleContext(CypherParser.PropertiesContext,0)


        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_nodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodePattern" ):
                listener.enterNodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodePattern" ):
                listener.exitNodePattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodePattern" ):
                return visitor.visitNodePattern(self)
            else:
                return visitor.visitChildren(self)




    def nodePattern(self):

        localctx = CypherParser.NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_nodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(CypherParser.LPAREN)
            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1049
                self.variable()


            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37 or _la==122:
                self.state = 1052
                self.labelExpression()


            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68 or _la==130:
                self.state = 1055
                self.properties()


            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1058
                self.match(CypherParser.WHERE)
                self.state = 1059
                self.expression()


            self.state = 1062
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(CypherParser.PatternContext,0)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def quantifier(self):
            return self.getTypedRuleContext(CypherParser.QuantifierContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_parenthesizedPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedPath" ):
                listener.enterParenthesizedPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedPath" ):
                listener.exitParenthesizedPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedPath" ):
                return visitor.visitParenthesizedPath(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedPath(self):

        localctx = CypherParser.ParenthesizedPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_parenthesizedPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(CypherParser.LPAREN)
            self.state = 1065
            self.pattern()
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1066
                self.match(CypherParser.WHERE)
                self.state = 1067
                self.expression()


            self.state = 1070
            self.match(CypherParser.RPAREN)
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130 or _la==170 or _la==239:
                self.state = 1071
                self.quantifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelOrRelType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.LabelOrRelTypeContext)
            else:
                return self.getTypedRuleContext(CypherParser.LabelOrRelTypeContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_nodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeLabels" ):
                listener.enterNodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeLabels" ):
                listener.exitNodeLabels(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodeLabels" ):
                return visitor.visitNodeLabels(self)
            else:
                return visitor.visitChildren(self)




    def nodeLabels(self):

        localctx = CypherParser.NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_nodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1074
                self.labelOrRelType()
                self.state = 1077 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==37):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpressionPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression(self):
            return self.getTypedRuleContext(CypherParser.LabelExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_labelExpressionPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpressionPredicate" ):
                listener.enterLabelExpressionPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpressionPredicate" ):
                listener.exitLabelExpressionPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpressionPredicate" ):
                return visitor.visitLabelExpressionPredicate(self)
            else:
                return visitor.visitChildren(self)




    def labelExpressionPredicate(self):

        localctx = CypherParser.LabelExpressionPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_labelExpressionPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.labelExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelOrRelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CypherParser.COLON, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_labelOrRelType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelOrRelType" ):
                listener.enterLabelOrRelType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelOrRelType" ):
                listener.exitLabelOrRelType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelOrRelType" ):
                return visitor.visitLabelOrRelType(self)
            else:
                return visitor.visitChildren(self)




    def labelOrRelType(self):

        localctx = CypherParser.LabelOrRelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_labelOrRelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(CypherParser.COLON)
            self.state = 1082
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelOrRelTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CypherParser.COLON, 0)

        def symbolicNameString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameStringContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,i)


        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.BAR)
            else:
                return self.getToken(CypherParser.BAR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_labelOrRelTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelOrRelTypes" ):
                listener.enterLabelOrRelTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelOrRelTypes" ):
                listener.exitLabelOrRelTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelOrRelTypes" ):
                return visitor.visitLabelOrRelTypes(self)
            else:
                return visitor.visitChildren(self)




    def labelOrRelTypes(self):

        localctx = CypherParser.LabelOrRelTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_labelOrRelTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(CypherParser.COLON)
            self.state = 1085
            self.symbolicNameString()
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23:
                self.state = 1086
                self.match(CypherParser.BAR)
                self.state = 1087
                self.symbolicNameString()
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapLiteral(self):
            return self.getTypedRuleContext(CypherParser.MapLiteralContext,0)


        def parameter(self):
            return self.getTypedRuleContext(CypherParser.ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties" ):
                listener.enterProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties" ):
                listener.exitProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperties" ):
                return visitor.visitProperties(self)
            else:
                return visitor.visitChildren(self)




    def properties(self):

        localctx = CypherParser.PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.state = 1093
                self.mapLiteral()
                pass
            elif token in [68]:
                self.state = 1094
                self.parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ArrowLineContext)
            else:
                return self.getTypedRuleContext(CypherParser.ArrowLineContext,i)


        def leftArrow(self):
            return self.getTypedRuleContext(CypherParser.LeftArrowContext,0)


        def LBRACKET(self):
            return self.getToken(CypherParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(CypherParser.RBRACKET, 0)

        def rightArrow(self):
            return self.getTypedRuleContext(CypherParser.RightArrowContext,0)


        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def labelExpression(self):
            return self.getTypedRuleContext(CypherParser.LabelExpressionContext,0)


        def pathLength(self):
            return self.getTypedRuleContext(CypherParser.PathLengthContext,0)


        def properties(self):
            return self.getTypedRuleContext(CypherParser.PropertiesContext,0)


        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_relationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationshipPattern" ):
                listener.enterRelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationshipPattern" ):
                listener.exitRelationshipPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationshipPattern" ):
                return visitor.visitRelationshipPattern(self)
            else:
                return visitor.visitChildren(self)




    def relationshipPattern(self):

        localctx = CypherParser.RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_relationshipPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137 or _la==273:
                self.state = 1097
                self.leftArrow()


            self.state = 1100
            self.arrowLine()
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1101
                self.match(CypherParser.LBRACKET)
                self.state = 1103
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 1102
                    self.variable()


                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37 or _la==122:
                    self.state = 1105
                    self.labelExpression()


                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==239:
                    self.state = 1108
                    self.pathLength()


                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==130:
                    self.state = 1111
                    self.properties()


                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1114
                    self.match(CypherParser.WHERE)
                    self.state = 1115
                    self.expression()


                self.state = 1118
                self.match(CypherParser.RBRACKET)


            self.state = 1121
            self.arrowLine()
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109 or _la==274:
                self.state = 1122
                self.rightArrow()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftArrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CypherParser.LT, 0)

        def ARROW_LEFT_HEAD(self):
            return self.getToken(CypherParser.ARROW_LEFT_HEAD, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_leftArrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftArrow" ):
                listener.enterLeftArrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftArrow" ):
                listener.exitLeftArrow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeftArrow" ):
                return visitor.visitLeftArrow(self)
            else:
                return visitor.visitChildren(self)




    def leftArrow(self):

        localctx = CypherParser.LeftArrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_leftArrow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            _la = self._input.LA(1)
            if not(_la==137 or _la==273):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW_LINE(self):
            return self.getToken(CypherParser.ARROW_LINE, 0)

        def MINUS(self):
            return self.getToken(CypherParser.MINUS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_arrowLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowLine" ):
                listener.enterArrowLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowLine" ):
                listener.exitArrowLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrowLine" ):
                return visitor.visitArrowLine(self)
            else:
                return visitor.visitChildren(self)




    def arrowLine(self):

        localctx = CypherParser.ArrowLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arrowLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            _la = self._input.LA(1)
            if not(_la==141 or _la==272):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightArrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(CypherParser.GT, 0)

        def ARROW_RIGHT_HEAD(self):
            return self.getToken(CypherParser.ARROW_RIGHT_HEAD, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_rightArrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightArrow" ):
                listener.enterRightArrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightArrow" ):
                listener.exitRightArrow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightArrow" ):
                return visitor.visitRightArrow(self)
            else:
                return visitor.visitChildren(self)




    def rightArrow(self):

        localctx = CypherParser.RightArrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rightArrow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            _la = self._input.LA(1)
            if not(_la==109 or _la==274):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def pathLengthLiteral(self):
            return self.getTypedRuleContext(CypherParser.PathLengthLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_pathLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathLength" ):
                listener.enterPathLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathLength" ):
                listener.exitPathLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathLength" ):
                return visitor.visitPathLength(self)
            else:
                return visitor.visitChildren(self)




    def pathLength(self):

        localctx = CypherParser.PathLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_pathLength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(CypherParser.TIMES)
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==72:
                self.state = 1132
                self.pathLengthLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathLengthLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOTDOT(self):
            return self.getToken(CypherParser.DOTDOT, 0)

        def UNSIGNED_DECIMAL_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.UNSIGNED_DECIMAL_INTEGER)
            else:
                return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, i)

        def getRuleIndex(self):
            return CypherParser.RULE_pathLengthLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathLengthLiteral" ):
                listener.enterPathLengthLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathLengthLiteral" ):
                listener.exitPathLengthLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathLengthLiteral" ):
                return visitor.visitPathLengthLiteral(self)
            else:
                return visitor.visitChildren(self)




    def pathLengthLiteral(self):

        localctx = CypherParser.PathLengthLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_pathLengthLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 1135
                    self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)


                self.state = 1138
                self.match(CypherParser.DOTDOT)
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 1139
                    self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)


                pass

            elif la_ == 2:
                self.state = 1142
                self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CypherParser.COLON, 0)

        def labelExpression4(self):
            return self.getTypedRuleContext(CypherParser.LabelExpression4Context,0)


        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def labelExpression4Is(self):
            return self.getTypedRuleContext(CypherParser.LabelExpression4IsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_labelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression" ):
                listener.enterLabelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression" ):
                listener.exitLabelExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpression" ):
                return visitor.visitLabelExpression(self)
            else:
                return visitor.visitChildren(self)




    def labelExpression(self):

        localctx = CypherParser.LabelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_labelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.state = 1145
                self.match(CypherParser.COLON)
                self.state = 1146
                self.labelExpression4()
                pass
            elif token in [122]:
                self.state = 1147
                self.match(CypherParser.IS)
                self.state = 1148
                self.labelExpression4Is()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpression4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.LabelExpression3Context)
            else:
                return self.getTypedRuleContext(CypherParser.LabelExpression3Context,i)


        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.BAR)
            else:
                return self.getToken(CypherParser.BAR, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COLON)
            else:
                return self.getToken(CypherParser.COLON, i)

        def getRuleIndex(self):
            return CypherParser.RULE_labelExpression4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression4" ):
                listener.enterLabelExpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression4" ):
                listener.exitLabelExpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpression4" ):
                return visitor.visitLabelExpression4(self)
            else:
                return visitor.visitChildren(self)




    def labelExpression4(self):

        localctx = CypherParser.LabelExpression4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_labelExpression4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.labelExpression3()
            self.state = 1160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1152
                    self.match(CypherParser.BAR)
                    self.state = 1156
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [37]:
                        self.state = 1153
                        self.match(CypherParser.COLON)
                        self.state = 1154
                        self.labelExpression3()
                        pass
                    elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                        self.state = 1155
                        self.labelExpression3()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpression4IsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression3Is(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.LabelExpression3IsContext)
            else:
                return self.getTypedRuleContext(CypherParser.LabelExpression3IsContext,i)


        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.BAR)
            else:
                return self.getToken(CypherParser.BAR, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COLON)
            else:
                return self.getToken(CypherParser.COLON, i)

        def getRuleIndex(self):
            return CypherParser.RULE_labelExpression4Is

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression4Is" ):
                listener.enterLabelExpression4Is(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression4Is" ):
                listener.exitLabelExpression4Is(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpression4Is" ):
                return visitor.visitLabelExpression4Is(self)
            else:
                return visitor.visitChildren(self)




    def labelExpression4Is(self):

        localctx = CypherParser.LabelExpression4IsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_labelExpression4Is)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.labelExpression3Is()
            self.state = 1172
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1164
                    self.match(CypherParser.BAR)
                    self.state = 1168
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [37]:
                        self.state = 1165
                        self.match(CypherParser.COLON)
                        self.state = 1166
                        self.labelExpression3Is()
                        pass
                    elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                        self.state = 1167
                        self.labelExpression3Is()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1174
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpression3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.LabelExpression2Context)
            else:
                return self.getTypedRuleContext(CypherParser.LabelExpression2Context,i)


        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AMPERSAND)
            else:
                return self.getToken(CypherParser.AMPERSAND, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COLON)
            else:
                return self.getToken(CypherParser.COLON, i)

        def getRuleIndex(self):
            return CypherParser.RULE_labelExpression3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression3" ):
                listener.enterLabelExpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression3" ):
                listener.exitLabelExpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpression3" ):
                return visitor.visitLabelExpression3(self)
            else:
                return visitor.visitChildren(self)




    def labelExpression3(self):

        localctx = CypherParser.LabelExpression3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_labelExpression3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.labelExpression2()
            self.state = 1182
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1180
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [127]:
                        self.state = 1176
                        self.match(CypherParser.AMPERSAND)
                        self.state = 1177
                        self.labelExpression2()
                        pass
                    elif token in [37]:
                        self.state = 1178
                        self.match(CypherParser.COLON)
                        self.state = 1179
                        self.labelExpression2()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1184
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpression3IsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression2Is(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.LabelExpression2IsContext)
            else:
                return self.getTypedRuleContext(CypherParser.LabelExpression2IsContext,i)


        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AMPERSAND)
            else:
                return self.getToken(CypherParser.AMPERSAND, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COLON)
            else:
                return self.getToken(CypherParser.COLON, i)

        def getRuleIndex(self):
            return CypherParser.RULE_labelExpression3Is

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression3Is" ):
                listener.enterLabelExpression3Is(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression3Is" ):
                listener.exitLabelExpression3Is(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpression3Is" ):
                return visitor.visitLabelExpression3Is(self)
            else:
                return visitor.visitChildren(self)




    def labelExpression3Is(self):

        localctx = CypherParser.LabelExpression3IsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_labelExpression3Is)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.labelExpression2Is()
            self.state = 1192
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1190
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [127]:
                        self.state = 1186
                        self.match(CypherParser.AMPERSAND)
                        self.state = 1187
                        self.labelExpression2Is()
                        pass
                    elif token in [37]:
                        self.state = 1188
                        self.match(CypherParser.COLON)
                        self.state = 1189
                        self.labelExpression2Is()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1194
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpression2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_MARK(self):
            return self.getToken(CypherParser.EXCLAMATION_MARK, 0)

        def labelExpression2(self):
            return self.getTypedRuleContext(CypherParser.LabelExpression2Context,0)


        def labelExpression1(self):
            return self.getTypedRuleContext(CypherParser.LabelExpression1Context,0)


        def getRuleIndex(self):
            return CypherParser.RULE_labelExpression2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression2" ):
                listener.enterLabelExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression2" ):
                listener.exitLabelExpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpression2" ):
                return visitor.visitLabelExpression2(self)
            else:
                return visitor.visitChildren(self)




    def labelExpression2(self):

        localctx = CypherParser.LabelExpression2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_labelExpression2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [128]:
                self.state = 1195
                self.match(CypherParser.EXCLAMATION_MARK)
                self.state = 1196
                self.labelExpression2()
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 1197
                self.labelExpression1()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpression2IsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_MARK(self):
            return self.getToken(CypherParser.EXCLAMATION_MARK, 0)

        def labelExpression2Is(self):
            return self.getTypedRuleContext(CypherParser.LabelExpression2IsContext,0)


        def labelExpression1Is(self):
            return self.getTypedRuleContext(CypherParser.LabelExpression1IsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_labelExpression2Is

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression2Is" ):
                listener.enterLabelExpression2Is(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression2Is" ):
                listener.exitLabelExpression2Is(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpression2Is" ):
                return visitor.visitLabelExpression2Is(self)
            else:
                return visitor.visitChildren(self)




    def labelExpression2Is(self):

        localctx = CypherParser.LabelExpression2IsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_labelExpression2Is)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [128]:
                self.state = 1200
                self.match(CypherParser.EXCLAMATION_MARK)
                self.state = 1201
                self.labelExpression2Is()
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 1202
                self.labelExpression1Is()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpression1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def labelExpression4(self):
            return self.getTypedRuleContext(CypherParser.LabelExpression4Context,0)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def PERCENT(self):
            return self.getToken(CypherParser.PERCENT, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_labelExpression1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression1" ):
                listener.enterLabelExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression1" ):
                listener.exitLabelExpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpression1" ):
                return visitor.visitLabelExpression1(self)
            else:
                return visitor.visitChildren(self)




    def labelExpression1(self):

        localctx = CypherParser.LabelExpression1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_labelExpression1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.state = 1205
                self.match(CypherParser.LPAREN)
                self.state = 1206
                self.labelExpression4()
                self.state = 1207
                self.match(CypherParser.RPAREN)
                pass
            elif token in [142]:
                self.state = 1209
                self.match(CypherParser.PERCENT)
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 1210
                self.symbolicNameString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpression1IsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def labelExpression4Is(self):
            return self.getTypedRuleContext(CypherParser.LabelExpression4IsContext,0)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def PERCENT(self):
            return self.getToken(CypherParser.PERCENT, 0)

        def symbolicLabelNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicLabelNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_labelExpression1Is

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression1Is" ):
                listener.enterLabelExpression1Is(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression1Is" ):
                listener.exitLabelExpression1Is(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelExpression1Is" ):
                return visitor.visitLabelExpression1Is(self)
            else:
                return visitor.visitChildren(self)




    def labelExpression1Is(self):

        localctx = CypherParser.LabelExpression1IsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_labelExpression1Is)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.state = 1213
                self.match(CypherParser.LPAREN)
                self.state = 1214
                self.labelExpression4Is()
                self.state = 1215
                self.match(CypherParser.RPAREN)
                pass
            elif token in [142]:
                self.state = 1217
                self.match(CypherParser.PERCENT)
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 1218
                self.symbolicLabelNameString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression12(self):
            return self.getTypedRuleContext(CypherParser.Expression12Context,0)


        def getRuleIndex(self):
            return CypherParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = CypherParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.expression12()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression12Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression11(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.Expression11Context)
            else:
                return self.getTypedRuleContext(CypherParser.Expression11Context,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.OR)
            else:
                return self.getToken(CypherParser.OR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_expression12

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression12" ):
                listener.enterExpression12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression12" ):
                listener.exitExpression12(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression12" ):
                return visitor.visitExpression12(self)
            else:
                return visitor.visitChildren(self)




    def expression12(self):

        localctx = CypherParser.Expression12Context(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_expression12)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.expression11()
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==161:
                self.state = 1224
                self.match(CypherParser.OR)
                self.state = 1225
                self.expression11()
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression11Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression10(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.Expression10Context)
            else:
                return self.getTypedRuleContext(CypherParser.Expression10Context,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.XOR)
            else:
                return self.getToken(CypherParser.XOR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_expression11

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression11" ):
                listener.enterExpression11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression11" ):
                listener.exitExpression11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression11" ):
                return visitor.visitExpression11(self)
            else:
                return visitor.visitChildren(self)




    def expression11(self):

        localctx = CypherParser.Expression11Context(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_expression11)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.expression10()
            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==267:
                self.state = 1232
                self.match(CypherParser.XOR)
                self.state = 1233
                self.expression10()
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression10Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression9(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.Expression9Context)
            else:
                return self.getTypedRuleContext(CypherParser.Expression9Context,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AND)
            else:
                return self.getToken(CypherParser.AND, i)

        def getRuleIndex(self):
            return CypherParser.RULE_expression10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression10" ):
                listener.enterExpression10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression10" ):
                listener.exitExpression10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression10" ):
                return visitor.visitExpression10(self)
            else:
                return visitor.visitChildren(self)




    def expression10(self):

        localctx = CypherParser.Expression10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_expression10)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.expression9()
            self.state = 1244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 1240
                self.match(CypherParser.AND)
                self.state = 1241
                self.expression9()
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression9Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def expression9(self):
            return self.getTypedRuleContext(CypherParser.Expression9Context,0)


        def expression8(self):
            return self.getTypedRuleContext(CypherParser.Expression8Context,0)


        def getRuleIndex(self):
            return CypherParser.RULE_expression9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression9" ):
                listener.enterExpression9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression9" ):
                listener.exitExpression9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression9" ):
                return visitor.visitExpression9(self)
            else:
                return visitor.visitChildren(self)




    def expression9(self):

        localctx = CypherParser.Expression9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_expression9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1247
                self.match(CypherParser.NOT)
                self.state = 1248
                self.expression9()
                pass

            elif la_ == 2:
                self.state = 1249
                self.expression8()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression8Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression7(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.Expression7Context)
            else:
                return self.getTypedRuleContext(CypherParser.Expression7Context,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.EQ)
            else:
                return self.getToken(CypherParser.EQ, i)

        def NEQ(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NEQ)
            else:
                return self.getToken(CypherParser.NEQ, i)

        def NEQ2(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NEQ2)
            else:
                return self.getToken(CypherParser.NEQ2, i)

        def LE(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.LE)
            else:
                return self.getToken(CypherParser.LE, i)

        def GE(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.GE)
            else:
                return self.getToken(CypherParser.GE, i)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.LT)
            else:
                return self.getToken(CypherParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.GT)
            else:
                return self.getToken(CypherParser.GT, i)

        def getRuleIndex(self):
            return CypherParser.RULE_expression8

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression8" ):
                listener.enterExpression8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression8" ):
                listener.exitExpression8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression8" ):
                return visitor.visitExpression8(self)
            else:
                return visitor.visitChildren(self)




    def expression8(self):

        localctx = CypherParser.Expression8Context(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expression8)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.expression7()
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 434632548421861377) != 0):
                self.state = 1267
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [86]:
                    self.state = 1253
                    self.match(CypherParser.EQ)
                    self.state = 1254
                    self.expression7()
                    pass
                elif token in [143]:
                    self.state = 1255
                    self.match(CypherParser.NEQ)
                    self.state = 1256
                    self.expression7()
                    pass
                elif token in [144]:
                    self.state = 1257
                    self.match(CypherParser.NEQ2)
                    self.state = 1258
                    self.expression7()
                    pass
                elif token in [131]:
                    self.state = 1259
                    self.match(CypherParser.LE)
                    self.state = 1260
                    self.expression7()
                    pass
                elif token in [103]:
                    self.state = 1261
                    self.match(CypherParser.GE)
                    self.state = 1262
                    self.expression7()
                    pass
                elif token in [137]:
                    self.state = 1263
                    self.match(CypherParser.LT)
                    self.state = 1264
                    self.expression7()
                    pass
                elif token in [109]:
                    self.state = 1265
                    self.match(CypherParser.GT)
                    self.state = 1266
                    self.expression7()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression7Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression6(self):
            return self.getTypedRuleContext(CypherParser.Expression6Context,0)


        def comparisonExpression6(self):
            return self.getTypedRuleContext(CypherParser.ComparisonExpression6Context,0)


        def getRuleIndex(self):
            return CypherParser.RULE_expression7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression7" ):
                listener.enterExpression7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression7" ):
                listener.exitExpression7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression7" ):
                return visitor.visitExpression7(self)
            else:
                return visitor.visitChildren(self)




    def expression7(self):

        localctx = CypherParser.Expression7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expression7)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.expression6()
            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38 or _la==46 or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 138512695297) != 0) or _la==191 or _la==228:
                self.state = 1273
                self.comparisonExpression6()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonExpression6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGEQ(self):
            return self.getToken(CypherParser.REGEQ, 0)

        def expression6(self):
            return self.getTypedRuleContext(CypherParser.Expression6Context,0)


        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def COLONCOLON(self):
            return self.getToken(CypherParser.COLONCOLON, 0)

        def cypherTypeName(self):
            return self.getTypedRuleContext(CypherParser.CypherTypeNameContext,0)


        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def TYPED(self):
            return self.getToken(CypherParser.TYPED, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_comparisonExpression6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression6" ):
                listener.enterComparisonExpression6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression6" ):
                listener.exitComparisonExpression6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpression6" ):
                return visitor.visitComparisonExpression6(self)
            else:
                return visitor.visitChildren(self)




    def comparisonExpression6(self):

        localctx = CypherParser.ComparisonExpression6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_comparisonExpression6)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [191]:
                self.state = 1276
                self.match(CypherParser.REGEQ)
                self.state = 1277
                self.expression6()
                pass
            elif token in [228]:
                self.state = 1278
                self.match(CypherParser.STARTS)
                self.state = 1279
                self.match(CypherParser.WITH)
                self.state = 1280
                self.expression6()
                pass
            elif token in [85]:
                self.state = 1281
                self.match(CypherParser.ENDS)
                self.state = 1282
                self.match(CypherParser.WITH)
                self.state = 1283
                self.expression6()
                pass
            elif token in [46]:
                self.state = 1284
                self.match(CypherParser.CONTAINS)
                self.state = 1285
                self.expression6()
                pass
            elif token in [115]:
                self.state = 1286
                self.match(CypherParser.IN)
                self.state = 1287
                self.expression6()
                pass
            elif token in [122]:
                self.state = 1288
                self.match(CypherParser.IS)
                self.state = 1298
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [154]:
                    self.state = 1289
                    self.match(CypherParser.NULL)
                    pass
                elif token in [152]:
                    self.state = 1290
                    self.match(CypherParser.NOT)
                    self.state = 1294
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [154]:
                        self.state = 1291
                        self.match(CypherParser.NULL)
                        pass
                    elif token in [38, 249]:
                        self.state = 1292
                        _la = self._input.LA(1)
                        if not(_la==38 or _la==249):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1293
                        self.cypherTypeName()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [38, 249]:
                    self.state = 1296
                    _la = self._input.LA(1)
                    if not(_la==38 or _la==249):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1297
                    self.cypherTypeName()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [38]:
                self.state = 1300
                self.match(CypherParser.COLONCOLON)
                self.state = 1301
                self.cypherTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression5(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.Expression5Context)
            else:
                return self.getTypedRuleContext(CypherParser.Expression5Context,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PLUS)
            else:
                return self.getToken(CypherParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.MINUS)
            else:
                return self.getToken(CypherParser.MINUS, i)

        def getRuleIndex(self):
            return CypherParser.RULE_expression6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression6" ):
                listener.enterExpression6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression6" ):
                listener.exitExpression6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression6" ):
                return visitor.visitExpression6(self)
            else:
                return visitor.visitChildren(self)




    def expression6(self):

        localctx = CypherParser.Expression6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_expression6)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.expression5()
            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==141 or _la==170:
                self.state = 1309
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [170]:
                    self.state = 1305
                    self.match(CypherParser.PLUS)
                    self.state = 1306
                    self.expression5()
                    pass
                elif token in [141]:
                    self.state = 1307
                    self.match(CypherParser.MINUS)
                    self.state = 1308
                    self.expression5()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.Expression4Context)
            else:
                return self.getTypedRuleContext(CypherParser.Expression4Context,i)


        def TIMES(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.TIMES)
            else:
                return self.getToken(CypherParser.TIMES, i)

        def DIVIDE(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.DIVIDE)
            else:
                return self.getToken(CypherParser.DIVIDE, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PERCENT)
            else:
                return self.getToken(CypherParser.PERCENT, i)

        def getRuleIndex(self):
            return CypherParser.RULE_expression5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression5" ):
                listener.enterExpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression5" ):
                listener.exitExpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression5" ):
                return visitor.visitExpression5(self)
            else:
                return visitor.visitChildren(self)




    def expression5(self):

        localctx = CypherParser.Expression5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_expression5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.expression4()
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==70 or _la==142 or _la==239:
                self.state = 1321
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 1315
                    self.match(CypherParser.TIMES)
                    self.state = 1316
                    self.expression4()
                    pass
                elif token in [70]:
                    self.state = 1317
                    self.match(CypherParser.DIVIDE)
                    self.state = 1318
                    self.expression4()
                    pass
                elif token in [142]:
                    self.state = 1319
                    self.match(CypherParser.PERCENT)
                    self.state = 1320
                    self.expression4()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.Expression3Context)
            else:
                return self.getTypedRuleContext(CypherParser.Expression3Context,i)


        def POW(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.POW)
            else:
                return self.getToken(CypherParser.POW, i)

        def getRuleIndex(self):
            return CypherParser.RULE_expression4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression4" ):
                listener.enterExpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression4" ):
                listener.exitExpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression4" ):
                return visitor.visitExpression4(self)
            else:
                return visitor.visitChildren(self)




    def expression4(self):

        localctx = CypherParser.Expression4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_expression4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.expression3()
            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==174:
                self.state = 1327
                self.match(CypherParser.POW)
                self.state = 1328
                self.expression3()
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression2(self):
            return self.getTypedRuleContext(CypherParser.Expression2Context,0)


        def PLUS(self):
            return self.getToken(CypherParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CypherParser.MINUS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_expression3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression3" ):
                listener.enterExpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression3" ):
                listener.exitExpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression3" ):
                return visitor.visitExpression3(self)
            else:
                return visitor.visitChildren(self)




    def expression3(self):

        localctx = CypherParser.Expression3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_expression3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1334
                self.expression2()
                pass

            elif la_ == 2:
                self.state = 1335
                self.match(CypherParser.PLUS)
                self.state = 1336
                self.expression2()
                pass

            elif la_ == 3:
                self.state = 1337
                self.match(CypherParser.MINUS)
                self.state = 1338
                self.expression2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression1(self):
            return self.getTypedRuleContext(CypherParser.Expression1Context,0)


        def postFix1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PostFix1Context)
            else:
                return self.getTypedRuleContext(CypherParser.PostFix1Context,i)


        def getRuleIndex(self):
            return CypherParser.RULE_expression2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression2" ):
                listener.enterExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression2" ):
                listener.exitExpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression2" ):
                return visitor.visitExpression2(self)
            else:
                return visitor.visitChildren(self)




    def expression2(self):

        localctx = CypherParser.Expression2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_expression2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.expression1()
            self.state = 1345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1342
                    self.postFix1() 
                self.state = 1347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostFix1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_(self):
            return self.getTypedRuleContext(CypherParser.PropertyContext,0)


        def labelExpressionPredicate(self):
            return self.getTypedRuleContext(CypherParser.LabelExpressionPredicateContext,0)


        def LBRACKET(self):
            return self.getToken(CypherParser.LBRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def RBRACKET(self):
            return self.getToken(CypherParser.RBRACKET, 0)

        def DOTDOT(self):
            return self.getToken(CypherParser.DOTDOT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_postFix1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostFix1" ):
                listener.enterPostFix1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostFix1" ):
                listener.exitPostFix1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostFix1" ):
                return visitor.visitPostFix1(self)
            else:
                return visitor.visitChildren(self)




    def postFix1(self):

        localctx = CypherParser.PostFix1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_postFix1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1348
                self.property_()
                pass

            elif la_ == 2:
                self.state = 1349
                self.labelExpressionPredicate()
                pass

            elif la_ == 3:
                self.state = 1350
                self.labelExpressionPredicate()
                pass

            elif la_ == 4:
                self.state = 1351
                self.match(CypherParser.LBRACKET)
                self.state = 1352
                self.expression()
                self.state = 1353
                self.match(CypherParser.RBRACKET)
                pass

            elif la_ == 5:
                self.state = 1355
                self.match(CypherParser.LBRACKET)
                self.state = 1357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081062920) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257023) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -4845912781469311237) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -70368748388353) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 5783551) != 0):
                    self.state = 1356
                    self.expression()


                self.state = 1359
                self.match(CypherParser.DOTDOT)
                self.state = 1361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081062920) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257023) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -4845912781469311237) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -70368748388353) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 5783551) != 0):
                    self.state = 1360
                    self.expression()


                self.state = 1363
                self.match(CypherParser.RBRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CypherParser.DOT, 0)

        def propertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.PropertyKeyNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty" ):
                return visitor.visitProperty(self)
            else:
                return visitor.visitChildren(self)




    def property_(self):

        localctx = CypherParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(CypherParser.DOT)
            self.state = 1367
            self.propertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression1(self):
            return self.getTypedRuleContext(CypherParser.Expression1Context,0)


        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PropertyContext)
            else:
                return self.getTypedRuleContext(CypherParser.PropertyContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_propertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyExpression" ):
                listener.enterPropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyExpression" ):
                listener.exitPropertyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyExpression" ):
                return visitor.visitPropertyExpression(self)
            else:
                return visitor.visitChildren(self)




    def propertyExpression(self):

        localctx = CypherParser.PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_propertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.expression1()
            self.state = 1371 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1370
                self.property_()
                self.state = 1373 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==71):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CypherParser.LiteralContext,0)


        def parameter(self):
            return self.getTypedRuleContext(CypherParser.ParameterContext,0)


        def caseExpression(self):
            return self.getTypedRuleContext(CypherParser.CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def existsExpression(self):
            return self.getTypedRuleContext(CypherParser.ExistsExpressionContext,0)


        def countExpression(self):
            return self.getTypedRuleContext(CypherParser.CountExpressionContext,0)


        def collectExpression(self):
            return self.getTypedRuleContext(CypherParser.CollectExpressionContext,0)


        def mapProjection(self):
            return self.getTypedRuleContext(CypherParser.MapProjectionContext,0)


        def listComprehension(self):
            return self.getTypedRuleContext(CypherParser.ListComprehensionContext,0)


        def patternComprehension(self):
            return self.getTypedRuleContext(CypherParser.PatternComprehensionContext,0)


        def reduceExpression(self):
            return self.getTypedRuleContext(CypherParser.ReduceExpressionContext,0)


        def allExpression(self):
            return self.getTypedRuleContext(CypherParser.AllExpressionContext,0)


        def anyExpression(self):
            return self.getTypedRuleContext(CypherParser.AnyExpressionContext,0)


        def noneExpression(self):
            return self.getTypedRuleContext(CypherParser.NoneExpressionContext,0)


        def singleExpression(self):
            return self.getTypedRuleContext(CypherParser.SingleExpressionContext,0)


        def patternExpression(self):
            return self.getTypedRuleContext(CypherParser.PatternExpressionContext,0)


        def shortestPathExpression(self):
            return self.getTypedRuleContext(CypherParser.ShortestPathExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def functionInvocation(self):
            return self.getTypedRuleContext(CypherParser.FunctionInvocationContext,0)


        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_expression1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression1" ):
                listener.enterExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression1" ):
                listener.exitExpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression1" ):
                return visitor.visitExpression1(self)
            else:
                return visitor.visitChildren(self)




    def expression1(self):

        localctx = CypherParser.Expression1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_expression1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1375
                self.literal()
                pass

            elif la_ == 2:
                self.state = 1376
                self.parameter()
                pass

            elif la_ == 3:
                self.state = 1377
                self.caseExpression()
                pass

            elif la_ == 4:
                self.state = 1378
                self.match(CypherParser.COUNT)
                self.state = 1379
                self.match(CypherParser.LPAREN)
                self.state = 1380
                self.match(CypherParser.TIMES)
                self.state = 1381
                self.match(CypherParser.RPAREN)
                pass

            elif la_ == 5:
                self.state = 1382
                self.existsExpression()
                pass

            elif la_ == 6:
                self.state = 1383
                self.countExpression()
                pass

            elif la_ == 7:
                self.state = 1384
                self.collectExpression()
                pass

            elif la_ == 8:
                self.state = 1385
                self.mapProjection()
                pass

            elif la_ == 9:
                self.state = 1386
                self.listComprehension()
                pass

            elif la_ == 10:
                self.state = 1387
                self.patternComprehension()
                pass

            elif la_ == 11:
                self.state = 1388
                self.reduceExpression()
                pass

            elif la_ == 12:
                self.state = 1389
                self.allExpression()
                pass

            elif la_ == 13:
                self.state = 1390
                self.anyExpression()
                pass

            elif la_ == 14:
                self.state = 1391
                self.noneExpression()
                pass

            elif la_ == 15:
                self.state = 1392
                self.singleExpression()
                pass

            elif la_ == 16:
                self.state = 1393
                self.patternExpression()
                pass

            elif la_ == 17:
                self.state = 1394
                self.shortestPathExpression()
                pass

            elif la_ == 18:
                self.state = 1395
                self.match(CypherParser.LPAREN)
                self.state = 1396
                self.expression()
                self.state = 1397
                self.match(CypherParser.RPAREN)
                pass

            elif la_ == 19:
                self.state = 1399
                self.functionInvocation()
                pass

            elif la_ == 20:
                self.state = 1400
                self.variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NummericLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CypherParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self):
            return self.getTypedRuleContext(CypherParser.NumberLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNummericLiteral" ):
                listener.enterNummericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNummericLiteral" ):
                listener.exitNummericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNummericLiteral" ):
                return visitor.visitNummericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CypherParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)


    class KeywordLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CypherParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INFINITY(self):
            return self.getToken(CypherParser.INFINITY, 0)
        def INF(self):
            return self.getToken(CypherParser.INF, 0)
        def NAN(self):
            return self.getToken(CypherParser.NAN, 0)
        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordLiteral" ):
                listener.enterKeywordLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordLiteral" ):
                listener.exitKeywordLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordLiteral" ):
                return visitor.visitKeywordLiteral(self)
            else:
                return visitor.visitChildren(self)


    class OtherLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CypherParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mapLiteral(self):
            return self.getTypedRuleContext(CypherParser.MapLiteralContext,0)

        def listLiteral(self):
            return self.getTypedRuleContext(CypherParser.ListLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherLiteral" ):
                listener.enterOtherLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherLiteral" ):
                listener.exitOtherLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOtherLiteral" ):
                return visitor.visitOtherLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringsLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CypherParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringLiteral(self):
            return self.getTypedRuleContext(CypherParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringsLiteral" ):
                listener.enterStringsLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringsLiteral" ):
                listener.exitStringsLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringsLiteral" ):
                return visitor.visitStringsLiteral(self)
            else:
                return visitor.visitChildren(self)



    def literal(self):

        localctx = CypherParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 1412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 141]:
                localctx = CypherParser.NummericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                self.numberLiteral()
                pass
            elif token in [276, 277]:
                localctx = CypherParser.StringsLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1404
                self.stringLiteral()
                pass
            elif token in [130]:
                localctx = CypherParser.OtherLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1405
                self.mapLiteral()
                pass
            elif token in [129]:
                localctx = CypherParser.OtherLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1406
                self.listLiteral()
                pass
            elif token in [247]:
                localctx = CypherParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1407
                self.match(CypherParser.TRUE)
                pass
            elif token in [94]:
                localctx = CypherParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1408
                self.match(CypherParser.FALSE)
                pass
            elif token in [118, 119]:
                localctx = CypherParser.KeywordLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1409
                _la = self._input.LA(1)
                if not(_la==118 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [147]:
                localctx = CypherParser.KeywordLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1410
                self.match(CypherParser.NAN)
                pass
            elif token in [154]:
                localctx = CypherParser.KeywordLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1411
                self.match(CypherParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.THEN)
            else:
                return self.getToken(CypherParser.THEN, i)

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.WHEN)
            else:
                return self.getToken(CypherParser.WHEN, i)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_caseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpression" ):
                listener.enterCaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpression" ):
                listener.exitCaseExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseExpression" ):
                return visitor.visitCaseExpression(self)
            else:
                return visitor.visitChildren(self)




    def caseExpression(self):

        localctx = CypherParser.CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_caseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.match(CypherParser.CASE)
            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1415
                self.expression()
                self.state = 1416
                self.match(CypherParser.WHEN)
                pass

            elif la_ == 2:
                self.state = 1418
                self.match(CypherParser.WHEN)
                pass


            self.state = 1421
            self.expression()
            self.state = 1422
            self.match(CypherParser.THEN)
            self.state = 1423
            self.expression()
            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==262:
                self.state = 1424
                self.match(CypherParser.WHEN)
                self.state = 1425
                self.expression()
                self.state = 1426
                self.match(CypherParser.THEN)
                self.state = 1427
                self.expression()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1434
                self.match(CypherParser.ELSE)
                self.state = 1435
                self.expression()


            self.state = 1438
            self.match(CypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(CypherParser.LBRACKET, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def listComprehensionWhereAndBar(self):
            return self.getTypedRuleContext(CypherParser.ListComprehensionWhereAndBarContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_listComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListComprehension" ):
                listener.enterListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListComprehension" ):
                listener.exitListComprehension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListComprehension" ):
                return visitor.visitListComprehension(self)
            else:
                return visitor.visitChildren(self)




    def listComprehension(self):

        localctx = CypherParser.ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_listComprehension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(CypherParser.LBRACKET)
            self.state = 1441
            self.variable()
            self.state = 1442
            self.match(CypherParser.IN)
            self.state = 1443
            self.expression()
            self.state = 1444
            self.listComprehensionWhereAndBar()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListComprehensionWhereAndBarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(CypherParser.BAR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def RBRACKET(self):
            return self.getToken(CypherParser.RBRACKET, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_listComprehensionWhereAndBar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListComprehensionWhereAndBar" ):
                listener.enterListComprehensionWhereAndBar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListComprehensionWhereAndBar" ):
                listener.exitListComprehensionWhereAndBar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListComprehensionWhereAndBar" ):
                return visitor.visitListComprehensionWhereAndBar(self)
            else:
                return visitor.visitChildren(self)




    def listComprehensionWhereAndBar(self):

        localctx = CypherParser.ListComprehensionWhereAndBarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_listComprehensionWhereAndBar)
        self._la = 0 # Token type
        try:
            self.state = 1459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1446
                    self.match(CypherParser.WHERE)
                    self.state = 1447
                    self.expression()


                self.state = 1450
                self.match(CypherParser.BAR)
                self.state = 1451
                self.expression()
                self.state = 1452
                self.match(CypherParser.RBRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1454
                    self.match(CypherParser.WHERE)
                    self.state = 1455
                    self.expression()


                self.state = 1458
                self.match(CypherParser.RBRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(CypherParser.LBRACKET, 0)

        def pathPatternNonEmpty(self):
            return self.getTypedRuleContext(CypherParser.PathPatternNonEmptyContext,0)


        def BAR(self):
            return self.getToken(CypherParser.BAR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def RBRACKET(self):
            return self.getToken(CypherParser.RBRACKET, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def EQ(self):
            return self.getToken(CypherParser.EQ, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_patternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternComprehension" ):
                listener.enterPatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternComprehension" ):
                listener.exitPatternComprehension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternComprehension" ):
                return visitor.visitPatternComprehension(self)
            else:
                return visitor.visitChildren(self)




    def patternComprehension(self):

        localctx = CypherParser.PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_patternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.match(CypherParser.LBRACKET)
            self.state = 1465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081063040) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257007) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -605739372561571377) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & -8796093548545) != 0) or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & 526335) != 0):
                self.state = 1462
                self.variable()
                self.state = 1463
                self.match(CypherParser.EQ)


            self.state = 1467
            self.pathPatternNonEmpty()
            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1468
                self.match(CypherParser.WHERE)
                self.state = 1469
                self.expression()


            self.state = 1472
            self.match(CypherParser.BAR)
            self.state = 1473
            self.expression()
            self.state = 1474
            self.match(CypherParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternComprehensionPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(CypherParser.LBRACKET, 0)

        def pathPatternNonEmpty(self):
            return self.getTypedRuleContext(CypherParser.PathPatternNonEmptyContext,0)


        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def BAR(self):
            return self.getToken(CypherParser.BAR, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def EQ(self):
            return self.getToken(CypherParser.EQ, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_patternComprehensionPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternComprehensionPrefix" ):
                listener.enterPatternComprehensionPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternComprehensionPrefix" ):
                listener.exitPatternComprehensionPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternComprehensionPrefix" ):
                return visitor.visitPatternComprehensionPrefix(self)
            else:
                return visitor.visitChildren(self)




    def patternComprehensionPrefix(self):

        localctx = CypherParser.PatternComprehensionPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_patternComprehensionPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self.match(CypherParser.LBRACKET)
            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081063040) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257007) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -605739372561571377) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & -8796093548545) != 0) or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & 526335) != 0):
                self.state = 1477
                self.variable()
                self.state = 1478
                self.match(CypherParser.EQ)


            self.state = 1482
            self.pathPatternNonEmpty()
            self.state = 1483
            _la = self._input.LA(1)
            if not(_la==23 or _la==263):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReduceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDUCE(self):
            return self.getToken(CypherParser.REDUCE, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.VariableContext)
            else:
                return self.getTypedRuleContext(CypherParser.VariableContext,i)


        def EQ(self):
            return self.getToken(CypherParser.EQ, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(CypherParser.COMMA, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def BAR(self):
            return self.getToken(CypherParser.BAR, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_reduceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReduceExpression" ):
                listener.enterReduceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReduceExpression" ):
                listener.exitReduceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReduceExpression" ):
                return visitor.visitReduceExpression(self)
            else:
                return visitor.visitChildren(self)




    def reduceExpression(self):

        localctx = CypherParser.ReduceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_reduceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(CypherParser.REDUCE)
            self.state = 1486
            self.match(CypherParser.LPAREN)
            self.state = 1487
            self.variable()
            self.state = 1488
            self.match(CypherParser.EQ)
            self.state = 1489
            self.expression()
            self.state = 1490
            self.match(CypherParser.COMMA)
            self.state = 1491
            self.variable()
            self.state = 1492
            self.match(CypherParser.IN)
            self.state = 1493
            self.expression()
            self.state = 1494
            self.match(CypherParser.BAR)
            self.state = 1495
            self.expression()
            self.state = 1496
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_allExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllExpression" ):
                listener.enterAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllExpression" ):
                listener.exitAllExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllExpression" ):
                return visitor.visitAllExpression(self)
            else:
                return visitor.visitChildren(self)




    def allExpression(self):

        localctx = CypherParser.AllExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_allExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self.match(CypherParser.ALL)
            self.state = 1499
            self.match(CypherParser.LPAREN)
            self.state = 1500
            self.variable()
            self.state = 1501
            self.match(CypherParser.IN)
            self.state = 1502
            self.expression()
            self.state = 1505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1503
                self.match(CypherParser.WHERE)
                self.state = 1504
                self.expression()


            self.state = 1507
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_anyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyExpression" ):
                listener.enterAnyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyExpression" ):
                listener.exitAnyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyExpression" ):
                return visitor.visitAnyExpression(self)
            else:
                return visitor.visitChildren(self)




    def anyExpression(self):

        localctx = CypherParser.AnyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_anyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(CypherParser.ANY)
            self.state = 1510
            self.match(CypherParser.LPAREN)
            self.state = 1511
            self.variable()
            self.state = 1512
            self.match(CypherParser.IN)
            self.state = 1513
            self.expression()
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1514
                self.match(CypherParser.WHERE)
                self.state = 1515
                self.expression()


            self.state = 1518
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoneExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_noneExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoneExpression" ):
                listener.enterNoneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoneExpression" ):
                listener.exitNoneExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoneExpression" ):
                return visitor.visitNoneExpression(self)
            else:
                return visitor.visitChildren(self)




    def noneExpression(self):

        localctx = CypherParser.NoneExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_noneExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(CypherParser.NONE)
            self.state = 1521
            self.match(CypherParser.LPAREN)
            self.state = 1522
            self.variable()
            self.state = 1523
            self.match(CypherParser.IN)
            self.state = 1524
            self.expression()
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1525
                self.match(CypherParser.WHERE)
                self.state = 1526
                self.expression()


            self.state = 1529
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = CypherParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_singleExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.match(CypherParser.SINGLE)
            self.state = 1532
            self.match(CypherParser.LPAREN)
            self.state = 1533
            self.variable()
            self.state = 1534
            self.match(CypherParser.IN)
            self.state = 1535
            self.expression()
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1536
                self.match(CypherParser.WHERE)
                self.state = 1537
                self.expression()


            self.state = 1540
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPatternNonEmpty(self):
            return self.getTypedRuleContext(CypherParser.PathPatternNonEmptyContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_patternExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternExpression" ):
                listener.enterPatternExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternExpression" ):
                listener.exitPatternExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternExpression" ):
                return visitor.visitPatternExpression(self)
            else:
                return visitor.visitChildren(self)




    def patternExpression(self):

        localctx = CypherParser.PatternExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_patternExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.pathPatternNonEmpty()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathPattern(self):
            return self.getTypedRuleContext(CypherParser.ShortestPathPatternContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_shortestPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathExpression" ):
                listener.enterShortestPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathExpression" ):
                listener.exitShortestPathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortestPathExpression" ):
                return visitor.visitShortestPathExpression(self)
            else:
                return visitor.visitChildren(self)




    def shortestPathExpression(self):

        localctx = CypherParser.ShortestPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_shortestPathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self.shortestPathPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapProjectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def LCURLY(self):
            return self.getToken(CypherParser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(CypherParser.RCURLY, 0)

        def mapProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.MapProjectionItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.MapProjectionItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_mapProjection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapProjection" ):
                listener.enterMapProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapProjection" ):
                listener.exitMapProjection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapProjection" ):
                return visitor.visitMapProjection(self)
            else:
                return visitor.visitChildren(self)




    def mapProjection(self):

        localctx = CypherParser.MapProjectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_mapProjection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.variable()
            self.state = 1547
            self.match(CypherParser.LCURLY)
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081063040) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257135) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -605739372561571377) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & -8796093548545) != 0) or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & 526335) != 0):
                self.state = 1548
                self.mapProjectionItem()


            self.state = 1555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1551
                self.match(CypherParser.COMMA)
                self.state = 1552
                self.mapProjectionItem()
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1558
            self.match(CypherParser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.PropertyKeyNameContext,0)


        def COLON(self):
            return self.getToken(CypherParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def DOT(self):
            return self.getToken(CypherParser.DOT, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_mapProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapProjectionItem" ):
                listener.enterMapProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapProjectionItem" ):
                listener.exitMapProjectionItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapProjectionItem" ):
                return visitor.visitMapProjectionItem(self)
            else:
                return visitor.visitChildren(self)




    def mapProjectionItem(self):

        localctx = CypherParser.MapProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_mapProjectionItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1560
                self.propertyKeyName()
                self.state = 1561
                self.match(CypherParser.COLON)
                self.state = 1562
                self.expression()
                pass

            elif la_ == 2:
                self.state = 1564
                self.match(CypherParser.DOT)
                self.state = 1565
                self.propertyKeyName()
                pass

            elif la_ == 3:
                self.state = 1566
                self.variable()
                pass

            elif la_ == 4:
                self.state = 1567
                self.match(CypherParser.DOT)
                self.state = 1568
                self.match(CypherParser.TIMES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def LCURLY(self):
            return self.getToken(CypherParser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(CypherParser.RCURLY, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(CypherParser.RegularQueryContext,0)


        def patternList(self):
            return self.getTypedRuleContext(CypherParser.PatternListContext,0)


        def matchMode(self):
            return self.getTypedRuleContext(CypherParser.MatchModeContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_existsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpression" ):
                listener.enterExistsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpression" ):
                listener.exitExistsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistsExpression" ):
                return visitor.visitExistsExpression(self)
            else:
                return visitor.visitChildren(self)




    def existsExpression(self):

        localctx = CypherParser.ExistsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_existsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self.match(CypherParser.EXISTS)
            self.state = 1572
            self.match(CypherParser.LCURLY)
            self.state = 1581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1573
                self.regularQuery()
                pass

            elif la_ == 2:
                self.state = 1575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1574
                    self.matchMode()


                self.state = 1577
                self.patternList()
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1578
                    self.whereClause()


                pass


            self.state = 1583
            self.match(CypherParser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def LCURLY(self):
            return self.getToken(CypherParser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(CypherParser.RCURLY, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(CypherParser.RegularQueryContext,0)


        def patternList(self):
            return self.getTypedRuleContext(CypherParser.PatternListContext,0)


        def matchMode(self):
            return self.getTypedRuleContext(CypherParser.MatchModeContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_countExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountExpression" ):
                listener.enterCountExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountExpression" ):
                listener.exitCountExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCountExpression" ):
                return visitor.visitCountExpression(self)
            else:
                return visitor.visitChildren(self)




    def countExpression(self):

        localctx = CypherParser.CountExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_countExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(CypherParser.COUNT)
            self.state = 1586
            self.match(CypherParser.LCURLY)
            self.state = 1595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1587
                self.regularQuery()
                pass

            elif la_ == 2:
                self.state = 1589
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1588
                    self.matchMode()


                self.state = 1591
                self.patternList()
                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1592
                    self.whereClause()


                pass


            self.state = 1597
            self.match(CypherParser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLECT(self):
            return self.getToken(CypherParser.COLLECT, 0)

        def LCURLY(self):
            return self.getToken(CypherParser.LCURLY, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(CypherParser.RegularQueryContext,0)


        def RCURLY(self):
            return self.getToken(CypherParser.RCURLY, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_collectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectExpression" ):
                listener.enterCollectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectExpression" ):
                listener.exitCollectExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectExpression" ):
                return visitor.visitCollectExpression(self)
            else:
                return visitor.visitChildren(self)




    def collectExpression(self):

        localctx = CypherParser.CollectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_collectExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.match(CypherParser.COLLECT)
            self.state = 1600
            self.match(CypherParser.LCURLY)
            self.state = 1601
            self.regularQuery()
            self.state = 1602
            self.match(CypherParser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringToken(self):
            return self.getTypedRuleContext(CypherParser.StringTokenContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = CypherParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.stringToken()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_DOUBLE(self):
            return self.getToken(CypherParser.DECIMAL_DOUBLE, 0)

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def UNSIGNED_HEX_INTEGER(self):
            return self.getToken(CypherParser.UNSIGNED_HEX_INTEGER, 0)

        def UNSIGNED_OCTAL_INTEGER(self):
            return self.getToken(CypherParser.UNSIGNED_OCTAL_INTEGER, 0)

        def MINUS(self):
            return self.getToken(CypherParser.MINUS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = CypherParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141:
                self.state = 1606
                self.match(CypherParser.MINUS)


            self.state = 1609
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedIntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def MINUS(self):
            return self.getToken(CypherParser.MINUS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_signedIntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedIntegerLiteral" ):
                listener.enterSignedIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedIntegerLiteral" ):
                listener.exitSignedIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignedIntegerLiteral" ):
                return visitor.visitSignedIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def signedIntegerLiteral(self):

        localctx = CypherParser.SignedIntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_signedIntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141:
                self.state = 1611
                self.match(CypherParser.MINUS)


            self.state = 1614
            self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(CypherParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(CypherParser.RBRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_listLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLiteral" ):
                listener.enterListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLiteral" ):
                listener.exitListLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLiteral" ):
                return visitor.visitListLiteral(self)
            else:
                return visitor.visitChildren(self)




    def listLiteral(self):

        localctx = CypherParser.ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_listLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.match(CypherParser.LBRACKET)
            self.state = 1618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081062920) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257023) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -4845912781469311237) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -70368748388353) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 5783551) != 0):
                self.state = 1617
                self.expression()


            self.state = 1624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1620
                self.match(CypherParser.COMMA)
                self.state = 1621
                self.expression()
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1627
            self.match(CypherParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(CypherParser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(CypherParser.RCURLY, 0)

        def propertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.PropertyKeyNameContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COLON)
            else:
                return self.getToken(CypherParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_mapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapLiteral" ):
                listener.enterMapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapLiteral" ):
                listener.exitMapLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapLiteral" ):
                return visitor.visitMapLiteral(self)
            else:
                return visitor.visitChildren(self)




    def mapLiteral(self):

        localctx = CypherParser.MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_mapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.match(CypherParser.LCURLY)
            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081063040) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257007) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -605739372561571377) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & -8796093548545) != 0) or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & 526335) != 0):
                self.state = 1630
                self.propertyKeyName()
                self.state = 1631
                self.match(CypherParser.COLON)
                self.state = 1632
                self.expression()


            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1636
                self.match(CypherParser.COMMA)
                self.state = 1637
                self.propertyKeyName()
                self.state = 1638
                self.match(CypherParser.COLON)
                self.state = 1639
                self.expression()
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1646
            self.match(CypherParser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_propertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyKeyName" ):
                listener.enterPropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyKeyName" ):
                listener.exitPropertyKeyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyKeyName" ):
                return visitor.visitPropertyKeyName(self)
            else:
                return visitor.visitChildren(self)




    def propertyKeyName(self):

        localctx = CypherParser.PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_propertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR(self):
            return self.getToken(CypherParser.DOLLAR, 0)

        def parameterName(self):
            return self.getTypedRuleContext(CypherParser.ParameterNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = CypherParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.match(CypherParser.DOLLAR)
            self.state = 1651
            self.parameterName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterName" ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterName" ):
                listener.exitParameterName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterName" ):
                return visitor.visitParameterName(self)
            else:
                return visitor.visitChildren(self)




    def parameterName(self):

        localctx = CypherParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_parameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 1653
                self.variable()
                pass
            elif token in [4]:
                self.state = 1654
                self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionName(self):
            return self.getTypedRuleContext(CypherParser.FunctionNameContext,0)


        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def functionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.FunctionArgumentContext)
            else:
                return self.getTypedRuleContext(CypherParser.FunctionArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_functionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionInvocation" ):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionInvocation" ):
                listener.exitFunctionInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionInvocation" ):
                return visitor.visitFunctionInvocation(self)
            else:
                return visitor.visitChildren(self)




    def functionInvocation(self):

        localctx = CypherParser.FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_functionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.functionName()
            self.state = 1658
            self.match(CypherParser.LPAREN)
            self.state = 1660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1659
                self.match(CypherParser.DISTINCT)


            self.state = 1663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081062920) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257023) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -4845912781469311237) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -70368748388353) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 5783551) != 0):
                self.state = 1662
                self.functionArgument()


            self.state = 1669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1665
                self.match(CypherParser.COMMA)
                self.state = 1666
                self.functionArgument()
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1672
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace(self):
            return self.getTypedRuleContext(CypherParser.NamespaceContext,0)


        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = CypherParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_functionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.namespace()
            self.state = 1675
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_functionArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgument" ):
                listener.enterFunctionArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgument" ):
                listener.exitFunctionArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgument" ):
                return visitor.visitFunctionArgument(self)
            else:
                return visitor.visitChildren(self)




    def functionArgument(self):

        localctx = CypherParser.FunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_functionArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameStringContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.DOT)
            else:
                return self.getToken(CypherParser.DOT, i)

        def getRuleIndex(self):
            return CypherParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace" ):
                return visitor.visitNamespace(self)
            else:
                return visitor.visitChildren(self)




    def namespace(self):

        localctx = CypherParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1679
                    self.symbolicNameString()
                    self.state = 1680
                    self.match(CypherParser.DOT) 
                self.state = 1686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableList1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameStringContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_variableList1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableList1" ):
                listener.enterVariableList1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableList1" ):
                listener.exitVariableList1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableList1" ):
                return visitor.visitVariableList1(self)
            else:
                return visitor.visitChildren(self)




    def variableList1(self):

        localctx = CypherParser.VariableList1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_variableList1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.symbolicNameString()
            self.state = 1692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1688
                self.match(CypherParser.COMMA)
                self.state = 1689
                self.symbolicNameString()
                self.state = 1694
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = CypherParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicNameList1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameStringContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_symbolicNameList1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicNameList1" ):
                listener.enterSymbolicNameList1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicNameList1" ):
                listener.exitSymbolicNameList1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicNameList1" ):
                return visitor.visitSymbolicNameList1(self)
            else:
                return visitor.visitChildren(self)




    def symbolicNameList1(self):

        localctx = CypherParser.SymbolicNameList1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_symbolicNameList1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.symbolicNameString()
            self.state = 1702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1698
                self.match(CypherParser.COMMA)
                self.state = 1699
                self.symbolicNameString()
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def createRole(self):
            return self.getTypedRuleContext(CypherParser.CreateRoleContext,0)


        def createUser(self):
            return self.getTypedRuleContext(CypherParser.CreateUserContext,0)


        def createDatabase(self):
            return self.getTypedRuleContext(CypherParser.CreateDatabaseContext,0)


        def createConstraint(self):
            return self.getTypedRuleContext(CypherParser.CreateConstraintContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(CypherParser.CreateIndexContext,0)


        def createAlias(self):
            return self.getTypedRuleContext(CypherParser.CreateAliasContext,0)


        def createCompositeDatabase(self):
            return self.getTypedRuleContext(CypherParser.CreateCompositeDatabaseContext,0)


        def OR(self):
            return self.getToken(CypherParser.OR, 0)

        def REPLACE(self):
            return self.getToken(CypherParser.REPLACE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_createCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateCommand" ):
                listener.enterCreateCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateCommand" ):
                listener.exitCreateCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateCommand" ):
                return visitor.visitCreateCommand(self)
            else:
                return visitor.visitChildren(self)




    def createCommand(self):

        localctx = CypherParser.CreateCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_createCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.match(CypherParser.CREATE)
            self.state = 1708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==161:
                self.state = 1706
                self.match(CypherParser.OR)
                self.state = 1707
                self.match(CypherParser.REPLACE)


            self.state = 1717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [203]:
                self.state = 1710
                self.createRole()
                pass
            elif token in [256]:
                self.state = 1711
                self.createUser()
                pass
            elif token in [54]:
                self.state = 1712
                self.createDatabase()
                pass
            elif token in [44]:
                self.state = 1713
                self.createConstraint()
                pass
            elif token in [30, 100, 116, 135, 172, 184, 236]:
                self.state = 1714
                self.createIndex()
                pass
            elif token in [11]:
                self.state = 1715
                self.createAlias()
                pass
            elif token in [43]:
                self.state = 1716
                self.createCompositeDatabase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commandWithUseGraph(self):
            return self.getTypedRuleContext(CypherParser.CommandWithUseGraphContext,0)


        def showCommand(self):
            return self.getTypedRuleContext(CypherParser.ShowCommandContext,0)


        def terminateCommand(self):
            return self.getTypedRuleContext(CypherParser.TerminateCommandContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommand" ):
                listener.enterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommand" ):
                listener.exitCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommand" ):
                return visitor.visitCommand(self)
            else:
                return visitor.visitChildren(self)




    def command(self):

        localctx = CypherParser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 59, 63, 74, 75, 79, 104, 188, 190, 202, 227, 230]:
                self.state = 1719
                self.commandWithUseGraph()
                pass
            elif token in [223]:
                self.state = 1720
                self.showCommand()
                pass
            elif token in [235]:
                self.state = 1721
                self.terminateCommand()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandWithUseGraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dropCommand(self):
            return self.getTypedRuleContext(CypherParser.DropCommandContext,0)


        def alterCommand(self):
            return self.getTypedRuleContext(CypherParser.AlterCommandContext,0)


        def renameCommand(self):
            return self.getTypedRuleContext(CypherParser.RenameCommandContext,0)


        def denyPrivilege(self):
            return self.getTypedRuleContext(CypherParser.DenyPrivilegeContext,0)


        def revokeCommand(self):
            return self.getTypedRuleContext(CypherParser.RevokeCommandContext,0)


        def grantCommand(self):
            return self.getTypedRuleContext(CypherParser.GrantCommandContext,0)


        def startDatabase(self):
            return self.getTypedRuleContext(CypherParser.StartDatabaseContext,0)


        def stopDatabase(self):
            return self.getTypedRuleContext(CypherParser.StopDatabaseContext,0)


        def enableServerCommand(self):
            return self.getTypedRuleContext(CypherParser.EnableServerCommandContext,0)


        def allocationCommand(self):
            return self.getTypedRuleContext(CypherParser.AllocationCommandContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_commandWithUseGraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommandWithUseGraph" ):
                listener.enterCommandWithUseGraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommandWithUseGraph" ):
                listener.exitCommandWithUseGraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommandWithUseGraph" ):
                return visitor.visitCommandWithUseGraph(self)
            else:
                return visitor.visitChildren(self)




    def commandWithUseGraph(self):

        localctx = CypherParser.CommandWithUseGraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_commandWithUseGraph)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.state = 1724
                self.dropCommand()
                pass
            elif token in [15]:
                self.state = 1725
                self.alterCommand()
                pass
            elif token in [190]:
                self.state = 1726
                self.renameCommand()
                pass
            elif token in [63]:
                self.state = 1727
                self.denyPrivilege()
                pass
            elif token in [202]:
                self.state = 1728
                self.revokeCommand()
                pass
            elif token in [104]:
                self.state = 1729
                self.grantCommand()
                pass
            elif token in [227]:
                self.state = 1730
                self.startDatabase()
                pass
            elif token in [230]:
                self.state = 1731
                self.stopDatabase()
                pass
            elif token in [79]:
                self.state = 1732
                self.enableServerCommand()
                pass
            elif token in [59, 75, 188]:
                self.state = 1733
                self.allocationCommand()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def dropRole(self):
            return self.getTypedRuleContext(CypherParser.DropRoleContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(CypherParser.DropUserContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(CypherParser.DropDatabaseContext,0)


        def dropConstraint(self):
            return self.getTypedRuleContext(CypherParser.DropConstraintContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(CypherParser.DropIndexContext,0)


        def dropAlias(self):
            return self.getTypedRuleContext(CypherParser.DropAliasContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(CypherParser.DropServerContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_dropCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropCommand" ):
                listener.enterDropCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropCommand" ):
                listener.exitDropCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropCommand" ):
                return visitor.visitDropCommand(self)
            else:
                return visitor.visitChildren(self)




    def dropCommand(self):

        localctx = CypherParser.DropCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_dropCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.match(CypherParser.DROP)
            self.state = 1744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [203]:
                self.state = 1737
                self.dropRole()
                pass
            elif token in [256]:
                self.state = 1738
                self.dropUser()
                pass
            elif token in [43, 54]:
                self.state = 1739
                self.dropDatabase()
                pass
            elif token in [44]:
                self.state = 1740
                self.dropConstraint()
                pass
            elif token in [116]:
                self.state = 1741
                self.dropIndex()
                pass
            elif token in [11]:
                self.state = 1742
                self.dropAlias()
                pass
            elif token in [216]:
                self.state = 1743
                self.dropServer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(CypherParser.ALTER, 0)

        def alterDatabase(self):
            return self.getTypedRuleContext(CypherParser.AlterDatabaseContext,0)


        def alterAlias(self):
            return self.getTypedRuleContext(CypherParser.AlterAliasContext,0)


        def alterCurrentUser(self):
            return self.getTypedRuleContext(CypherParser.AlterCurrentUserContext,0)


        def alterUser(self):
            return self.getTypedRuleContext(CypherParser.AlterUserContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(CypherParser.AlterServerContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_alterCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommand" ):
                listener.enterAlterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommand" ):
                listener.exitAlterCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterCommand" ):
                return visitor.visitAlterCommand(self)
            else:
                return visitor.visitChildren(self)




    def alterCommand(self):

        localctx = CypherParser.AlterCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_alterCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746
            self.match(CypherParser.ALTER)
            self.state = 1752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.state = 1747
                self.alterDatabase()
                pass
            elif token in [11]:
                self.state = 1748
                self.alterAlias()
                pass
            elif token in [52]:
                self.state = 1749
                self.alterCurrentUser()
                pass
            elif token in [256]:
                self.state = 1750
                self.alterUser()
                pass
            elif token in [216]:
                self.state = 1751
                self.alterServer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(CypherParser.SHOW, 0)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def showAllCommand(self):
            return self.getTypedRuleContext(CypherParser.ShowAllCommandContext,0)


        def POPULATED(self):
            return self.getToken(CypherParser.POPULATED, 0)

        def showRoles(self):
            return self.getTypedRuleContext(CypherParser.ShowRolesContext,0)


        def BTREE(self):
            return self.getToken(CypherParser.BTREE, 0)

        def showIndexesAllowBrief(self):
            return self.getTypedRuleContext(CypherParser.ShowIndexesAllowBriefContext,0)


        def RANGE(self):
            return self.getToken(CypherParser.RANGE, 0)

        def showIndexesNoBrief(self):
            return self.getTypedRuleContext(CypherParser.ShowIndexesNoBriefContext,0)


        def FULLTEXT(self):
            return self.getToken(CypherParser.FULLTEXT, 0)

        def TEXT(self):
            return self.getToken(CypherParser.TEXT, 0)

        def POINT(self):
            return self.getToken(CypherParser.POINT, 0)

        def LOOKUP(self):
            return self.getToken(CypherParser.LOOKUP, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def showConstraintsAllowBriefAndYield(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowBriefAndYieldContext,0)


        def UNIQUENESS(self):
            return self.getToken(CypherParser.UNIQUENESS, 0)

        def showConstraintsAllowYield(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowYieldContext,0)


        def KEY(self):
            return self.getToken(CypherParser.KEY, 0)

        def NODE(self):
            return self.getToken(CypherParser.NODE, 0)

        def showNodeCommand(self):
            return self.getTypedRuleContext(CypherParser.ShowNodeCommandContext,0)


        def PROPERTY(self):
            return self.getToken(CypherParser.PROPERTY, 0)

        def showPropertyCommand(self):
            return self.getTypedRuleContext(CypherParser.ShowPropertyCommandContext,0)


        def EXISTENCE(self):
            return self.getToken(CypherParser.EXISTENCE, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def showConstraintsAllowBrief(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowBriefContext,0)


        def EXIST(self):
            return self.getToken(CypherParser.EXIST, 0)

        def RELATIONSHIP(self):
            return self.getToken(CypherParser.RELATIONSHIP, 0)

        def showRelationshipCommand(self):
            return self.getTypedRuleContext(CypherParser.ShowRelationshipCommandContext,0)


        def REL(self):
            return self.getToken(CypherParser.REL, 0)

        def showRelCommand(self):
            return self.getTypedRuleContext(CypherParser.ShowRelCommandContext,0)


        def BUILT(self):
            return self.getToken(CypherParser.BUILT, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def showFunctions(self):
            return self.getTypedRuleContext(CypherParser.ShowFunctionsContext,0)


        def showDatabase(self):
            return self.getTypedRuleContext(CypherParser.ShowDatabaseContext,0)


        def showCurrentUser(self):
            return self.getTypedRuleContext(CypherParser.ShowCurrentUserContext,0)


        def showProcedures(self):
            return self.getTypedRuleContext(CypherParser.ShowProceduresContext,0)


        def showSettings(self):
            return self.getTypedRuleContext(CypherParser.ShowSettingsContext,0)


        def showTransactions(self):
            return self.getTypedRuleContext(CypherParser.ShowTransactionsContext,0)


        def showAliases(self):
            return self.getTypedRuleContext(CypherParser.ShowAliasesContext,0)


        def showServers(self):
            return self.getTypedRuleContext(CypherParser.ShowServersContext,0)


        def showPrivileges(self):
            return self.getTypedRuleContext(CypherParser.ShowPrivilegesContext,0)


        def showSupportedPrivileges(self):
            return self.getTypedRuleContext(CypherParser.ShowSupportedPrivilegesContext,0)


        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def DEFINED(self):
            return self.getToken(CypherParser.DEFINED, 0)

        def ROLES(self):
            return self.getToken(CypherParser.ROLES, 0)

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def USERS(self):
            return self.getToken(CypherParser.USERS, 0)

        def showRolePrivileges(self):
            return self.getTypedRuleContext(CypherParser.ShowRolePrivilegesContext,0)


        def showUserPrivileges(self):
            return self.getTypedRuleContext(CypherParser.ShowUserPrivilegesContext,0)


        def showUsers(self):
            return self.getTypedRuleContext(CypherParser.ShowUsersContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommand" ):
                listener.enterShowCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommand" ):
                listener.exitShowCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCommand" ):
                return visitor.visitShowCommand(self)
            else:
                return visitor.visitChildren(self)




    def showCommand(self):

        localctx = CypherParser.ShowCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_showCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(CypherParser.SHOW)
            self.state = 1822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1755
                self.match(CypherParser.ALL)
                self.state = 1756
                self.showAllCommand()
                pass

            elif la_ == 2:
                self.state = 1757
                self.match(CypherParser.POPULATED)
                self.state = 1758
                _la = self._input.LA(1)
                if not(_la==203 or _la==204):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1759
                self.showRoles()
                pass

            elif la_ == 3:
                self.state = 1760
                self.match(CypherParser.BTREE)
                self.state = 1761
                self.showIndexesAllowBrief()
                pass

            elif la_ == 4:
                self.state = 1762
                self.match(CypherParser.RANGE)
                self.state = 1763
                self.showIndexesNoBrief()
                pass

            elif la_ == 5:
                self.state = 1764
                self.match(CypherParser.FULLTEXT)
                self.state = 1765
                self.showIndexesNoBrief()
                pass

            elif la_ == 6:
                self.state = 1766
                self.match(CypherParser.TEXT)
                self.state = 1767
                self.showIndexesNoBrief()
                pass

            elif la_ == 7:
                self.state = 1768
                self.match(CypherParser.POINT)
                self.state = 1769
                self.showIndexesNoBrief()
                pass

            elif la_ == 8:
                self.state = 1770
                self.match(CypherParser.LOOKUP)
                self.state = 1771
                self.showIndexesNoBrief()
                pass

            elif la_ == 9:
                self.state = 1772
                self.match(CypherParser.UNIQUE)
                self.state = 1773
                self.showConstraintsAllowBriefAndYield()
                pass

            elif la_ == 10:
                self.state = 1774
                self.match(CypherParser.UNIQUENESS)
                self.state = 1775
                self.showConstraintsAllowYield()
                pass

            elif la_ == 11:
                self.state = 1776
                self.match(CypherParser.KEY)
                self.state = 1777
                self.showConstraintsAllowYield()
                pass

            elif la_ == 12:
                self.state = 1778
                self.match(CypherParser.NODE)
                self.state = 1779
                self.showNodeCommand()
                pass

            elif la_ == 13:
                self.state = 1780
                self.match(CypherParser.PROPERTY)
                self.state = 1781
                self.showPropertyCommand()
                pass

            elif la_ == 14:
                self.state = 1782
                self.match(CypherParser.EXISTENCE)
                self.state = 1783
                self.showConstraintsAllowYield()
                pass

            elif la_ == 15:
                self.state = 1784
                self.match(CypherParser.EXISTS)
                self.state = 1785
                self.showConstraintsAllowBrief()
                pass

            elif la_ == 16:
                self.state = 1786
                self.match(CypherParser.EXIST)
                self.state = 1787
                self.showConstraintsAllowBriefAndYield()
                pass

            elif la_ == 17:
                self.state = 1788
                self.match(CypherParser.RELATIONSHIP)
                self.state = 1789
                self.showRelationshipCommand()
                pass

            elif la_ == 18:
                self.state = 1790
                self.match(CypherParser.REL)
                self.state = 1791
                self.showRelCommand()
                pass

            elif la_ == 19:
                self.state = 1792
                self.match(CypherParser.BUILT)
                self.state = 1793
                self.match(CypherParser.IN)
                self.state = 1794
                self.showFunctions()
                pass

            elif la_ == 20:
                self.state = 1795
                self.showIndexesAllowBrief()
                pass

            elif la_ == 21:
                self.state = 1796
                self.showDatabase()
                pass

            elif la_ == 22:
                self.state = 1797
                self.showCurrentUser()
                pass

            elif la_ == 23:
                self.state = 1798
                self.showConstraintsAllowBriefAndYield()
                pass

            elif la_ == 24:
                self.state = 1799
                self.showProcedures()
                pass

            elif la_ == 25:
                self.state = 1800
                self.showSettings()
                pass

            elif la_ == 26:
                self.state = 1801
                self.showFunctions()
                pass

            elif la_ == 27:
                self.state = 1802
                self.showTransactions()
                pass

            elif la_ == 28:
                self.state = 1803
                self.showAliases()
                pass

            elif la_ == 29:
                self.state = 1804
                self.showServers()
                pass

            elif la_ == 30:
                self.state = 1805
                self.showPrivileges()
                pass

            elif la_ == 31:
                self.state = 1806
                self.showSupportedPrivileges()
                pass

            elif la_ == 32:
                self.state = 1807
                _la = self._input.LA(1)
                if not(_la==203 or _la==204):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1808
                    self.showRolePrivileges()
                    pass

                elif la_ == 2:
                    self.state = 1809
                    self.showRoles()
                    pass

                elif la_ == 3:
                    self.state = 1810
                    self.showRolePrivileges()
                    pass


                pass

            elif la_ == 33:
                self.state = 1813
                self.match(CypherParser.USER)
                self.state = 1814
                self.match(CypherParser.DEFINED)
                self.state = 1815
                self.showFunctions()
                pass

            elif la_ == 34:
                self.state = 1816
                _la = self._input.LA(1)
                if not(_la==256 or _la==257):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1817
                    self.showUserPrivileges()
                    pass

                elif la_ == 2:
                    self.state = 1818
                    self.showUsers()
                    pass

                elif la_ == 3:
                    self.state = 1819
                    self.showUserPrivileges()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminateCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINATE(self):
            return self.getToken(CypherParser.TERMINATE, 0)

        def terminateTransactions(self):
            return self.getTypedRuleContext(CypherParser.TerminateTransactionsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_terminateCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminateCommand" ):
                listener.enterTerminateCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminateCommand" ):
                listener.exitTerminateCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerminateCommand" ):
                return visitor.visitTerminateCommand(self)
            else:
                return visitor.visitChildren(self)




    def terminateCommand(self):

        localctx = CypherParser.TerminateCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_terminateCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(CypherParser.TERMINATE)
            self.state = 1825
            self.terminateTransactions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowAllCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def showRoles(self):
            return self.getTypedRuleContext(CypherParser.ShowRolesContext,0)


        def showIndexesAllowBrief(self):
            return self.getTypedRuleContext(CypherParser.ShowIndexesAllowBriefContext,0)


        def showConstraintsAllowBriefAndYield(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowBriefAndYieldContext,0)


        def showFunctions(self):
            return self.getTypedRuleContext(CypherParser.ShowFunctionsContext,0)


        def showPrivileges(self):
            return self.getTypedRuleContext(CypherParser.ShowPrivilegesContext,0)


        def ROLES(self):
            return self.getToken(CypherParser.ROLES, 0)

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_showAllCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowAllCommand" ):
                listener.enterShowAllCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowAllCommand" ):
                listener.exitShowAllCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowAllCommand" ):
                return visitor.visitShowAllCommand(self)
            else:
                return visitor.visitChildren(self)




    def showAllCommand(self):

        localctx = CypherParser.ShowAllCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_showAllCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [203, 204]:
                self.state = 1827
                _la = self._input.LA(1)
                if not(_la==203 or _la==204):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1828
                self.showRoles()
                pass
            elif token in [116, 117]:
                self.state = 1829
                self.showIndexesAllowBrief()
                pass
            elif token in [44, 45]:
                self.state = 1830
                self.showConstraintsAllowBriefAndYield()
                pass
            elif token in [101, 102]:
                self.state = 1831
                self.showFunctions()
                pass
            elif token in [177, 178]:
                self.state = 1832
                self.showPrivileges()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowNodeCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def showConstraintsAllowYield(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowYieldContext,0)


        def KEY(self):
            return self.getToken(CypherParser.KEY, 0)

        def showConstraintsAllowBriefAndYield(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowBriefAndYieldContext,0)


        def PROPERTY(self):
            return self.getToken(CypherParser.PROPERTY, 0)

        def showPropertyCommand(self):
            return self.getTypedRuleContext(CypherParser.ShowPropertyCommandContext,0)


        def EXISTENCE(self):
            return self.getToken(CypherParser.EXISTENCE, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def showConstraintsAllowBrief(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowBriefContext,0)


        def EXIST(self):
            return self.getToken(CypherParser.EXIST, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def UNIQUENESS(self):
            return self.getToken(CypherParser.UNIQUENESS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_showNodeCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowNodeCommand" ):
                listener.enterShowNodeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowNodeCommand" ):
                listener.exitShowNodeCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowNodeCommand" ):
                return visitor.visitShowNodeCommand(self)
            else:
                return visitor.visitChildren(self)




    def showNodeCommand(self):

        localctx = CypherParser.ShowNodeCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_showNodeCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [252, 253]:
                self.state = 1835
                _la = self._input.LA(1)
                if not(_la==252 or _la==253):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1836
                self.showConstraintsAllowYield()
                pass
            elif token in [124]:
                self.state = 1837
                self.match(CypherParser.KEY)
                self.state = 1838
                self.showConstraintsAllowBriefAndYield()
                pass
            elif token in [182]:
                self.state = 1839
                self.match(CypherParser.PROPERTY)
                self.state = 1840
                self.showPropertyCommand()
                pass
            elif token in [90]:
                self.state = 1841
                self.match(CypherParser.EXISTENCE)
                self.state = 1842
                self.showConstraintsAllowYield()
                pass
            elif token in [91]:
                self.state = 1843
                self.match(CypherParser.EXISTS)
                self.state = 1844
                self.showConstraintsAllowBrief()
                pass
            elif token in [89]:
                self.state = 1845
                self.match(CypherParser.EXIST)
                self.state = 1846
                self.showConstraintsAllowBriefAndYield()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRelationshipCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def showConstraintsAllowYield(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowYieldContext,0)


        def KEY(self):
            return self.getToken(CypherParser.KEY, 0)

        def PROPERTY(self):
            return self.getToken(CypherParser.PROPERTY, 0)

        def showPropertyCommand(self):
            return self.getTypedRuleContext(CypherParser.ShowPropertyCommandContext,0)


        def EXISTENCE(self):
            return self.getToken(CypherParser.EXISTENCE, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def showConstraintsAllowBrief(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowBriefContext,0)


        def EXIST(self):
            return self.getToken(CypherParser.EXIST, 0)

        def showConstraintsAllowBriefAndYield(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowBriefAndYieldContext,0)


        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def UNIQUENESS(self):
            return self.getToken(CypherParser.UNIQUENESS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_showRelationshipCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRelationshipCommand" ):
                listener.enterShowRelationshipCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRelationshipCommand" ):
                listener.exitShowRelationshipCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRelationshipCommand" ):
                return visitor.visitShowRelationshipCommand(self)
            else:
                return visitor.visitChildren(self)




    def showRelationshipCommand(self):

        localctx = CypherParser.ShowRelationshipCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_showRelationshipCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [252, 253]:
                self.state = 1849
                _la = self._input.LA(1)
                if not(_la==252 or _la==253):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1850
                self.showConstraintsAllowYield()
                pass
            elif token in [124]:
                self.state = 1851
                self.match(CypherParser.KEY)
                self.state = 1852
                self.showConstraintsAllowYield()
                pass
            elif token in [182]:
                self.state = 1853
                self.match(CypherParser.PROPERTY)
                self.state = 1854
                self.showPropertyCommand()
                pass
            elif token in [90]:
                self.state = 1855
                self.match(CypherParser.EXISTENCE)
                self.state = 1856
                self.showConstraintsAllowYield()
                pass
            elif token in [91]:
                self.state = 1857
                self.match(CypherParser.EXISTS)
                self.state = 1858
                self.showConstraintsAllowBrief()
                pass
            elif token in [89]:
                self.state = 1859
                self.match(CypherParser.EXIST)
                self.state = 1860
                self.showConstraintsAllowBriefAndYield()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRelCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def showConstraintsAllowYield(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowYieldContext,0)


        def KEY(self):
            return self.getToken(CypherParser.KEY, 0)

        def PROPERTY(self):
            return self.getToken(CypherParser.PROPERTY, 0)

        def showPropertyCommand(self):
            return self.getTypedRuleContext(CypherParser.ShowPropertyCommandContext,0)


        def EXISTENCE(self):
            return self.getToken(CypherParser.EXISTENCE, 0)

        def EXIST(self):
            return self.getToken(CypherParser.EXIST, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def UNIQUENESS(self):
            return self.getToken(CypherParser.UNIQUENESS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_showRelCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRelCommand" ):
                listener.enterShowRelCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRelCommand" ):
                listener.exitShowRelCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRelCommand" ):
                return visitor.visitShowRelCommand(self)
            else:
                return visitor.visitChildren(self)




    def showRelCommand(self):

        localctx = CypherParser.ShowRelCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_showRelCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [252, 253]:
                self.state = 1863
                _la = self._input.LA(1)
                if not(_la==252 or _la==253):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1864
                self.showConstraintsAllowYield()
                pass
            elif token in [124]:
                self.state = 1865
                self.match(CypherParser.KEY)
                self.state = 1866
                self.showConstraintsAllowYield()
                pass
            elif token in [182]:
                self.state = 1867
                self.match(CypherParser.PROPERTY)
                self.state = 1868
                self.showPropertyCommand()
                pass
            elif token in [90]:
                self.state = 1869
                self.match(CypherParser.EXISTENCE)
                self.state = 1870
                self.showConstraintsAllowYield()
                pass
            elif token in [89]:
                self.state = 1871
                self.match(CypherParser.EXIST)
                self.state = 1872
                self.showConstraintsAllowYield()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowPropertyCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def showConstraintsAllowYield(self):
            return self.getTypedRuleContext(CypherParser.ShowConstraintsAllowYieldContext,0)


        def TYPE(self):
            return self.getToken(CypherParser.TYPE, 0)

        def EXISTENCE(self):
            return self.getToken(CypherParser.EXISTENCE, 0)

        def EXIST(self):
            return self.getToken(CypherParser.EXIST, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_showPropertyCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPropertyCommand" ):
                listener.enterShowPropertyCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPropertyCommand" ):
                listener.exitShowPropertyCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPropertyCommand" ):
                return visitor.visitShowPropertyCommand(self)
            else:
                return visitor.visitChildren(self)




    def showPropertyCommand(self):

        localctx = CypherParser.ShowPropertyCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_showPropertyCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89, 90]:
                self.state = 1875
                _la = self._input.LA(1)
                if not(_la==89 or _la==90):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [248]:
                self.state = 1876
                self.match(CypherParser.TYPE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1879
            self.showConstraintsAllowYield()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.VariableContext)
            else:
                return self.getTypedRuleContext(CypherParser.VariableContext,i)


        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_yieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldItem" ):
                listener.enterYieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldItem" ):
                listener.exitYieldItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldItem" ):
                return visitor.visitYieldItem(self)
            else:
                return visitor.visitChildren(self)




    def yieldItem(self):

        localctx = CypherParser.YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_yieldItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self.variable()
            self.state = 1884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 1882
                self.match(CypherParser.AS)
                self.state = 1883
                self.variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def yieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.YieldItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.YieldItemContext,i)


        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def orderItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OrderItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OrderItemContext,i)


        def SKIPROWS(self):
            return self.getToken(CypherParser.SKIPROWS, 0)

        def signedIntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SignedIntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.SignedIntegerLiteralContext,i)


        def LIMITROWS(self):
            return self.getToken(CypherParser.LIMITROWS, 0)

        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_yieldClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldClause" ):
                listener.enterYieldClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldClause" ):
                listener.exitYieldClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldClause" ):
                return visitor.visitYieldClause(self)
            else:
                return visitor.visitChildren(self)




    def yieldClause(self):

        localctx = CypherParser.YieldClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_yieldClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self.match(CypherParser.YIELD)
            self.state = 1896
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [239]:
                self.state = 1887
                self.match(CypherParser.TIMES)
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 1888
                self.yieldItem()
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==39:
                    self.state = 1889
                    self.match(CypherParser.COMMA)
                    self.state = 1890
                    self.yieldItem()
                    self.state = 1895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==162:
                self.state = 1898
                self.match(CypherParser.ORDER)
                self.state = 1899
                self.match(CypherParser.BY)
                self.state = 1900
                self.orderItem()
                self.state = 1905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==39:
                    self.state = 1901
                    self.match(CypherParser.COMMA)
                    self.state = 1902
                    self.orderItem()
                    self.state = 1907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226:
                self.state = 1910
                self.match(CypherParser.SKIPROWS)
                self.state = 1911
                self.signedIntegerLiteral()


            self.state = 1916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1914
                self.match(CypherParser.LIMITROWS)
                self.state = 1915
                self.signedIntegerLiteral()


            self.state = 1919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1918
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowIndexesAllowBriefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(CypherParser.INDEXES, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def BRIEF(self):
            return self.getToken(CypherParser.BRIEF, 0)

        def VERBOSE(self):
            return self.getToken(CypherParser.VERBOSE, 0)

        def OUTPUT(self):
            return self.getToken(CypherParser.OUTPUT, 0)

        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showIndexesAllowBrief

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowIndexesAllowBrief" ):
                listener.enterShowIndexesAllowBrief(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowIndexesAllowBrief" ):
                listener.exitShowIndexesAllowBrief(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowIndexesAllowBrief" ):
                return visitor.visitShowIndexesAllowBrief(self)
            else:
                return visitor.visitChildren(self)




    def showIndexesAllowBrief(self):

        localctx = CypherParser.ShowIndexesAllowBriefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_showIndexesAllowBrief)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            _la = self._input.LA(1)
            if not(_la==116 or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 260]:
                self.state = 1922
                _la = self._input.LA(1)
                if not(_la==29 or _la==260):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1923
                    self.match(CypherParser.OUTPUT)


                pass
            elif token in [268]:
                self.state = 1926
                self.yieldClause()
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 1927
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 1930
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowIndexesNoBriefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(CypherParser.INDEXES, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showIndexesNoBrief

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowIndexesNoBrief" ):
                listener.enterShowIndexesNoBrief(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowIndexesNoBrief" ):
                listener.exitShowIndexesNoBrief(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowIndexesNoBrief" ):
                return visitor.visitShowIndexesNoBrief(self)
            else:
                return visitor.visitChildren(self)




    def showIndexesNoBrief(self):

        localctx = CypherParser.ShowIndexesNoBriefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_showIndexesNoBrief)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            _la = self._input.LA(1)
            if not(_la==116 or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 1934
                self.yieldClause()
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 1935
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 1938
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowConstraintsAllowBriefAndYieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(CypherParser.CONSTRAINTS, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def BRIEF(self):
            return self.getToken(CypherParser.BRIEF, 0)

        def VERBOSE(self):
            return self.getToken(CypherParser.VERBOSE, 0)

        def OUTPUT(self):
            return self.getToken(CypherParser.OUTPUT, 0)

        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showConstraintsAllowBriefAndYield

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowConstraintsAllowBriefAndYield" ):
                listener.enterShowConstraintsAllowBriefAndYield(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowConstraintsAllowBriefAndYield" ):
                listener.exitShowConstraintsAllowBriefAndYield(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowConstraintsAllowBriefAndYield" ):
                return visitor.visitShowConstraintsAllowBriefAndYield(self)
            else:
                return visitor.visitChildren(self)




    def showConstraintsAllowBriefAndYield(self):

        localctx = CypherParser.ShowConstraintsAllowBriefAndYieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_showConstraintsAllowBriefAndYield)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            _la = self._input.LA(1)
            if not(_la==44 or _la==45):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 260]:
                self.state = 1942
                _la = self._input.LA(1)
                if not(_la==29 or _la==260):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1943
                    self.match(CypherParser.OUTPUT)


                pass
            elif token in [268]:
                self.state = 1946
                self.yieldClause()
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 1947
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 1950
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowConstraintsAllowBriefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(CypherParser.CONSTRAINTS, 0)

        def BRIEF(self):
            return self.getToken(CypherParser.BRIEF, 0)

        def VERBOSE(self):
            return self.getToken(CypherParser.VERBOSE, 0)

        def OUTPUT(self):
            return self.getToken(CypherParser.OUTPUT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_showConstraintsAllowBrief

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowConstraintsAllowBrief" ):
                listener.enterShowConstraintsAllowBrief(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowConstraintsAllowBrief" ):
                listener.exitShowConstraintsAllowBrief(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowConstraintsAllowBrief" ):
                return visitor.visitShowConstraintsAllowBrief(self)
            else:
                return visitor.visitChildren(self)




    def showConstraintsAllowBrief(self):

        localctx = CypherParser.ShowConstraintsAllowBriefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_showConstraintsAllowBrief)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            _la = self._input.LA(1)
            if not(_la==44 or _la==45):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29 or _la==260:
                self.state = 1954
                _la = self._input.LA(1)
                if not(_la==29 or _la==260):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1955
                    self.match(CypherParser.OUTPUT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowConstraintsAllowYieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(CypherParser.CONSTRAINTS, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showConstraintsAllowYield

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowConstraintsAllowYield" ):
                listener.enterShowConstraintsAllowYield(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowConstraintsAllowYield" ):
                listener.exitShowConstraintsAllowYield(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowConstraintsAllowYield" ):
                return visitor.visitShowConstraintsAllowYield(self)
            else:
                return visitor.visitChildren(self)




    def showConstraintsAllowYield(self):

        localctx = CypherParser.ShowConstraintsAllowYieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_showConstraintsAllowYield)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            _la = self._input.LA(1)
            if not(_la==44 or _la==45):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 1961
                self.yieldClause()
                self.state = 1963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 1962
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 1965
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProceduresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(CypherParser.PROCEDURE, 0)

        def PROCEDURES(self):
            return self.getToken(CypherParser.PROCEDURES, 0)

        def EXECUTABLE(self):
            return self.getToken(CypherParser.EXECUTABLE, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def CURRENT(self):
            return self.getToken(CypherParser.CURRENT, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showProcedures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProcedures" ):
                listener.enterShowProcedures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProcedures" ):
                listener.exitShowProcedures(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowProcedures" ):
                return visitor.visitShowProcedures(self)
            else:
                return visitor.visitChildren(self)




    def showProcedures(self):

        localctx = CypherParser.ShowProceduresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_showProcedures)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            _la = self._input.LA(1)
            if not(_la==179 or _la==180):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 1969
                self.match(CypherParser.EXECUTABLE)
                self.state = 1976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 1970
                    self.match(CypherParser.BY)
                    self.state = 1974
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                    if la_ == 1:
                        self.state = 1971
                        self.match(CypherParser.CURRENT)
                        self.state = 1972
                        self.match(CypherParser.USER)
                        pass

                    elif la_ == 2:
                        self.state = 1973
                        self.symbolicNameString()
                        pass






            self.state = 1985
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 1980
                self.yieldClause()
                self.state = 1982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 1981
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 1984
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFunctionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(CypherParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(CypherParser.FUNCTIONS, 0)

        def EXECUTABLE(self):
            return self.getToken(CypherParser.EXECUTABLE, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def CURRENT(self):
            return self.getToken(CypherParser.CURRENT, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showFunctions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)




    def showFunctions(self):

        localctx = CypherParser.ShowFunctionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_showFunctions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            _la = self._input.LA(1)
            if not(_la==101 or _la==102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 1988
                self.match(CypherParser.EXECUTABLE)
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 1989
                    self.match(CypherParser.BY)
                    self.state = 1993
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                    if la_ == 1:
                        self.state = 1990
                        self.match(CypherParser.CURRENT)
                        self.state = 1991
                        self.match(CypherParser.USER)
                        pass

                    elif la_ == 2:
                        self.state = 1992
                        self.symbolicNameString()
                        pass






            self.state = 2004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 1999
                self.yieldClause()
                self.state = 2001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2000
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 2003
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowTransactionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(CypherParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(CypherParser.TRANSACTIONS, 0)

        def showOrTerminateTransactions(self):
            return self.getTypedRuleContext(CypherParser.ShowOrTerminateTransactionsContext,0)


        def stringsOrExpression(self):
            return self.getTypedRuleContext(CypherParser.StringsOrExpressionContext,0)


        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showTransactions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTransactions" ):
                listener.enterShowTransactions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTransactions" ):
                listener.exitShowTransactions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTransactions" ):
                return visitor.visitShowTransactions(self)
            else:
                return visitor.visitChildren(self)




    def showTransactions(self):

        localctx = CypherParser.ShowTransactionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_showTransactions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            _la = self._input.LA(1)
            if not(_la==244 or _la==245):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 2007
                self.showOrTerminateTransactions()

            elif la_ == 2:
                self.state = 2022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 2008
                    self.stringsOrExpression()
                    self.state = 2014
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [268]:
                        self.state = 2009
                        self.yieldClause()
                        self.state = 2011
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==201:
                            self.state = 2010
                            self.returnClause()


                        pass
                    elif token in [263]:
                        self.state = 2013
                        self.whereClause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 2016
                    self.yieldClause()
                    self.state = 2018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==201:
                        self.state = 2017
                        self.returnClause()


                    pass

                elif la_ == 3:
                    self.state = 2020
                    self.whereClause()
                    pass

                elif la_ == 4:
                    self.state = 2021
                    self.stringsOrExpression()
                    pass


                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==223 or _la==235:
                    self.state = 2024
                    self.showOrTerminateTransactions()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminateTransactionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(CypherParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(CypherParser.TRANSACTIONS, 0)

        def showOrTerminateTransactions(self):
            return self.getTypedRuleContext(CypherParser.ShowOrTerminateTransactionsContext,0)


        def stringsOrExpression(self):
            return self.getTypedRuleContext(CypherParser.StringsOrExpressionContext,0)


        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_terminateTransactions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminateTransactions" ):
                listener.enterTerminateTransactions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminateTransactions" ):
                listener.exitTerminateTransactions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerminateTransactions" ):
                return visitor.visitTerminateTransactions(self)
            else:
                return visitor.visitChildren(self)




    def terminateTransactions(self):

        localctx = CypherParser.TerminateTransactionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_terminateTransactions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            _la = self._input.LA(1)
            if not(_la==244 or _la==245):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 2030
                self.showOrTerminateTransactions()

            elif la_ == 2:
                self.state = 2045
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 2031
                    self.stringsOrExpression()
                    self.state = 2037
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [268]:
                        self.state = 2032
                        self.yieldClause()
                        self.state = 2034
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==201:
                            self.state = 2033
                            self.returnClause()


                        pass
                    elif token in [263]:
                        self.state = 2036
                        self.whereClause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 2039
                    self.yieldClause()
                    self.state = 2041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==201:
                        self.state = 2040
                        self.returnClause()


                    pass

                elif la_ == 3:
                    self.state = 2043
                    self.whereClause()
                    pass

                elif la_ == 4:
                    self.state = 2044
                    self.stringsOrExpression()
                    pass


                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==223 or _la==235:
                    self.state = 2047
                    self.showOrTerminateTransactions()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowOrTerminateTransactionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINATE(self):
            return self.getToken(CypherParser.TERMINATE, 0)

        def terminateTransactions(self):
            return self.getTypedRuleContext(CypherParser.TerminateTransactionsContext,0)


        def SHOW(self):
            return self.getToken(CypherParser.SHOW, 0)

        def showTransactions(self):
            return self.getTypedRuleContext(CypherParser.ShowTransactionsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showOrTerminateTransactions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowOrTerminateTransactions" ):
                listener.enterShowOrTerminateTransactions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowOrTerminateTransactions" ):
                listener.exitShowOrTerminateTransactions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowOrTerminateTransactions" ):
                return visitor.visitShowOrTerminateTransactions(self)
            else:
                return visitor.visitChildren(self)




    def showOrTerminateTransactions(self):

        localctx = CypherParser.ShowOrTerminateTransactionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_showOrTerminateTransactions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [235]:
                self.state = 2052
                self.match(CypherParser.TERMINATE)
                self.state = 2053
                self.terminateTransactions()
                pass
            elif token in [223]:
                self.state = 2054
                self.match(CypherParser.SHOW)
                self.state = 2055
                self.showTransactions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringsOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringList(self):
            return self.getTypedRuleContext(CypherParser.StringListContext,0)


        def expression(self):
            return self.getTypedRuleContext(CypherParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_stringsOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringsOrExpression" ):
                listener.enterStringsOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringsOrExpression" ):
                listener.exitStringsOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringsOrExpression" ):
                return visitor.visitStringsOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringsOrExpression(self):

        localctx = CypherParser.StringsOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_stringsOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 2058
                self.stringList()
                pass

            elif la_ == 2:
                self.state = 2059
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSettingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTING(self):
            return self.getToken(CypherParser.SETTING, 0)

        def SETTINGS(self):
            return self.getToken(CypherParser.SETTINGS, 0)

        def stringsOrExpression(self):
            return self.getTypedRuleContext(CypherParser.StringsOrExpressionContext,0)


        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showSettings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSettings" ):
                listener.enterShowSettings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSettings" ):
                listener.exitShowSettings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSettings" ):
                return visitor.visitShowSettings(self)
            else:
                return visitor.visitChildren(self)




    def showSettings(self):

        localctx = CypherParser.ShowSettingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_showSettings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            _la = self._input.LA(1)
            if not(_la==219 or _la==220):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 2063
                self.stringsOrExpression()
                self.state = 2069
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 2064
                    self.yieldClause()
                    self.state = 2066
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==201:
                        self.state = 2065
                        self.returnClause()


                    pass
                elif token in [263]:
                    self.state = 2068
                    self.whereClause()
                    pass
                else:
                    raise NoViableAltException(self)


            elif la_ == 2:
                self.state = 2071
                self.yieldClause()
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2072
                    self.returnClause()



            elif la_ == 3:
                self.state = 2075
                self.whereClause()

            elif la_ == 4:
                self.state = 2076
                self.stringsOrExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NOT)
            else:
                return self.getToken(CypherParser.NOT, i)

        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.EXISTS)
            else:
                return self.getToken(CypherParser.EXISTS, i)

        def constraintNodePattern(self):
            return self.getTypedRuleContext(CypherParser.ConstraintNodePatternContext,0)


        def constraintRelPattern(self):
            return self.getTypedRuleContext(CypherParser.ConstraintRelPatternContext,0)


        def ASSERT(self):
            return self.getToken(CypherParser.ASSERT, 0)

        def propertyList(self):
            return self.getTypedRuleContext(CypherParser.PropertyListContext,0)


        def REQUIRE(self):
            return self.getToken(CypherParser.REQUIRE, 0)

        def OPTIONS(self):
            return self.getToken(CypherParser.OPTIONS, 0)

        def mapOrParameter(self):
            return self.getTypedRuleContext(CypherParser.MapOrParameterContext,0)


        def COLONCOLON(self):
            return self.getToken(CypherParser.COLONCOLON, 0)

        def cypherTypeName(self):
            return self.getTypedRuleContext(CypherParser.CypherTypeNameContext,0)


        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def KEY(self):
            return self.getToken(CypherParser.KEY, 0)

        def createConstraintNodeCheck(self):
            return self.getTypedRuleContext(CypherParser.CreateConstraintNodeCheckContext,0)


        def createConstraintRelCheck(self):
            return self.getTypedRuleContext(CypherParser.CreateConstraintRelCheckContext,0)


        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def TYPED(self):
            return self.getToken(CypherParser.TYPED, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_createConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateConstraint" ):
                listener.enterCreateConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateConstraint" ):
                listener.exitCreateConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateConstraint" ):
                return visitor.visitCreateConstraint(self)
            else:
                return visitor.visitChildren(self)




    def createConstraint(self):

        localctx = CypherParser.CreateConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_createConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            self.match(CypherParser.CONSTRAINT)
            self.state = 2099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 2080
                self.match(CypherParser.ON)
                self.state = 2081
                self.match(CypherParser.LPAREN)
                pass

            elif la_ == 2:
                self.state = 2082
                self.match(CypherParser.FOR)
                self.state = 2083
                self.match(CypherParser.LPAREN)
                pass

            elif la_ == 3:
                self.state = 2084
                self.match(CypherParser.IF)
                self.state = 2085
                self.match(CypherParser.NOT)
                self.state = 2086
                self.match(CypherParser.EXISTS)
                self.state = 2087
                _la = self._input.LA(1)
                if not(_la==97 or _la==156):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2088
                self.match(CypherParser.LPAREN)
                pass

            elif la_ == 4:
                self.state = 2090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 2089
                    self.symbolicNameString()


                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2092
                    self.match(CypherParser.IF)
                    self.state = 2093
                    self.match(CypherParser.NOT)
                    self.state = 2094
                    self.match(CypherParser.EXISTS)


                self.state = 2097
                _la = self._input.LA(1)
                if not(_la==97 or _la==156):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2098
                self.match(CypherParser.LPAREN)
                pass


            self.state = 2103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 2101
                self.constraintNodePattern()
                pass
            elif token in [207]:
                self.state = 2102
                self.constraintRelPattern()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2105
                self.match(CypherParser.ASSERT)
                self.state = 2106
                self.match(CypherParser.EXISTS)
                self.state = 2107
                self.propertyList()
                pass

            elif la_ == 2:
                self.state = 2108
                _la = self._input.LA(1)
                if not(_la==20 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2109
                self.propertyList()
                self.state = 2123
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 2110
                    self.match(CypherParser.COLONCOLON)
                    self.state = 2111
                    self.cypherTypeName()
                    pass
                elif token in [122]:
                    self.state = 2112
                    self.match(CypherParser.IS)
                    self.state = 2121
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [252]:
                        self.state = 2113
                        self.match(CypherParser.UNIQUE)
                        pass
                    elif token in [124]:
                        self.state = 2114
                        self.match(CypherParser.KEY)
                        pass
                    elif token in [149]:
                        self.state = 2115
                        self.createConstraintNodeCheck()
                        pass
                    elif token in [192, 193]:
                        self.state = 2116
                        self.createConstraintRelCheck()
                        pass
                    elif token in [152]:
                        self.state = 2117
                        self.match(CypherParser.NOT)
                        self.state = 2118
                        self.match(CypherParser.NULL)
                        pass
                    elif token in [38, 249]:
                        self.state = 2119
                        _la = self._input.LA(1)
                        if not(_la==38 or _la==249):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2120
                        self.cypherTypeName()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 2129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2127
                self.match(CypherParser.OPTIONS)
                self.state = 2128
                self.mapOrParameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CypherTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CypherParser.FLOAT, 0)

        def DATE(self):
            return self.getToken(CypherParser.DATE, 0)

        def LOCAL(self):
            return self.getToken(CypherParser.LOCAL, 0)

        def ZONED(self):
            return self.getToken(CypherParser.ZONED, 0)

        def TIME(self):
            return self.getToken(CypherParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(CypherParser.TIMESTAMP, 0)

        def DURATION(self):
            return self.getToken(CypherParser.DURATION, 0)

        def POINT(self):
            return self.getToken(CypherParser.POINT, 0)

        def BOOLEAN(self):
            return self.getToken(CypherParser.BOOLEAN, 0)

        def BOOL(self):
            return self.getToken(CypherParser.BOOL, 0)

        def STRING(self):
            return self.getToken(CypherParser.STRING, 0)

        def VARCHAR(self):
            return self.getToken(CypherParser.VARCHAR, 0)

        def DATETIME(self):
            return self.getToken(CypherParser.DATETIME, 0)

        def INT(self):
            return self.getToken(CypherParser.INT, 0)

        def INTEGER(self):
            return self.getToken(CypherParser.INTEGER, 0)

        def WITHOUT(self):
            return self.getToken(CypherParser.WITHOUT, 0)

        def TIMEZONE(self):
            return self.getToken(CypherParser.TIMEZONE, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def SIGNED(self):
            return self.getToken(CypherParser.SIGNED, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_cypherTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCypherTypeName" ):
                listener.enterCypherTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCypherTypeName" ):
                listener.exitCypherTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCypherTypeName" ):
                return visitor.visitCypherTypeName(self)
            else:
                return visitor.visitChildren(self)




    def cypherTypeName(self):

        localctx = CypherParser.CypherTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_cypherTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2162
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25, 26]:
                self.state = 2131
                _la = self._input.LA(1)
                if not(_la==25 or _la==26):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [231, 259]:
                self.state = 2132
                _la = self._input.LA(1)
                if not(_la==231 or _la==259):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [120, 121, 224]:
                self.state = 2138
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [120]:
                    self.state = 2133
                    self.match(CypherParser.INT)
                    pass
                elif token in [121, 224]:
                    self.state = 2135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==224:
                        self.state = 2134
                        self.match(CypherParser.SIGNED)


                    self.state = 2137
                    self.match(CypherParser.INTEGER)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [96]:
                self.state = 2140
                self.match(CypherParser.FLOAT)
                pass
            elif token in [56]:
                self.state = 2141
                self.match(CypherParser.DATE)
                pass
            elif token in [134]:
                self.state = 2142
                self.match(CypherParser.LOCAL)
                self.state = 2143
                _la = self._input.LA(1)
                if not(_la==57 or _la==238):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [269]:
                self.state = 2144
                self.match(CypherParser.ZONED)
                self.state = 2145
                _la = self._input.LA(1)
                if not(_la==57 or _la==238):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [238]:
                self.state = 2146
                self.match(CypherParser.TIME)
                self.state = 2151
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [265]:
                    self.state = 2147
                    self.match(CypherParser.WITHOUT)
                    self.state = 2148
                    self.match(CypherParser.TIMEZONE)
                    pass
                elif token in [264]:
                    self.state = 2149
                    self.match(CypherParser.WITH)
                    self.state = 2150
                    self.match(CypherParser.TIMEZONE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [240]:
                self.state = 2153
                self.match(CypherParser.TIMESTAMP)
                self.state = 2158
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [265]:
                    self.state = 2154
                    self.match(CypherParser.WITHOUT)
                    self.state = 2155
                    self.match(CypherParser.TIMEZONE)
                    pass
                elif token in [264]:
                    self.state = 2156
                    self.match(CypherParser.WITH)
                    self.state = 2157
                    self.match(CypherParser.TIMEZONE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [77]:
                self.state = 2160
                self.match(CypherParser.DURATION)
                pass
            elif token in [172]:
                self.state = 2161
                self.match(CypherParser.POINT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintNodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def labelOrRelType(self):
            return self.getTypedRuleContext(CypherParser.LabelOrRelTypeContext,0)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_constraintNodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintNodePattern" ):
                listener.enterConstraintNodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintNodePattern" ):
                listener.exitConstraintNodePattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintNodePattern" ):
                return visitor.visitConstraintNodePattern(self)
            else:
                return visitor.visitChildren(self)




    def constraintNodePattern(self):

        localctx = CypherParser.ConstraintNodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_constraintNodePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self.variable()
            self.state = 2165
            self.labelOrRelType()
            self.state = 2166
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintRelPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.RPAREN)
            else:
                return self.getToken(CypherParser.RPAREN, i)

        def arrowLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ArrowLineContext)
            else:
                return self.getTypedRuleContext(CypherParser.ArrowLineContext,i)


        def LBRACKET(self):
            return self.getToken(CypherParser.LBRACKET, 0)

        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def labelOrRelType(self):
            return self.getTypedRuleContext(CypherParser.LabelOrRelTypeContext,0)


        def RBRACKET(self):
            return self.getToken(CypherParser.RBRACKET, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def leftArrow(self):
            return self.getTypedRuleContext(CypherParser.LeftArrowContext,0)


        def rightArrow(self):
            return self.getTypedRuleContext(CypherParser.RightArrowContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_constraintRelPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintRelPattern" ):
                listener.enterConstraintRelPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintRelPattern" ):
                listener.exitConstraintRelPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintRelPattern" ):
                return visitor.visitConstraintRelPattern(self)
            else:
                return visitor.visitChildren(self)




    def constraintRelPattern(self):

        localctx = CypherParser.ConstraintRelPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_constraintRelPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2168
            self.match(CypherParser.RPAREN)
            self.state = 2170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137 or _la==273:
                self.state = 2169
                self.leftArrow()


            self.state = 2172
            self.arrowLine()
            self.state = 2173
            self.match(CypherParser.LBRACKET)
            self.state = 2174
            self.variable()
            self.state = 2175
            self.labelOrRelType()
            self.state = 2176
            self.match(CypherParser.RBRACKET)
            self.state = 2177
            self.arrowLine()
            self.state = 2179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109 or _la==274:
                self.state = 2178
                self.rightArrow()


            self.state = 2181
            self.match(CypherParser.LPAREN)
            self.state = 2182
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateConstraintNodeCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODE(self):
            return self.getToken(CypherParser.NODE, 0)

        def KEY(self):
            return self.getToken(CypherParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_createConstraintNodeCheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateConstraintNodeCheck" ):
                listener.enterCreateConstraintNodeCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateConstraintNodeCheck" ):
                listener.exitCreateConstraintNodeCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateConstraintNodeCheck" ):
                return visitor.visitCreateConstraintNodeCheck(self)
            else:
                return visitor.visitChildren(self)




    def createConstraintNodeCheck(self):

        localctx = CypherParser.CreateConstraintNodeCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_createConstraintNodeCheck)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2184
            self.match(CypherParser.NODE)
            self.state = 2185
            _la = self._input.LA(1)
            if not(_la==124 or _la==252):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateConstraintRelCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATIONSHIP(self):
            return self.getToken(CypherParser.RELATIONSHIP, 0)

        def REL(self):
            return self.getToken(CypherParser.REL, 0)

        def KEY(self):
            return self.getToken(CypherParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_createConstraintRelCheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateConstraintRelCheck" ):
                listener.enterCreateConstraintRelCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateConstraintRelCheck" ):
                listener.exitCreateConstraintRelCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateConstraintRelCheck" ):
                return visitor.visitCreateConstraintRelCheck(self)
            else:
                return visitor.visitChildren(self)




    def createConstraintRelCheck(self):

        localctx = CypherParser.CreateConstraintRelCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_createConstraintRelCheck)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2187
            _la = self._input.LA(1)
            if not(_la==192 or _la==193):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2188
            _la = self._input.LA(1)
            if not(_la==124 or _la==252):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def ASSERT(self):
            return self.getToken(CypherParser.ASSERT, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def constraintNodePattern(self):
            return self.getTypedRuleContext(CypherParser.ConstraintNodePatternContext,0)


        def constraintRelPattern(self):
            return self.getTypedRuleContext(CypherParser.ConstraintRelPatternContext,0)


        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def propertyList(self):
            return self.getTypedRuleContext(CypherParser.PropertyListContext,0)


        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def dropConstraintNodeCheck(self):
            return self.getTypedRuleContext(CypherParser.DropConstraintNodeCheckContext,0)


        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_dropConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropConstraint" ):
                listener.enterDropConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropConstraint" ):
                listener.exitDropConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropConstraint" ):
                return visitor.visitDropConstraint(self)
            else:
                return visitor.visitChildren(self)




    def dropConstraint(self):

        localctx = CypherParser.DropConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_dropConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self.match(CypherParser.CONSTRAINT)
            self.state = 2214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2191
                self.match(CypherParser.ON)
                self.state = 2192
                self.match(CypherParser.LPAREN)
                self.state = 2195
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                    self.state = 2193
                    self.constraintNodePattern()
                    pass
                elif token in [207]:
                    self.state = 2194
                    self.constraintRelPattern()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2197
                self.match(CypherParser.ASSERT)
                self.state = 2207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 2198
                    self.match(CypherParser.EXISTS)
                    self.state = 2199
                    self.propertyList()
                    pass

                elif la_ == 2:
                    self.state = 2200
                    self.propertyList()
                    self.state = 2201
                    self.match(CypherParser.IS)
                    self.state = 2205
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [149, 252]:
                        self.state = 2202
                        self.dropConstraintNodeCheck()
                        pass
                    elif token in [152]:
                        self.state = 2203
                        self.match(CypherParser.NOT)
                        self.state = 2204
                        self.match(CypherParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                pass

            elif la_ == 2:
                self.state = 2209
                self.symbolicNameString()
                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2210
                    self.match(CypherParser.IF)
                    self.state = 2211
                    self.match(CypherParser.EXISTS)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropConstraintNodeCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def NODE(self):
            return self.getToken(CypherParser.NODE, 0)

        def KEY(self):
            return self.getToken(CypherParser.KEY, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_dropConstraintNodeCheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropConstraintNodeCheck" ):
                listener.enterDropConstraintNodeCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropConstraintNodeCheck" ):
                listener.exitDropConstraintNodeCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropConstraintNodeCheck" ):
                return visitor.visitDropConstraintNodeCheck(self)
            else:
                return visitor.visitChildren(self)




    def dropConstraintNodeCheck(self):

        localctx = CypherParser.DropConstraintNodeCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_dropConstraintNodeCheck)
        try:
            self.state = 2219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [252]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2216
                self.match(CypherParser.UNIQUE)
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2217
                self.match(CypherParser.NODE)
                self.state = 2218
                self.match(CypherParser.KEY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BTREE(self):
            return self.getToken(CypherParser.BTREE, 0)

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def createIndex_(self):
            return self.getTypedRuleContext(CypherParser.CreateIndex_Context,0)


        def RANGE(self):
            return self.getToken(CypherParser.RANGE, 0)

        def FULLTEXT(self):
            return self.getToken(CypherParser.FULLTEXT, 0)

        def createFulltextIndex(self):
            return self.getTypedRuleContext(CypherParser.CreateFulltextIndexContext,0)


        def TEXT(self):
            return self.getToken(CypherParser.TEXT, 0)

        def POINT(self):
            return self.getToken(CypherParser.POINT, 0)

        def LOOKUP(self):
            return self.getToken(CypherParser.LOOKUP, 0)

        def createLookupIndex(self):
            return self.getTypedRuleContext(CypherParser.CreateLookupIndexContext,0)


        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def oldCreateIndex(self):
            return self.getTypedRuleContext(CypherParser.OldCreateIndexContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex" ):
                return visitor.visitCreateIndex(self)
            else:
                return visitor.visitChildren(self)




    def createIndex(self):

        localctx = CypherParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_createIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.state = 2221
                self.match(CypherParser.BTREE)
                self.state = 2222
                self.match(CypherParser.INDEX)
                self.state = 2223
                self.createIndex_()
                pass
            elif token in [184]:
                self.state = 2224
                self.match(CypherParser.RANGE)
                self.state = 2225
                self.match(CypherParser.INDEX)
                self.state = 2226
                self.createIndex_()
                pass
            elif token in [100]:
                self.state = 2227
                self.match(CypherParser.FULLTEXT)
                self.state = 2228
                self.match(CypherParser.INDEX)
                self.state = 2229
                self.createFulltextIndex()
                pass
            elif token in [236]:
                self.state = 2230
                self.match(CypherParser.TEXT)
                self.state = 2231
                self.match(CypherParser.INDEX)
                self.state = 2232
                self.createIndex_()
                pass
            elif token in [172]:
                self.state = 2233
                self.match(CypherParser.POINT)
                self.state = 2234
                self.match(CypherParser.INDEX)
                self.state = 2235
                self.createIndex_()
                pass
            elif token in [135]:
                self.state = 2236
                self.match(CypherParser.LOOKUP)
                self.state = 2237
                self.match(CypherParser.INDEX)
                self.state = 2238
                self.createLookupIndex()
                pass
            elif token in [116]:
                self.state = 2239
                self.match(CypherParser.INDEX)
                self.state = 2243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 2240
                    self.match(CypherParser.ON)
                    self.state = 2241
                    self.oldCreateIndex()
                    pass

                elif la_ == 2:
                    self.state = 2242
                    self.createIndex_()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OldCreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelOrRelType(self):
            return self.getTypedRuleContext(CypherParser.LabelOrRelTypeContext,0)


        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def symbolicNamePositions(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNamePositionsContext,0)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oldCreateIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOldCreateIndex" ):
                listener.enterOldCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOldCreateIndex" ):
                listener.exitOldCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOldCreateIndex" ):
                return visitor.visitOldCreateIndex(self)
            else:
                return visitor.visitChildren(self)




    def oldCreateIndex(self):

        localctx = CypherParser.OldCreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_oldCreateIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            self.labelOrRelType()
            self.state = 2248
            self.match(CypherParser.LPAREN)
            self.state = 2249
            self.symbolicNamePositions()
            self.state = 2250
            self.match(CypherParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndex_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def propertyList(self):
            return self.getTypedRuleContext(CypherParser.PropertyListContext,0)


        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.LPAREN)
            else:
                return self.getToken(CypherParser.LPAREN, i)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def variable(self):
            return self.getTypedRuleContext(CypherParser.VariableContext,0)


        def labelOrRelType(self):
            return self.getTypedRuleContext(CypherParser.LabelOrRelTypeContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.RPAREN)
            else:
                return self.getToken(CypherParser.RPAREN, i)

        def arrowLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ArrowLineContext)
            else:
                return self.getTypedRuleContext(CypherParser.ArrowLineContext,i)


        def LBRACKET(self):
            return self.getToken(CypherParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(CypherParser.RBRACKET, 0)

        def OPTIONS(self):
            return self.getToken(CypherParser.OPTIONS, 0)

        def mapOrParameter(self):
            return self.getTypedRuleContext(CypherParser.MapOrParameterContext,0)


        def leftArrow(self):
            return self.getTypedRuleContext(CypherParser.LeftArrowContext,0)


        def rightArrow(self):
            return self.getTypedRuleContext(CypherParser.RightArrowContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_createIndex_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex_" ):
                listener.enterCreateIndex_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex_" ):
                listener.exitCreateIndex_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex_" ):
                return visitor.visitCreateIndex_(self)
            else:
                return visitor.visitChildren(self)




    def createIndex_(self):

        localctx = CypherParser.CreateIndex_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_createIndex_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 2252
                self.match(CypherParser.FOR)
                self.state = 2253
                self.match(CypherParser.LPAREN)
                pass

            elif la_ == 2:
                self.state = 2254
                self.match(CypherParser.IF)
                self.state = 2255
                self.match(CypherParser.NOT)
                self.state = 2256
                self.match(CypherParser.EXISTS)
                self.state = 2257
                self.match(CypherParser.FOR)
                self.state = 2258
                self.match(CypherParser.LPAREN)
                pass

            elif la_ == 3:
                self.state = 2259
                self.symbolicNameString()
                self.state = 2263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2260
                    self.match(CypherParser.IF)
                    self.state = 2261
                    self.match(CypherParser.NOT)
                    self.state = 2262
                    self.match(CypherParser.EXISTS)


                self.state = 2265
                self.match(CypherParser.FOR)
                self.state = 2266
                self.match(CypherParser.LPAREN)
                pass


            self.state = 2290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 2270
                self.variable()
                self.state = 2271
                self.labelOrRelType()
                self.state = 2272
                self.match(CypherParser.RPAREN)
                pass
            elif token in [207]:
                self.state = 2274
                self.match(CypherParser.RPAREN)
                self.state = 2276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137 or _la==273:
                    self.state = 2275
                    self.leftArrow()


                self.state = 2278
                self.arrowLine()
                self.state = 2279
                self.match(CypherParser.LBRACKET)
                self.state = 2280
                self.variable()
                self.state = 2281
                self.labelOrRelType()
                self.state = 2282
                self.match(CypherParser.RBRACKET)
                self.state = 2283
                self.arrowLine()
                self.state = 2285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109 or _la==274:
                    self.state = 2284
                    self.rightArrow()


                self.state = 2287
                self.match(CypherParser.LPAREN)
                self.state = 2288
                self.match(CypherParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2292
            self.match(CypherParser.ON)
            self.state = 2293
            self.propertyList()
            self.state = 2296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2294
                self.match(CypherParser.OPTIONS)
                self.state = 2295
                self.mapOrParameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFulltextIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def EACH(self):
            return self.getToken(CypherParser.EACH, 0)

        def LBRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.LBRACKET)
            else:
                return self.getToken(CypherParser.LBRACKET, i)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.VariableContext)
            else:
                return self.getTypedRuleContext(CypherParser.VariableContext,i)


        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PropertyContext)
            else:
                return self.getTypedRuleContext(CypherParser.PropertyContext,i)


        def RBRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.RBRACKET)
            else:
                return self.getToken(CypherParser.RBRACKET, i)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.LPAREN)
            else:
                return self.getToken(CypherParser.LPAREN, i)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def labelOrRelTypes(self):
            return self.getTypedRuleContext(CypherParser.LabelOrRelTypesContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.RPAREN)
            else:
                return self.getToken(CypherParser.RPAREN, i)

        def arrowLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ArrowLineContext)
            else:
                return self.getTypedRuleContext(CypherParser.ArrowLineContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def OPTIONS(self):
            return self.getToken(CypherParser.OPTIONS, 0)

        def mapOrParameter(self):
            return self.getTypedRuleContext(CypherParser.MapOrParameterContext,0)


        def leftArrow(self):
            return self.getTypedRuleContext(CypherParser.LeftArrowContext,0)


        def rightArrow(self):
            return self.getTypedRuleContext(CypherParser.RightArrowContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_createFulltextIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFulltextIndex" ):
                listener.enterCreateFulltextIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFulltextIndex" ):
                listener.exitCreateFulltextIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFulltextIndex" ):
                return visitor.visitCreateFulltextIndex(self)
            else:
                return visitor.visitChildren(self)




    def createFulltextIndex(self):

        localctx = CypherParser.CreateFulltextIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_createFulltextIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 2298
                self.match(CypherParser.FOR)
                self.state = 2299
                self.match(CypherParser.LPAREN)
                pass

            elif la_ == 2:
                self.state = 2300
                self.match(CypherParser.IF)
                self.state = 2301
                self.match(CypherParser.NOT)
                self.state = 2302
                self.match(CypherParser.EXISTS)
                self.state = 2303
                self.match(CypherParser.FOR)
                self.state = 2304
                self.match(CypherParser.LPAREN)
                pass

            elif la_ == 3:
                self.state = 2305
                self.symbolicNameString()
                self.state = 2309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2306
                    self.match(CypherParser.IF)
                    self.state = 2307
                    self.match(CypherParser.NOT)
                    self.state = 2308
                    self.match(CypherParser.EXISTS)


                self.state = 2311
                self.match(CypherParser.FOR)
                self.state = 2312
                self.match(CypherParser.LPAREN)
                pass


            self.state = 2336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 2316
                self.variable()
                self.state = 2317
                self.labelOrRelTypes()
                self.state = 2318
                self.match(CypherParser.RPAREN)
                pass
            elif token in [207]:
                self.state = 2320
                self.match(CypherParser.RPAREN)
                self.state = 2322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137 or _la==273:
                    self.state = 2321
                    self.leftArrow()


                self.state = 2324
                self.arrowLine()
                self.state = 2325
                self.match(CypherParser.LBRACKET)
                self.state = 2326
                self.variable()
                self.state = 2327
                self.labelOrRelTypes()
                self.state = 2328
                self.match(CypherParser.RBRACKET)
                self.state = 2329
                self.arrowLine()
                self.state = 2331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109 or _la==274:
                    self.state = 2330
                    self.rightArrow()


                self.state = 2333
                self.match(CypherParser.LPAREN)
                self.state = 2334
                self.match(CypherParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2338
            self.match(CypherParser.ON)
            self.state = 2339
            self.match(CypherParser.EACH)
            self.state = 2340
            self.match(CypherParser.LBRACKET)
            self.state = 2341
            self.variable()
            self.state = 2342
            self.property_()
            self.state = 2349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 2343
                self.match(CypherParser.COMMA)
                self.state = 2344
                self.variable()
                self.state = 2345
                self.property_()
                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2352
            self.match(CypherParser.RBRACKET)
            self.state = 2355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2353
                self.match(CypherParser.OPTIONS)
                self.state = 2354
                self.mapOrParameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLookupIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lookupIndexFunctionName(self):
            return self.getTypedRuleContext(CypherParser.LookupIndexFunctionNameContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.LPAREN)
            else:
                return self.getToken(CypherParser.LPAREN, i)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.VariableContext)
            else:
                return self.getTypedRuleContext(CypherParser.VariableContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.RPAREN)
            else:
                return self.getToken(CypherParser.RPAREN, i)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def EACH(self):
            return self.getToken(CypherParser.EACH, 0)

        def arrowLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ArrowLineContext)
            else:
                return self.getTypedRuleContext(CypherParser.ArrowLineContext,i)


        def LBRACKET(self):
            return self.getToken(CypherParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(CypherParser.RBRACKET, 0)

        def OPTIONS(self):
            return self.getToken(CypherParser.OPTIONS, 0)

        def mapOrParameter(self):
            return self.getTypedRuleContext(CypherParser.MapOrParameterContext,0)


        def leftArrow(self):
            return self.getTypedRuleContext(CypherParser.LeftArrowContext,0)


        def rightArrow(self):
            return self.getTypedRuleContext(CypherParser.RightArrowContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_createLookupIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLookupIndex" ):
                listener.enterCreateLookupIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLookupIndex" ):
                listener.exitCreateLookupIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateLookupIndex" ):
                return visitor.visitCreateLookupIndex(self)
            else:
                return visitor.visitChildren(self)




    def createLookupIndex(self):

        localctx = CypherParser.CreateLookupIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_createLookupIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2357
                self.match(CypherParser.FOR)
                self.state = 2358
                self.match(CypherParser.LPAREN)
                pass

            elif la_ == 2:
                self.state = 2359
                self.match(CypherParser.IF)
                self.state = 2360
                self.match(CypherParser.NOT)
                self.state = 2361
                self.match(CypherParser.EXISTS)
                self.state = 2362
                self.match(CypherParser.FOR)
                self.state = 2363
                self.match(CypherParser.LPAREN)
                pass

            elif la_ == 3:
                self.state = 2364
                self.symbolicNameString()
                self.state = 2368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2365
                    self.match(CypherParser.IF)
                    self.state = 2366
                    self.match(CypherParser.NOT)
                    self.state = 2367
                    self.match(CypherParser.EXISTS)


                self.state = 2370
                self.match(CypherParser.FOR)
                self.state = 2371
                self.match(CypherParser.LPAREN)
                pass


            self.state = 2398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 2375
                self.variable()
                self.state = 2376
                self.match(CypherParser.RPAREN)
                self.state = 2377
                self.match(CypherParser.ON)
                self.state = 2378
                self.match(CypherParser.EACH)
                pass
            elif token in [207]:
                self.state = 2380
                self.match(CypherParser.RPAREN)
                self.state = 2382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137 or _la==273:
                    self.state = 2381
                    self.leftArrow()


                self.state = 2384
                self.arrowLine()
                self.state = 2385
                self.match(CypherParser.LBRACKET)
                self.state = 2386
                self.variable()
                self.state = 2387
                self.match(CypherParser.RBRACKET)
                self.state = 2388
                self.arrowLine()
                self.state = 2390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109 or _la==274:
                    self.state = 2389
                    self.rightArrow()


                self.state = 2392
                self.match(CypherParser.LPAREN)
                self.state = 2393
                self.match(CypherParser.RPAREN)
                self.state = 2394
                self.match(CypherParser.ON)
                self.state = 2396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
                if la_ == 1:
                    self.state = 2395
                    self.match(CypherParser.EACH)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2400
            self.lookupIndexFunctionName()
            self.state = 2401
            self.match(CypherParser.LPAREN)
            self.state = 2402
            self.variable()
            self.state = 2403
            self.match(CypherParser.RPAREN)
            self.state = 2406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2404
                self.match(CypherParser.OPTIONS)
                self.state = 2405
                self.mapOrParameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookupIndexFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_lookupIndexFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookupIndexFunctionName" ):
                listener.enterLookupIndexFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookupIndexFunctionName" ):
                listener.exitLookupIndexFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookupIndexFunctionName" ):
                return visitor.visitLookupIndexFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def lookupIndexFunctionName(self):

        localctx = CypherParser.LookupIndexFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_lookupIndexFunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def labelOrRelType(self):
            return self.getTypedRuleContext(CypherParser.LabelOrRelTypeContext,0)


        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def symbolicNamePositions(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNamePositionsContext,0)


        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndex" ):
                return visitor.visitDropIndex(self)
            else:
                return visitor.visitChildren(self)




    def dropIndex(self):

        localctx = CypherParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2410
            self.match(CypherParser.INDEX)
            self.state = 2422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2411
                self.match(CypherParser.ON)
                self.state = 2412
                self.labelOrRelType()
                self.state = 2413
                self.match(CypherParser.LPAREN)
                self.state = 2414
                self.symbolicNamePositions()
                self.state = 2415
                self.match(CypherParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 2417
                self.symbolicNameString()
                self.state = 2420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2418
                    self.match(CypherParser.IF)
                    self.state = 2419
                    self.match(CypherParser.EXISTS)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.VariableContext)
            else:
                return self.getTypedRuleContext(CypherParser.VariableContext,i)


        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PropertyContext)
            else:
                return self.getTypedRuleContext(CypherParser.PropertyContext,i)


        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_propertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyList" ):
                listener.enterPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyList" ):
                listener.exitPropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyList" ):
                return visitor.visitPropertyList(self)
            else:
                return visitor.visitChildren(self)




    def propertyList(self):

        localctx = CypherParser.PropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_propertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 2424
                self.variable()
                self.state = 2425
                self.property_()
                pass
            elif token in [136]:
                self.state = 2427
                self.match(CypherParser.LPAREN)
                self.state = 2428
                self.variable()
                self.state = 2429
                self.property_()
                self.state = 2436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==39:
                    self.state = 2430
                    self.match(CypherParser.COMMA)
                    self.state = 2431
                    self.variable()
                    self.state = 2432
                    self.property_()
                    self.state = 2438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2439
                self.match(CypherParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(CypherParser.RENAME, 0)

        def renameRole(self):
            return self.getTypedRuleContext(CypherParser.RenameRoleContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(CypherParser.RenameUserContext,0)


        def renameServer(self):
            return self.getTypedRuleContext(CypherParser.RenameServerContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_renameCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameCommand" ):
                listener.enterRenameCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameCommand" ):
                listener.exitRenameCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameCommand" ):
                return visitor.visitRenameCommand(self)
            else:
                return visitor.visitChildren(self)




    def renameCommand(self):

        localctx = CypherParser.RenameCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_renameCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2443
            self.match(CypherParser.RENAME)
            self.state = 2447
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [203]:
                self.state = 2444
                self.renameRole()
                pass
            elif token in [256]:
                self.state = 2445
                self.renameUser()
                pass
            elif token in [216]:
                self.state = 2446
                self.renameServer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(CypherParser.GRANT, 0)

        def IMMUTABLE(self):
            return self.getToken(CypherParser.IMMUTABLE, 0)

        def grantPrivilege(self):
            return self.getTypedRuleContext(CypherParser.GrantPrivilegeContext,0)


        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def grantRoleManagement(self):
            return self.getTypedRuleContext(CypherParser.GrantRoleManagementContext,0)


        def ROLES(self):
            return self.getToken(CypherParser.ROLES, 0)

        def grantRole(self):
            return self.getTypedRuleContext(CypherParser.GrantRoleContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_grantCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantCommand" ):
                listener.enterGrantCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantCommand" ):
                listener.exitGrantCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantCommand" ):
                return visitor.visitGrantCommand(self)
            else:
                return visitor.visitChildren(self)




    def grantCommand(self):

        localctx = CypherParser.GrantCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_grantCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2449
            self.match(CypherParser.GRANT)
            self.state = 2466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.state = 2450
                self.match(CypherParser.IMMUTABLE)
                self.state = 2454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7, 11, 14, 15, 21, 43, 44, 45, 50, 54, 62, 74, 88, 113, 116, 117, 139, 140, 145, 177, 187, 190, 195, 216, 218, 223, 227, 230, 235, 244, 246, 256, 266]:
                    self.state = 2451
                    self.grantPrivilege()
                    pass
                elif token in [203]:
                    self.state = 2452
                    self.match(CypherParser.ROLE)
                    self.state = 2453
                    self.grantRoleManagement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [7, 11, 14, 15, 21, 43, 44, 45, 50, 54, 62, 74, 88, 113, 116, 117, 139, 140, 145, 177, 187, 190, 195, 203, 204, 216, 218, 223, 227, 230, 235, 244, 246, 256, 266]:
                self.state = 2464
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7, 11, 14, 15, 21, 43, 44, 45, 50, 54, 62, 74, 88, 113, 116, 117, 139, 140, 145, 177, 187, 190, 195, 216, 218, 223, 227, 230, 235, 244, 246, 256, 266]:
                    self.state = 2456
                    self.grantPrivilege()
                    pass
                elif token in [203]:
                    self.state = 2457
                    self.match(CypherParser.ROLE)
                    self.state = 2460
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                    if la_ == 1:
                        self.state = 2458
                        self.grantRoleManagement()
                        pass

                    elif la_ == 2:
                        self.state = 2459
                        self.grantRole()
                        pass


                    pass
                elif token in [204]:
                    self.state = 2462
                    self.match(CypherParser.ROLES)
                    self.state = 2463
                    self.grantRole()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(CypherParser.REVOKE, 0)

        def DENY(self):
            return self.getToken(CypherParser.DENY, 0)

        def GRANT(self):
            return self.getToken(CypherParser.GRANT, 0)

        def IMMUTABLE(self):
            return self.getToken(CypherParser.IMMUTABLE, 0)

        def revokePrivilege(self):
            return self.getTypedRuleContext(CypherParser.RevokePrivilegeContext,0)


        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def revokeRoleManagement(self):
            return self.getTypedRuleContext(CypherParser.RevokeRoleManagementContext,0)


        def revokeRole(self):
            return self.getTypedRuleContext(CypherParser.RevokeRoleContext,0)


        def ROLES(self):
            return self.getToken(CypherParser.ROLES, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_revokeCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeCommand" ):
                listener.enterRevokeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeCommand" ):
                listener.exitRevokeCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeCommand" ):
                return visitor.visitRevokeCommand(self)
            else:
                return visitor.visitChildren(self)




    def revokeCommand(self):

        localctx = CypherParser.RevokeCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_revokeCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self.match(CypherParser.REVOKE)
            self.state = 2500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.state = 2469
                self.match(CypherParser.DENY)
                self.state = 2471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 2470
                    self.match(CypherParser.IMMUTABLE)


                self.state = 2476
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7, 11, 14, 15, 21, 43, 44, 45, 50, 54, 62, 74, 88, 113, 116, 117, 139, 140, 145, 177, 187, 190, 195, 216, 218, 223, 227, 230, 235, 244, 246, 256, 266]:
                    self.state = 2473
                    self.revokePrivilege()
                    pass
                elif token in [203]:
                    self.state = 2474
                    self.match(CypherParser.ROLE)
                    self.state = 2475
                    self.revokeRoleManagement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [104]:
                self.state = 2478
                self.match(CypherParser.GRANT)
                self.state = 2480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 2479
                    self.match(CypherParser.IMMUTABLE)


                self.state = 2485
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7, 11, 14, 15, 21, 43, 44, 45, 50, 54, 62, 74, 88, 113, 116, 117, 139, 140, 145, 177, 187, 190, 195, 216, 218, 223, 227, 230, 235, 244, 246, 256, 266]:
                    self.state = 2482
                    self.revokePrivilege()
                    pass
                elif token in [203]:
                    self.state = 2483
                    self.match(CypherParser.ROLE)
                    self.state = 2484
                    self.revokeRoleManagement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [114]:
                self.state = 2487
                self.match(CypherParser.IMMUTABLE)
                self.state = 2491
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7, 11, 14, 15, 21, 43, 44, 45, 50, 54, 62, 74, 88, 113, 116, 117, 139, 140, 145, 177, 187, 190, 195, 216, 218, 223, 227, 230, 235, 244, 246, 256, 266]:
                    self.state = 2488
                    self.revokePrivilege()
                    pass
                elif token in [203]:
                    self.state = 2489
                    self.match(CypherParser.ROLE)
                    self.state = 2490
                    self.revokeRoleManagement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [7, 11, 14, 15, 21, 43, 44, 45, 50, 54, 62, 74, 88, 113, 116, 117, 139, 140, 145, 177, 187, 190, 195, 203, 204, 216, 218, 223, 227, 230, 235, 244, 246, 256, 266]:
                self.state = 2498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                if la_ == 1:
                    self.state = 2493
                    self.revokePrivilege()
                    pass

                elif la_ == 2:
                    self.state = 2494
                    self.match(CypherParser.ROLE)
                    self.state = 2495
                    self.revokeRoleManagement()
                    pass

                elif la_ == 3:
                    self.state = 2496
                    _la = self._input.LA(1)
                    if not(_la==203 or _la==204):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2497
                    self.revokeRole()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableServerCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(CypherParser.ENABLE, 0)

        def SERVER(self):
            return self.getToken(CypherParser.SERVER, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(CypherParser.StringOrParameterContext,0)


        def options_(self):
            return self.getTypedRuleContext(CypherParser.Options_Context,0)


        def getRuleIndex(self):
            return CypherParser.RULE_enableServerCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableServerCommand" ):
                listener.enterEnableServerCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableServerCommand" ):
                listener.exitEnableServerCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnableServerCommand" ):
                return visitor.visitEnableServerCommand(self)
            else:
                return visitor.visitChildren(self)




    def enableServerCommand(self):

        localctx = CypherParser.EnableServerCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_enableServerCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2502
            self.match(CypherParser.ENABLE)
            self.state = 2503
            self.match(CypherParser.SERVER)
            self.state = 2504
            self.stringOrParameter()
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2505
                self.options_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER(self):
            return self.getToken(CypherParser.SERVER, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(CypherParser.StringOrParameterContext,0)


        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def options_(self):
            return self.getTypedRuleContext(CypherParser.Options_Context,0)


        def getRuleIndex(self):
            return CypherParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterServer" ):
                return visitor.visitAlterServer(self)
            else:
                return visitor.visitChildren(self)




    def alterServer(self):

        localctx = CypherParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_alterServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self.match(CypherParser.SERVER)
            self.state = 2509
            self.stringOrParameter()
            self.state = 2510
            self.match(CypherParser.SET)
            self.state = 2511
            self.options_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER(self):
            return self.getToken(CypherParser.SERVER, 0)

        def stringOrParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.StringOrParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.StringOrParameterContext,i)


        def TO(self):
            return self.getToken(CypherParser.TO, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_renameServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameServer" ):
                listener.enterRenameServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameServer" ):
                listener.exitRenameServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameServer" ):
                return visitor.visitRenameServer(self)
            else:
                return visitor.visitChildren(self)




    def renameServer(self):

        localctx = CypherParser.RenameServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_renameServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2513
            self.match(CypherParser.SERVER)
            self.state = 2514
            self.stringOrParameter()
            self.state = 2515
            self.match(CypherParser.TO)
            self.state = 2516
            self.stringOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER(self):
            return self.getToken(CypherParser.SERVER, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(CypherParser.StringOrParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropServer" ):
                return visitor.visitDropServer(self)
            else:
                return visitor.visitChildren(self)




    def dropServer(self):

        localctx = CypherParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_dropServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self.match(CypherParser.SERVER)
            self.state = 2519
            self.stringOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowServersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVERS(self):
            return self.getToken(CypherParser.SERVERS, 0)

        def SERVER(self):
            return self.getToken(CypherParser.SERVER, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showServers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowServers" ):
                listener.enterShowServers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowServers" ):
                listener.exitShowServers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowServers" ):
                return visitor.visitShowServers(self)
            else:
                return visitor.visitChildren(self)




    def showServers(self):

        localctx = CypherParser.ShowServersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_showServers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2521
            _la = self._input.LA(1)
            if not(_la==216 or _la==217):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 2522
                self.yieldClause()
                self.state = 2524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2523
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 2526
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocationCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deallocateDatabaseFromServers(self):
            return self.getTypedRuleContext(CypherParser.DeallocateDatabaseFromServersContext,0)


        def reallocateDatabases(self):
            return self.getTypedRuleContext(CypherParser.ReallocateDatabasesContext,0)


        def DRYRUN(self):
            return self.getToken(CypherParser.DRYRUN, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_allocationCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocationCommand" ):
                listener.enterAllocationCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocationCommand" ):
                listener.exitAllocationCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocationCommand" ):
                return visitor.visitAllocationCommand(self)
            else:
                return visitor.visitChildren(self)




    def allocationCommand(self):

        localctx = CypherParser.AllocationCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_allocationCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 2529
                self.match(CypherParser.DRYRUN)


            self.state = 2534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.state = 2532
                self.deallocateDatabaseFromServers()
                pass
            elif token in [188]:
                self.state = 2533
                self.reallocateDatabases()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocateDatabaseFromServersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(CypherParser.DEALLOCATE, 0)

        def FROM(self):
            return self.getToken(CypherParser.FROM, 0)

        def stringOrParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.StringOrParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.StringOrParameterContext,i)


        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(CypherParser.DATABASES, 0)

        def SERVER(self):
            return self.getToken(CypherParser.SERVER, 0)

        def SERVERS(self):
            return self.getToken(CypherParser.SERVERS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_deallocateDatabaseFromServers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocateDatabaseFromServers" ):
                listener.enterDeallocateDatabaseFromServers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocateDatabaseFromServers" ):
                listener.exitDeallocateDatabaseFromServers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocateDatabaseFromServers" ):
                return visitor.visitDeallocateDatabaseFromServers(self)
            else:
                return visitor.visitChildren(self)




    def deallocateDatabaseFromServers(self):

        localctx = CypherParser.DeallocateDatabaseFromServersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_deallocateDatabaseFromServers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2536
            self.match(CypherParser.DEALLOCATE)
            self.state = 2537
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2538
            self.match(CypherParser.FROM)
            self.state = 2539
            _la = self._input.LA(1)
            if not(_la==216 or _la==217):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2540
            self.stringOrParameter()
            self.state = 2545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 2541
                self.match(CypherParser.COMMA)
                self.state = 2542
                self.stringOrParameter()
                self.state = 2547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReallocateDatabasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REALLOCATE(self):
            return self.getToken(CypherParser.REALLOCATE, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(CypherParser.DATABASES, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_reallocateDatabases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReallocateDatabases" ):
                listener.enterReallocateDatabases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReallocateDatabases" ):
                listener.exitReallocateDatabases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReallocateDatabases" ):
                return visitor.visitReallocateDatabases(self)
            else:
                return visitor.visitChildren(self)




    def reallocateDatabases(self):

        localctx = CypherParser.ReallocateDatabasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_reallocateDatabases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2548
            self.match(CypherParser.REALLOCATE)
            self.state = 2549
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def symbolicNameOrStringParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameOrStringParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,i)


        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def COPY(self):
            return self.getToken(CypherParser.COPY, 0)

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_createRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRole" ):
                return visitor.visitCreateRole(self)
            else:
                return visitor.visitChildren(self)




    def createRole(self):

        localctx = CypherParser.CreateRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_createRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2551
            self.match(CypherParser.ROLE)
            self.state = 2552
            self.symbolicNameOrStringParameter()
            self.state = 2556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 2553
                self.match(CypherParser.IF)
                self.state = 2554
                self.match(CypherParser.NOT)
                self.state = 2555
                self.match(CypherParser.EXISTS)


            self.state = 2562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 2558
                self.match(CypherParser.AS)
                self.state = 2559
                self.match(CypherParser.COPY)
                self.state = 2560
                self.match(CypherParser.OF)
                self.state = 2561
                self.symbolicNameOrStringParameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,0)


        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_dropRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRole" ):
                return visitor.visitDropRole(self)
            else:
                return visitor.visitChildren(self)




    def dropRole(self):

        localctx = CypherParser.DropRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_dropRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.match(CypherParser.ROLE)
            self.state = 2565
            self.symbolicNameOrStringParameter()
            self.state = 2568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 2566
                self.match(CypherParser.IF)
                self.state = 2567
                self.match(CypherParser.EXISTS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def symbolicNameOrStringParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameOrStringParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,i)


        def TO(self):
            return self.getToken(CypherParser.TO, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_renameRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameRole" ):
                listener.enterRenameRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameRole" ):
                listener.exitRenameRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameRole" ):
                return visitor.visitRenameRole(self)
            else:
                return visitor.visitChildren(self)




    def renameRole(self):

        localctx = CypherParser.RenameRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_renameRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2570
            self.match(CypherParser.ROLE)
            self.state = 2571
            self.symbolicNameOrStringParameter()
            self.state = 2574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 2572
                self.match(CypherParser.IF)
                self.state = 2573
                self.match(CypherParser.EXISTS)


            self.state = 2576
            self.match(CypherParser.TO)
            self.state = 2577
            self.symbolicNameOrStringParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def USERS(self):
            return self.getToken(CypherParser.USERS, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showRoles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoles" ):
                listener.enterShowRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoles" ):
                listener.exitShowRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoles" ):
                return visitor.visitShowRoles(self)
            else:
                return visitor.visitChildren(self)




    def showRoles(self):

        localctx = CypherParser.ShowRolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_showRoles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==264:
                self.state = 2579
                self.match(CypherParser.WITH)
                self.state = 2580
                _la = self._input.LA(1)
                if not(_la==256 or _la==257):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 2583
                self.yieldClause()
                self.state = 2585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2584
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 2587
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameOrStringParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameOrStringParameterListContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,i)


        def TO(self):
            return self.getToken(CypherParser.TO, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_grantRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRole" ):
                listener.enterGrantRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRole" ):
                listener.exitGrantRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantRole" ):
                return visitor.visitGrantRole(self)
            else:
                return visitor.visitChildren(self)




    def grantRole(self):

        localctx = CypherParser.GrantRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_grantRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.symbolicNameOrStringParameterList()
            self.state = 2591
            self.match(CypherParser.TO)
            self.state = 2592
            self.symbolicNameOrStringParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameOrStringParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameOrStringParameterListContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,i)


        def FROM(self):
            return self.getToken(CypherParser.FROM, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_revokeRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRole" ):
                listener.enterRevokeRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRole" ):
                listener.exitRevokeRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeRole" ):
                return visitor.visitRevokeRole(self)
            else:
                return visitor.visitChildren(self)




    def revokeRole(self):

        localctx = CypherParser.RevokeRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_revokeRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            self.symbolicNameOrStringParameterList()
            self.state = 2595
            self.match(CypherParser.FROM)
            self.state = 2596
            self.symbolicNameOrStringParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,0)


        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SET)
            else:
                return self.getToken(CypherParser.SET, i)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PASSWORD)
            else:
                return self.getToken(CypherParser.PASSWORD, i)

        def passwordExpression(self):
            return self.getTypedRuleContext(CypherParser.PasswordExpressionContext,0)


        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def passwordChangeRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PasswordChangeRequiredContext)
            else:
                return self.getTypedRuleContext(CypherParser.PasswordChangeRequiredContext,i)


        def PLAINTEXT(self):
            return self.getToken(CypherParser.PLAINTEXT, 0)

        def ENCRYPTED(self):
            return self.getToken(CypherParser.ENCRYPTED, 0)

        def userStatus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.UserStatusContext)
            else:
                return self.getTypedRuleContext(CypherParser.UserStatusContext,i)


        def homeDatabase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.HomeDatabaseContext)
            else:
                return self.getTypedRuleContext(CypherParser.HomeDatabaseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_createUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUser" ):
                listener.enterCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUser" ):
                listener.exitCreateUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUser" ):
                return visitor.visitCreateUser(self)
            else:
                return visitor.visitChildren(self)




    def createUser(self):

        localctx = CypherParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_createUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2598
            self.match(CypherParser.USER)
            self.state = 2599
            self.symbolicNameOrStringParameter()
            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 2600
                self.match(CypherParser.IF)
                self.state = 2601
                self.match(CypherParser.NOT)
                self.state = 2602
                self.match(CypherParser.EXISTS)


            self.state = 2605
            self.match(CypherParser.SET)
            self.state = 2607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83 or _la==169:
                self.state = 2606
                _la = self._input.LA(1)
                if not(_la==83 or _la==169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2609
            self.match(CypherParser.PASSWORD)
            self.state = 2610
            self.passwordExpression()
            self.state = 2612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 2611
                self.passwordChangeRequired()


            self.state = 2623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 2614
                self.match(CypherParser.SET)
                self.state = 2619
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [164]:
                    self.state = 2615
                    self.match(CypherParser.PASSWORD)
                    self.state = 2616
                    self.passwordChangeRequired()
                    pass
                elif token in [229]:
                    self.state = 2617
                    self.userStatus()
                    pass
                elif token in [111]:
                    self.state = 2618
                    self.homeDatabase()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,0)


        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropUser" ):
                return visitor.visitDropUser(self)
            else:
                return visitor.visitChildren(self)




    def dropUser(self):

        localctx = CypherParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_dropUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2626
            self.match(CypherParser.USER)
            self.state = 2627
            self.symbolicNameOrStringParameter()
            self.state = 2630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 2628
                self.match(CypherParser.IF)
                self.state = 2629
                self.match(CypherParser.EXISTS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def symbolicNameOrStringParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameOrStringParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,i)


        def TO(self):
            return self.getToken(CypherParser.TO, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameUser" ):
                return visitor.visitRenameUser(self)
            else:
                return visitor.visitChildren(self)




    def renameUser(self):

        localctx = CypherParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2632
            self.match(CypherParser.USER)
            self.state = 2633
            self.symbolicNameOrStringParameter()
            self.state = 2636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 2634
                self.match(CypherParser.IF)
                self.state = 2635
                self.match(CypherParser.EXISTS)


            self.state = 2638
            self.match(CypherParser.TO)
            self.state = 2639
            self.symbolicNameOrStringParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCurrentUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(CypherParser.CURRENT, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def PASSWORD(self):
            return self.getToken(CypherParser.PASSWORD, 0)

        def FROM(self):
            return self.getToken(CypherParser.FROM, 0)

        def passwordExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PasswordExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.PasswordExpressionContext,i)


        def TO(self):
            return self.getToken(CypherParser.TO, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_alterCurrentUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCurrentUser" ):
                listener.enterAlterCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCurrentUser" ):
                listener.exitAlterCurrentUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterCurrentUser" ):
                return visitor.visitAlterCurrentUser(self)
            else:
                return visitor.visitChildren(self)




    def alterCurrentUser(self):

        localctx = CypherParser.AlterCurrentUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_alterCurrentUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self.match(CypherParser.CURRENT)
            self.state = 2642
            self.match(CypherParser.USER)
            self.state = 2643
            self.match(CypherParser.SET)
            self.state = 2644
            self.match(CypherParser.PASSWORD)
            self.state = 2645
            self.match(CypherParser.FROM)
            self.state = 2646
            self.passwordExpression()
            self.state = 2647
            self.match(CypherParser.TO)
            self.state = 2648
            self.passwordExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,0)


        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def HOME(self):
            return self.getToken(CypherParser.HOME, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SET)
            else:
                return self.getToken(CypherParser.SET, i)

        def PLAINTEXT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PLAINTEXT)
            else:
                return self.getToken(CypherParser.PLAINTEXT, i)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PASSWORD)
            else:
                return self.getToken(CypherParser.PASSWORD, i)

        def setPassword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SetPasswordContext)
            else:
                return self.getTypedRuleContext(CypherParser.SetPasswordContext,i)


        def ENCRYPTED(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.ENCRYPTED)
            else:
                return self.getToken(CypherParser.ENCRYPTED, i)

        def userStatus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.UserStatusContext)
            else:
                return self.getTypedRuleContext(CypherParser.UserStatusContext,i)


        def homeDatabase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.HomeDatabaseContext)
            else:
                return self.getTypedRuleContext(CypherParser.HomeDatabaseContext,i)


        def passwordChangeRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PasswordChangeRequiredContext)
            else:
                return self.getTypedRuleContext(CypherParser.PasswordChangeRequiredContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_alterUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUser" ):
                listener.enterAlterUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUser" ):
                listener.exitAlterUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUser" ):
                return visitor.visitAlterUser(self)
            else:
                return visitor.visitChildren(self)




    def alterUser(self):

        localctx = CypherParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_alterUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2650
            self.match(CypherParser.USER)
            self.state = 2651
            self.symbolicNameOrStringParameter()
            self.state = 2654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 2652
                self.match(CypherParser.IF)
                self.state = 2653
                self.match(CypherParser.EXISTS)


            self.state = 2688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [218]:
                self.state = 2681 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2656
                    self.match(CypherParser.SET)
                    self.state = 2679
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [169]:
                        self.state = 2657
                        self.match(CypherParser.PLAINTEXT)
                        self.state = 2658
                        self.match(CypherParser.PASSWORD)
                        self.state = 2659
                        self.setPassword()
                        self.state = 2661
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==35:
                            self.state = 2660
                            self.passwordChangeRequired()


                        pass
                    elif token in [83]:
                        self.state = 2663
                        self.match(CypherParser.ENCRYPTED)
                        self.state = 2664
                        self.match(CypherParser.PASSWORD)
                        self.state = 2665
                        self.setPassword()
                        self.state = 2667
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==35:
                            self.state = 2666
                            self.passwordChangeRequired()


                        pass
                    elif token in [164]:
                        self.state = 2669
                        self.match(CypherParser.PASSWORD)
                        self.state = 2675
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [35]:
                            self.state = 2670
                            self.passwordChangeRequired()
                            pass
                        elif token in [68, 276, 277]:
                            self.state = 2671
                            self.setPassword()
                            self.state = 2673
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==35:
                                self.state = 2672
                                self.passwordChangeRequired()


                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [229]:
                        self.state = 2677
                        self.userStatus()
                        pass
                    elif token in [111]:
                        self.state = 2678
                        self.homeDatabase()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2683 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==218):
                        break

                pass
            elif token in [195]:
                self.state = 2685
                self.match(CypherParser.REMOVE)
                self.state = 2686
                self.match(CypherParser.HOME)
                self.state = 2687
                self.match(CypherParser.DATABASE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def passwordExpression(self):
            return self.getTypedRuleContext(CypherParser.PasswordExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_setPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPassword" ):
                listener.enterSetPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPassword" ):
                listener.exitSetPassword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPassword" ):
                return visitor.visitSetPassword(self)
            else:
                return visitor.visitChildren(self)




    def setPassword(self):

        localctx = CypherParser.SetPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_setPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2690
            self.passwordExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringToken(self):
            return self.getTypedRuleContext(CypherParser.StringTokenContext,0)


        def parameter(self):
            return self.getTypedRuleContext(CypherParser.ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_passwordExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordExpression" ):
                listener.enterPasswordExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordExpression" ):
                listener.exitPasswordExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordExpression" ):
                return visitor.visitPasswordExpression(self)
            else:
                return visitor.visitChildren(self)




    def passwordExpression(self):

        localctx = CypherParser.PasswordExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_passwordExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [276, 277]:
                self.state = 2692
                self.stringToken()
                pass
            elif token in [68]:
                self.state = 2693
                self.parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordChangeRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(CypherParser.CHANGE, 0)

        def REQUIRED(self):
            return self.getToken(CypherParser.REQUIRED, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_passwordChangeRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordChangeRequired" ):
                listener.enterPasswordChangeRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordChangeRequired" ):
                listener.exitPasswordChangeRequired(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordChangeRequired" ):
                return visitor.visitPasswordChangeRequired(self)
            else:
                return visitor.visitChildren(self)




    def passwordChangeRequired(self):

        localctx = CypherParser.PasswordChangeRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_passwordChangeRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.match(CypherParser.CHANGE)
            self.state = 2698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 2697
                self.match(CypherParser.NOT)


            self.state = 2700
            self.match(CypherParser.REQUIRED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserStatusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATUS(self):
            return self.getToken(CypherParser.STATUS, 0)

        def SUSPENDED(self):
            return self.getToken(CypherParser.SUSPENDED, 0)

        def ACTIVE(self):
            return self.getToken(CypherParser.ACTIVE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_userStatus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserStatus" ):
                listener.enterUserStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserStatus" ):
                listener.exitUserStatus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserStatus" ):
                return visitor.visitUserStatus(self)
            else:
                return visitor.visitChildren(self)




    def userStatus(self):

        localctx = CypherParser.UserStatusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_userStatus)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2702
            self.match(CypherParser.STATUS)
            self.state = 2703
            _la = self._input.LA(1)
            if not(_la==8 or _la==233):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HomeDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOME(self):
            return self.getToken(CypherParser.HOME, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_homeDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHomeDatabase" ):
                listener.enterHomeDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHomeDatabase" ):
                listener.exitHomeDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHomeDatabase" ):
                return visitor.visitHomeDatabase(self)
            else:
                return visitor.visitChildren(self)




    def homeDatabase(self):

        localctx = CypherParser.HomeDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_homeDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2705
            self.match(CypherParser.HOME)
            self.state = 2706
            self.match(CypherParser.DATABASE)
            self.state = 2707
            self.symbolicAliasName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowUsersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showUsers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowUsers" ):
                listener.enterShowUsers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowUsers" ):
                listener.exitShowUsers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowUsers" ):
                return visitor.visitShowUsers(self)
            else:
                return visitor.visitChildren(self)




    def showUsers(self):

        localctx = CypherParser.ShowUsersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_showUsers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 2709
                self.yieldClause()
                self.state = 2711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2710
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 2713
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCurrentUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(CypherParser.CURRENT, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showCurrentUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCurrentUser" ):
                listener.enterShowCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCurrentUser" ):
                listener.exitShowCurrentUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCurrentUser" ):
                return visitor.visitShowCurrentUser(self)
            else:
                return visitor.visitChildren(self)




    def showCurrentUser(self):

        localctx = CypherParser.ShowCurrentUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_showCurrentUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716
            self.match(CypherParser.CURRENT)
            self.state = 2717
            self.match(CypherParser.USER)
            self.state = 2723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 2718
                self.yieldClause()
                self.state = 2720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2719
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 2722
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSupportedPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPPORTED(self):
            return self.getToken(CypherParser.SUPPORTED, 0)

        def PRIVILEGE(self):
            return self.getToken(CypherParser.PRIVILEGE, 0)

        def PRIVILEGES(self):
            return self.getToken(CypherParser.PRIVILEGES, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showSupportedPrivileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSupportedPrivileges" ):
                listener.enterShowSupportedPrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSupportedPrivileges" ):
                listener.exitShowSupportedPrivileges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSupportedPrivileges" ):
                return visitor.visitShowSupportedPrivileges(self)
            else:
                return visitor.visitChildren(self)




    def showSupportedPrivileges(self):

        localctx = CypherParser.ShowSupportedPrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_showSupportedPrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2725
            self.match(CypherParser.SUPPORTED)
            self.state = 2726
            _la = self._input.LA(1)
            if not(_la==177 or _la==178):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2732
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 2727
                self.yieldClause()
                self.state = 2729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2728
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 2731
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVILEGE(self):
            return self.getToken(CypherParser.PRIVILEGE, 0)

        def PRIVILEGES(self):
            return self.getToken(CypherParser.PRIVILEGES, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def COMMAND(self):
            return self.getToken(CypherParser.COMMAND, 0)

        def COMMANDS(self):
            return self.getToken(CypherParser.COMMANDS, 0)

        def REVOKE(self):
            return self.getToken(CypherParser.REVOKE, 0)

        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showPrivileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPrivileges" ):
                listener.enterShowPrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPrivileges" ):
                listener.exitShowPrivileges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPrivileges" ):
                return visitor.visitShowPrivileges(self)
            else:
                return visitor.visitChildren(self)




    def showPrivileges(self):

        localctx = CypherParser.ShowPrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_showPrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2734
            _la = self._input.LA(1)
            if not(_la==177 or _la==178):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 2735
                self.match(CypherParser.AS)
                self.state = 2737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 2736
                    self.match(CypherParser.REVOKE)


                self.state = 2739
                _la = self._input.LA(1)
                if not(_la==40 or _la==41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 2742
                self.yieldClause()
                self.state = 2744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2743
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 2746
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRolePrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def PRIVILEGE(self):
            return self.getToken(CypherParser.PRIVILEGE, 0)

        def PRIVILEGES(self):
            return self.getToken(CypherParser.PRIVILEGES, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def COMMAND(self):
            return self.getToken(CypherParser.COMMAND, 0)

        def COMMANDS(self):
            return self.getToken(CypherParser.COMMANDS, 0)

        def REVOKE(self):
            return self.getToken(CypherParser.REVOKE, 0)

        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showRolePrivileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRolePrivileges" ):
                listener.enterShowRolePrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRolePrivileges" ):
                listener.exitShowRolePrivileges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRolePrivileges" ):
                return visitor.visitShowRolePrivileges(self)
            else:
                return visitor.visitChildren(self)




    def showRolePrivileges(self):

        localctx = CypherParser.ShowRolePrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_showRolePrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2749
            self.symbolicNameOrStringParameterList()
            self.state = 2750
            _la = self._input.LA(1)
            if not(_la==177 or _la==178):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 2751
                self.match(CypherParser.AS)
                self.state = 2753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 2752
                    self.match(CypherParser.REVOKE)


                self.state = 2755
                _la = self._input.LA(1)
                if not(_la==40 or _la==41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 2758
                self.yieldClause()
                self.state = 2760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2759
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 2762
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowUserPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def PRIVILEGE(self):
            return self.getToken(CypherParser.PRIVILEGE, 0)

        def PRIVILEGES(self):
            return self.getToken(CypherParser.PRIVILEGES, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def COMMAND(self):
            return self.getToken(CypherParser.COMMAND, 0)

        def COMMANDS(self):
            return self.getToken(CypherParser.COMMANDS, 0)

        def REVOKE(self):
            return self.getToken(CypherParser.REVOKE, 0)

        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showUserPrivileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowUserPrivileges" ):
                listener.enterShowUserPrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowUserPrivileges" ):
                listener.exitShowUserPrivileges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowUserPrivileges" ):
                return visitor.visitShowUserPrivileges(self)
            else:
                return visitor.visitChildren(self)




    def showUserPrivileges(self):

        localctx = CypherParser.ShowUserPrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_showUserPrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 2765
                self.symbolicNameOrStringParameterList()
                self.state = 2766
                _la = self._input.LA(1)
                if not(_la==177 or _la==178):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.state = 2768
                _la = self._input.LA(1)
                if not(_la==177 or _la==178):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 2769
                self.symbolicNameOrStringParameterList()
                self.state = 2770
                _la = self._input.LA(1)
                if not(_la==177 or _la==178):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


            self.state = 2779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 2774
                self.match(CypherParser.AS)
                self.state = 2776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 2775
                    self.match(CypherParser.REVOKE)


                self.state = 2778
                _la = self._input.LA(1)
                if not(_la==40 or _la==41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 2781
                self.yieldClause()
                self.state = 2783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2782
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 2785
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRoleManagementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleManagementPrivilege(self):
            return self.getTypedRuleContext(CypherParser.RoleManagementPrivilegeContext,0)


        def TO(self):
            return self.getToken(CypherParser.TO, 0)

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_grantRoleManagement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRoleManagement" ):
                listener.enterGrantRoleManagement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRoleManagement" ):
                listener.exitGrantRoleManagement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantRoleManagement" ):
                return visitor.visitGrantRoleManagement(self)
            else:
                return visitor.visitChildren(self)




    def grantRoleManagement(self):

        localctx = CypherParser.GrantRoleManagementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_grantRoleManagement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            self.roleManagementPrivilege()
            self.state = 2789
            self.match(CypherParser.TO)
            self.state = 2790
            self.symbolicNameOrStringParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRoleManagementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleManagementPrivilege(self):
            return self.getTypedRuleContext(CypherParser.RoleManagementPrivilegeContext,0)


        def FROM(self):
            return self.getToken(CypherParser.FROM, 0)

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_revokeRoleManagement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRoleManagement" ):
                listener.enterRevokeRoleManagement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRoleManagement" ):
                listener.exitRevokeRoleManagement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeRoleManagement" ):
                return visitor.visitRevokeRoleManagement(self)
            else:
                return visitor.visitChildren(self)




    def revokeRoleManagement(self):

        localctx = CypherParser.RevokeRoleManagementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_revokeRoleManagement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2792
            self.roleManagementPrivilege()
            self.state = 2793
            self.match(CypherParser.FROM)
            self.state = 2794
            self.symbolicNameOrStringParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleManagementPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MANAGEMENT(self):
            return self.getToken(CypherParser.MANAGEMENT, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_roleManagementPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleManagementPrivilege" ):
                listener.enterRoleManagementPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleManagementPrivilege" ):
                listener.exitRoleManagementPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleManagementPrivilege" ):
                return visitor.visitRoleManagementPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def roleManagementPrivilege(self):

        localctx = CypherParser.RoleManagementPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_roleManagementPrivilege)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2796
            self.match(CypherParser.MANAGEMENT)
            self.state = 2797
            self.match(CypherParser.ON)
            self.state = 2798
            self.match(CypherParser.DBMS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(CypherParser.PrivilegeContext,0)


        def TO(self):
            return self.getToken(CypherParser.TO, 0)

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_grantPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantPrivilege" ):
                listener.enterGrantPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantPrivilege" ):
                listener.exitGrantPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantPrivilege" ):
                return visitor.visitGrantPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def grantPrivilege(self):

        localctx = CypherParser.GrantPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_grantPrivilege)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2800
            self.privilege()
            self.state = 2801
            self.match(CypherParser.TO)
            self.state = 2802
            self.symbolicNameOrStringParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DenyPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DENY(self):
            return self.getToken(CypherParser.DENY, 0)

        def TO(self):
            return self.getToken(CypherParser.TO, 0)

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def privilege(self):
            return self.getTypedRuleContext(CypherParser.PrivilegeContext,0)


        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def roleManagementPrivilege(self):
            return self.getTypedRuleContext(CypherParser.RoleManagementPrivilegeContext,0)


        def IMMUTABLE(self):
            return self.getToken(CypherParser.IMMUTABLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_denyPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDenyPrivilege" ):
                listener.enterDenyPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDenyPrivilege" ):
                listener.exitDenyPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDenyPrivilege" ):
                return visitor.visitDenyPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def denyPrivilege(self):

        localctx = CypherParser.DenyPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_denyPrivilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2804
            self.match(CypherParser.DENY)
            self.state = 2806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 2805
                self.match(CypherParser.IMMUTABLE)


            self.state = 2811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 11, 14, 15, 21, 43, 44, 45, 50, 54, 62, 74, 88, 113, 116, 117, 139, 140, 145, 177, 187, 190, 195, 216, 218, 223, 227, 230, 235, 244, 246, 256, 266]:
                self.state = 2808
                self.privilege()
                pass
            elif token in [203]:
                self.state = 2809
                self.match(CypherParser.ROLE)
                self.state = 2810
                self.roleManagementPrivilege()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2813
            self.match(CypherParser.TO)
            self.state = 2814
            self.symbolicNameOrStringParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokePrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(CypherParser.PrivilegeContext,0)


        def FROM(self):
            return self.getToken(CypherParser.FROM, 0)

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_revokePrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokePrivilege" ):
                listener.enterRevokePrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokePrivilege" ):
                listener.exitRevokePrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokePrivilege" ):
                return visitor.visitRevokePrivilege(self)
            else:
                return visitor.visitChildren(self)




    def revokePrivilege(self):

        localctx = CypherParser.RevokePrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_revokePrivilege)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2816
            self.privilege()
            self.state = 2817
            self.match(CypherParser.FROM)
            self.state = 2818
            self.symbolicNameOrStringParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allPrivilege(self):
            return self.getTypedRuleContext(CypherParser.AllPrivilegeContext,0)


        def createPrivilege(self):
            return self.getTypedRuleContext(CypherParser.CreatePrivilegeContext,0)


        def dropPrivilege(self):
            return self.getTypedRuleContext(CypherParser.DropPrivilegeContext,0)


        def showPrivilege(self):
            return self.getTypedRuleContext(CypherParser.ShowPrivilegeContext,0)


        def setPrivilege(self):
            return self.getTypedRuleContext(CypherParser.SetPrivilegeContext,0)


        def removePrivilege(self):
            return self.getTypedRuleContext(CypherParser.RemovePrivilegeContext,0)


        def databasePrivilege(self):
            return self.getTypedRuleContext(CypherParser.DatabasePrivilegeContext,0)


        def dbmsPrivilege(self):
            return self.getTypedRuleContext(CypherParser.DbmsPrivilegeContext,0)


        def writePrivilege(self):
            return self.getTypedRuleContext(CypherParser.WritePrivilegeContext,0)


        def qualifiedGraphPrivileges(self):
            return self.getTypedRuleContext(CypherParser.QualifiedGraphPrivilegesContext,0)


        def qualifiedGraphPrivilegesWithProperty(self):
            return self.getTypedRuleContext(CypherParser.QualifiedGraphPrivilegesWithPropertyContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilege" ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = CypherParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_privilege)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 2820
                self.allPrivilege()
                pass
            elif token in [50]:
                self.state = 2821
                self.createPrivilege()
                pass
            elif token in [74]:
                self.state = 2822
                self.dropPrivilege()
                pass
            elif token in [223]:
                self.state = 2823
                self.showPrivilege()
                pass
            elif token in [218]:
                self.state = 2824
                self.setPrivilege()
                pass
            elif token in [195]:
                self.state = 2825
                self.removePrivilege()
                pass
            elif token in [7, 44, 45, 116, 117, 145, 227, 230, 235, 244]:
                self.state = 2826
                self.databasePrivilege()
                pass
            elif token in [11, 15, 21, 43, 54, 88, 113, 177, 190, 216, 256]:
                self.state = 2827
                self.dbmsPrivilege()
                pass
            elif token in [266]:
                self.state = 2828
                self.writePrivilege()
                pass
            elif token in [62, 140]:
                self.state = 2829
                self.qualifiedGraphPrivileges()
                pass
            elif token in [139, 187, 246]:
                self.state = 2830
                self.qualifiedGraphPrivilegesWithProperty()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def allPrivilegeTarget(self):
            return self.getTypedRuleContext(CypherParser.AllPrivilegeTargetContext,0)


        def allPrivilegeType(self):
            return self.getTypedRuleContext(CypherParser.AllPrivilegeTypeContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_allPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllPrivilege" ):
                listener.enterAllPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllPrivilege" ):
                listener.exitAllPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllPrivilege" ):
                return visitor.visitAllPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def allPrivilege(self):

        localctx = CypherParser.AllPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_allPrivilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2833
            self.match(CypherParser.ALL)
            self.state = 2835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 2251799813685265) != 0) or _la==178:
                self.state = 2834
                self.allPrivilegeType()


            self.state = 2837
            self.match(CypherParser.ON)
            self.state = 2838
            self.allPrivilegeTarget()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllPrivilegeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVILEGES(self):
            return self.getToken(CypherParser.PRIVILEGES, 0)

        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def GRAPH(self):
            return self.getToken(CypherParser.GRAPH, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_allPrivilegeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllPrivilegeType" ):
                listener.enterAllPrivilegeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllPrivilegeType" ):
                listener.exitAllPrivilegeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllPrivilegeType" ):
                return visitor.visitAllPrivilegeType(self)
            else:
                return visitor.visitChildren(self)




    def allPrivilegeType(self):

        localctx = CypherParser.AllPrivilegeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_allPrivilegeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 2251799813685265) != 0):
                self.state = 2840
                _la = self._input.LA(1)
                if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 2251799813685265) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2843
            self.match(CypherParser.PRIVILEGES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllPrivilegeTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CypherParser.DEFAULT, 0)

        def GRAPH(self):
            return self.getToken(CypherParser.GRAPH, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def HOME(self):
            return self.getToken(CypherParser.HOME, 0)

        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def GRAPHS(self):
            return self.getToken(CypherParser.GRAPHS, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def symbolicAliasNameList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameListContext,0)


        def DATABASES(self):
            return self.getToken(CypherParser.DATABASES, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_allPrivilegeTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllPrivilegeTarget" ):
                listener.enterAllPrivilegeTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllPrivilegeTarget" ):
                listener.exitAllPrivilegeTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllPrivilegeTarget" ):
                return visitor.visitAllPrivilegeTarget(self)
            else:
                return visitor.visitChildren(self)




    def allPrivilegeTarget(self):

        localctx = CypherParser.AllPrivilegeTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_allPrivilegeTarget)
        self._la = 0 # Token type
        try:
            self.state = 2860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2845
                self.match(CypherParser.DEFAULT)
                self.state = 2846
                _la = self._input.LA(1)
                if not(_la==54 or _la==105):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2847
                self.match(CypherParser.HOME)
                self.state = 2848
                _la = self._input.LA(1)
                if not(_la==54 or _la==105):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2849
                self.match(CypherParser.DBMS)
                pass
            elif token in [105, 106]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2850
                _la = self._input.LA(1)
                if not(_la==105 or _la==106):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2853
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 2851
                    self.match(CypherParser.TIMES)
                    pass
                elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                    self.state = 2852
                    self.symbolicAliasNameList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [54, 55]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2855
                _la = self._input.LA(1)
                if not(_la==54 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2858
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 2856
                    self.match(CypherParser.TIMES)
                    pass
                elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                    self.state = 2857
                    self.symbolicAliasNameList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatePrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def databaseScopeList(self):
            return self.getTypedRuleContext(CypherParser.DatabaseScopeListContext,0)


        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def graphScopeList(self):
            return self.getTypedRuleContext(CypherParser.GraphScopeListContext,0)


        def graphQualifier(self):
            return self.getTypedRuleContext(CypherParser.GraphQualifierContext,0)


        def NEW(self):
            return self.getToken(CypherParser.NEW, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def ALIAS(self):
            return self.getToken(CypherParser.ALIAS, 0)

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def COMPOSITE(self):
            return self.getToken(CypherParser.COMPOSITE, 0)

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(CypherParser.INDEXES, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(CypherParser.CONSTRAINTS, 0)

        def LABEL(self):
            return self.getToken(CypherParser.LABEL, 0)

        def LABELS(self):
            return self.getToken(CypherParser.LABELS, 0)

        def TYPE(self):
            return self.getToken(CypherParser.TYPE, 0)

        def TYPES(self):
            return self.getToken(CypherParser.TYPES, 0)

        def NAME(self):
            return self.getToken(CypherParser.NAME, 0)

        def NAMES(self):
            return self.getToken(CypherParser.NAMES, 0)

        def NODE(self):
            return self.getToken(CypherParser.NODE, 0)

        def RELATIONSHIP(self):
            return self.getToken(CypherParser.RELATIONSHIP, 0)

        def PROPERTY(self):
            return self.getToken(CypherParser.PROPERTY, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_createPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatePrivilege" ):
                listener.enterCreatePrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatePrivilege" ):
                listener.exitCreatePrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreatePrivilege" ):
                return visitor.visitCreatePrivilege(self)
            else:
                return visitor.visitChildren(self)




    def createPrivilege(self):

        localctx = CypherParser.CreatePrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_createPrivilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2862
            self.match(CypherParser.CREATE)
            self.state = 2898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 45, 116, 117, 148]:
                self.state = 2880
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [116, 117]:
                    self.state = 2863
                    _la = self._input.LA(1)
                    if not(_la==116 or _la==117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [44, 45]:
                    self.state = 2864
                    _la = self._input.LA(1)
                    if not(_la==44 or _la==45):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [148]:
                    self.state = 2865
                    self.match(CypherParser.NEW)
                    self.state = 2878
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [125, 126, 149]:
                        self.state = 2867
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==149:
                            self.state = 2866
                            self.match(CypherParser.NODE)


                        self.state = 2869
                        _la = self._input.LA(1)
                        if not(_la==125 or _la==126):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [193, 248, 250]:
                        self.state = 2871
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==193:
                            self.state = 2870
                            self.match(CypherParser.RELATIONSHIP)


                        self.state = 2873
                        _la = self._input.LA(1)
                        if not(_la==248 or _la==250):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [145, 146, 182]:
                        self.state = 2875
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==182:
                            self.state = 2874
                            self.match(CypherParser.PROPERTY)


                        self.state = 2877
                        _la = self._input.LA(1)
                        if not(_la==145 or _la==146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2882
                self.match(CypherParser.ON)
                self.state = 2883
                self.databaseScopeList()
                pass
            elif token in [11, 43, 54, 203, 256]:
                self.state = 2890
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54]:
                    self.state = 2884
                    self.match(CypherParser.DATABASE)
                    pass
                elif token in [11]:
                    self.state = 2885
                    self.match(CypherParser.ALIAS)
                    pass
                elif token in [203]:
                    self.state = 2886
                    self.match(CypherParser.ROLE)
                    pass
                elif token in [256]:
                    self.state = 2887
                    self.match(CypherParser.USER)
                    pass
                elif token in [43]:
                    self.state = 2888
                    self.match(CypherParser.COMPOSITE)
                    self.state = 2889
                    self.match(CypherParser.DATABASE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2892
                self.match(CypherParser.ON)
                self.state = 2893
                self.match(CypherParser.DBMS)
                pass
            elif token in [156]:
                self.state = 2894
                self.match(CypherParser.ON)
                self.state = 2895
                self.graphScopeList()
                self.state = 2896
                self.graphQualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def databaseScopeList(self):
            return self.getTypedRuleContext(CypherParser.DatabaseScopeListContext,0)


        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def ALIAS(self):
            return self.getToken(CypherParser.ALIAS, 0)

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def COMPOSITE(self):
            return self.getToken(CypherParser.COMPOSITE, 0)

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(CypherParser.INDEXES, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(CypherParser.CONSTRAINTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_dropPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropPrivilege" ):
                listener.enterDropPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropPrivilege" ):
                listener.exitDropPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropPrivilege" ):
                return visitor.visitDropPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def dropPrivilege(self):

        localctx = CypherParser.DropPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_dropPrivilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2900
            self.match(CypherParser.DROP)
            self.state = 2917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 45, 116, 117]:
                self.state = 2903
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [116, 117]:
                    self.state = 2901
                    _la = self._input.LA(1)
                    if not(_la==116 or _la==117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [44, 45]:
                    self.state = 2902
                    _la = self._input.LA(1)
                    if not(_la==44 or _la==45):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2905
                self.match(CypherParser.ON)
                self.state = 2906
                self.databaseScopeList()
                pass
            elif token in [11, 43, 54, 203, 256]:
                self.state = 2913
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54]:
                    self.state = 2907
                    self.match(CypherParser.DATABASE)
                    pass
                elif token in [11]:
                    self.state = 2908
                    self.match(CypherParser.ALIAS)
                    pass
                elif token in [203]:
                    self.state = 2909
                    self.match(CypherParser.ROLE)
                    pass
                elif token in [256]:
                    self.state = 2910
                    self.match(CypherParser.USER)
                    pass
                elif token in [43]:
                    self.state = 2911
                    self.match(CypherParser.COMPOSITE)
                    self.state = 2912
                    self.match(CypherParser.DATABASE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2915
                self.match(CypherParser.ON)
                self.state = 2916
                self.match(CypherParser.DBMS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(CypherParser.SHOW, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def databaseScopeList(self):
            return self.getTypedRuleContext(CypherParser.DatabaseScopeListContext,0)


        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def ALIAS(self):
            return self.getToken(CypherParser.ALIAS, 0)

        def PRIVILEGE(self):
            return self.getToken(CypherParser.PRIVILEGE, 0)

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def settingQualifier(self):
            return self.getTypedRuleContext(CypherParser.SettingQualifierContext,0)


        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(CypherParser.INDEXES, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(CypherParser.CONSTRAINTS, 0)

        def TRANSACTION(self):
            return self.getToken(CypherParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(CypherParser.TRANSACTIONS, 0)

        def SERVER(self):
            return self.getToken(CypherParser.SERVER, 0)

        def SERVERS(self):
            return self.getToken(CypherParser.SERVERS, 0)

        def SETTING(self):
            return self.getToken(CypherParser.SETTING, 0)

        def SETTINGS(self):
            return self.getToken(CypherParser.SETTINGS, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPrivilege" ):
                listener.enterShowPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPrivilege" ):
                listener.exitShowPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPrivilege" ):
                return visitor.visitShowPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def showPrivilege(self):

        localctx = CypherParser.ShowPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_showPrivilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2919
            self.match(CypherParser.SHOW)
            self.state = 2946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 45, 116, 117, 244, 245]:
                self.state = 2931
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [116, 117]:
                    self.state = 2920
                    _la = self._input.LA(1)
                    if not(_la==116 or _la==117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [44, 45]:
                    self.state = 2921
                    _la = self._input.LA(1)
                    if not(_la==44 or _la==45):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [244, 245]:
                    self.state = 2922
                    _la = self._input.LA(1)
                    if not(_la==244 or _la==245):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 2923
                        self.match(CypherParser.LPAREN)
                        self.state = 2926
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [239]:
                            self.state = 2924
                            self.match(CypherParser.TIMES)
                            pass
                        elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                            self.state = 2925
                            self.symbolicNameOrStringParameterList()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 2928
                        self.match(CypherParser.RPAREN)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2933
                self.match(CypherParser.ON)
                self.state = 2934
                self.databaseScopeList()
                pass
            elif token in [11, 177, 203, 216, 217, 219, 220, 256]:
                self.state = 2942
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [11]:
                    self.state = 2935
                    self.match(CypherParser.ALIAS)
                    pass
                elif token in [177]:
                    self.state = 2936
                    self.match(CypherParser.PRIVILEGE)
                    pass
                elif token in [203]:
                    self.state = 2937
                    self.match(CypherParser.ROLE)
                    pass
                elif token in [256]:
                    self.state = 2938
                    self.match(CypherParser.USER)
                    pass
                elif token in [216, 217]:
                    self.state = 2939
                    _la = self._input.LA(1)
                    if not(_la==216 or _la==217):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [219, 220]:
                    self.state = 2940
                    _la = self._input.LA(1)
                    if not(_la==219 or _la==220):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2941
                    self.settingQualifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2944
                self.match(CypherParser.ON)
                self.state = 2945
                self.match(CypherParser.DBMS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def ACCESS(self):
            return self.getToken(CypherParser.ACCESS, 0)

        def LABEL(self):
            return self.getToken(CypherParser.LABEL, 0)

        def labelResource(self):
            return self.getTypedRuleContext(CypherParser.LabelResourceContext,0)


        def graphScopeList(self):
            return self.getTypedRuleContext(CypherParser.GraphScopeListContext,0)


        def PROPERTY(self):
            return self.getToken(CypherParser.PROPERTY, 0)

        def propertyResource(self):
            return self.getTypedRuleContext(CypherParser.PropertyResourceContext,0)


        def graphQualifier(self):
            return self.getTypedRuleContext(CypherParser.GraphQualifierContext,0)


        def PASSWORD(self):
            return self.getToken(CypherParser.PASSWORD, 0)

        def PASSWORDS(self):
            return self.getToken(CypherParser.PASSWORDS, 0)

        def STATUS(self):
            return self.getToken(CypherParser.STATUS, 0)

        def HOME(self):
            return self.getToken(CypherParser.HOME, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_setPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPrivilege" ):
                listener.enterSetPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPrivilege" ):
                listener.exitSetPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPrivilege" ):
                return visitor.visitSetPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def setPrivilege(self):

        localctx = CypherParser.SetPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_setPrivilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2948
            self.match(CypherParser.SET)
            self.state = 2975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 164, 165, 256]:
                self.state = 2958
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [164, 165]:
                    self.state = 2949
                    _la = self._input.LA(1)
                    if not(_la==164 or _la==165):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [256]:
                    self.state = 2950
                    self.match(CypherParser.USER)
                    self.state = 2954
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [229]:
                        self.state = 2951
                        self.match(CypherParser.STATUS)
                        pass
                    elif token in [111]:
                        self.state = 2952
                        self.match(CypherParser.HOME)
                        self.state = 2953
                        self.match(CypherParser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [54]:
                    self.state = 2956
                    self.match(CypherParser.DATABASE)
                    self.state = 2957
                    self.match(CypherParser.ACCESS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2960
                self.match(CypherParser.ON)
                self.state = 2961
                self.match(CypherParser.DBMS)
                pass
            elif token in [125, 182]:
                self.state = 2973
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [125]:
                    self.state = 2962
                    self.match(CypherParser.LABEL)
                    self.state = 2963
                    self.labelResource()
                    self.state = 2964
                    self.match(CypherParser.ON)
                    self.state = 2965
                    self.graphScopeList()
                    pass
                elif token in [182]:
                    self.state = 2967
                    self.match(CypherParser.PROPERTY)
                    self.state = 2968
                    self.propertyResource()
                    self.state = 2969
                    self.match(CypherParser.ON)
                    self.state = 2970
                    self.graphScopeList()
                    self.state = 2971
                    self.graphQualifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemovePrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def LABEL(self):
            return self.getToken(CypherParser.LABEL, 0)

        def labelResource(self):
            return self.getTypedRuleContext(CypherParser.LabelResourceContext,0)


        def graphScopeList(self):
            return self.getTypedRuleContext(CypherParser.GraphScopeListContext,0)


        def PRIVILEGE(self):
            return self.getToken(CypherParser.PRIVILEGE, 0)

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_removePrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemovePrivilege" ):
                listener.enterRemovePrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemovePrivilege" ):
                listener.exitRemovePrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemovePrivilege" ):
                return visitor.visitRemovePrivilege(self)
            else:
                return visitor.visitChildren(self)




    def removePrivilege(self):

        localctx = CypherParser.RemovePrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_removePrivilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2977
            self.match(CypherParser.REMOVE)
            self.state = 2986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177, 203]:
                self.state = 2978
                _la = self._input.LA(1)
                if not(_la==177 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2979
                self.match(CypherParser.ON)
                self.state = 2980
                self.match(CypherParser.DBMS)
                pass
            elif token in [125]:
                self.state = 2981
                self.match(CypherParser.LABEL)
                self.state = 2982
                self.labelResource()
                self.state = 2983
                self.match(CypherParser.ON)
                self.state = 2984
                self.graphScopeList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WritePrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(CypherParser.WRITE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def graphScopeList(self):
            return self.getTypedRuleContext(CypherParser.GraphScopeListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_writePrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWritePrivilege" ):
                listener.enterWritePrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWritePrivilege" ):
                listener.exitWritePrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWritePrivilege" ):
                return visitor.visitWritePrivilege(self)
            else:
                return visitor.visitChildren(self)




    def writePrivilege(self):

        localctx = CypherParser.WritePrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_writePrivilege)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2988
            self.match(CypherParser.WRITE)
            self.state = 2989
            self.match(CypherParser.ON)
            self.state = 2990
            self.graphScopeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabasePrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def databaseScopeList(self):
            return self.getTypedRuleContext(CypherParser.DatabaseScopeListContext,0)


        def ACCESS(self):
            return self.getToken(CypherParser.ACCESS, 0)

        def START(self):
            return self.getToken(CypherParser.START, 0)

        def STOP(self):
            return self.getToken(CypherParser.STOP, 0)

        def TRANSACTION(self):
            return self.getToken(CypherParser.TRANSACTION, 0)

        def TERMINATE(self):
            return self.getToken(CypherParser.TERMINATE, 0)

        def NAME(self):
            return self.getToken(CypherParser.NAME, 0)

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(CypherParser.INDEXES, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(CypherParser.CONSTRAINTS, 0)

        def TRANSACTIONS(self):
            return self.getToken(CypherParser.TRANSACTIONS, 0)

        def MANAGEMENT(self):
            return self.getToken(CypherParser.MANAGEMENT, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_databasePrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabasePrivilege" ):
                listener.enterDatabasePrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabasePrivilege" ):
                listener.exitDatabasePrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabasePrivilege" ):
                return visitor.visitDatabasePrivilege(self)
            else:
                return visitor.visitChildren(self)




    def databasePrivilege(self):

        localctx = CypherParser.DatabasePrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_databasePrivilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.state = 2992
                self.match(CypherParser.ACCESS)
                pass
            elif token in [227]:
                self.state = 2993
                self.match(CypherParser.START)
                pass
            elif token in [230]:
                self.state = 2994
                self.match(CypherParser.STOP)
                pass
            elif token in [116, 117]:
                self.state = 2995
                _la = self._input.LA(1)
                if not(_la==116 or _la==117):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2996
                    self.match(CypherParser.MANAGEMENT)


                pass
            elif token in [44, 45]:
                self.state = 2999
                _la = self._input.LA(1)
                if not(_la==44 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3000
                    self.match(CypherParser.MANAGEMENT)


                pass
            elif token in [244]:
                self.state = 3003
                self.match(CypherParser.TRANSACTION)
                self.state = 3005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3004
                    self.match(CypherParser.MANAGEMENT)


                self.state = 3013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 3007
                    self.match(CypherParser.LPAREN)
                    self.state = 3010
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [239]:
                        self.state = 3008
                        self.match(CypherParser.TIMES)
                        pass
                    elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                        self.state = 3009
                        self.symbolicNameOrStringParameterList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3012
                    self.match(CypherParser.RPAREN)


                pass
            elif token in [235]:
                self.state = 3015
                self.match(CypherParser.TERMINATE)
                self.state = 3016
                _la = self._input.LA(1)
                if not(_la==244 or _la==245):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 3017
                    self.match(CypherParser.LPAREN)
                    self.state = 3020
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [239]:
                        self.state = 3018
                        self.match(CypherParser.TIMES)
                        pass
                    elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                        self.state = 3019
                        self.symbolicNameOrStringParameterList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3022
                    self.match(CypherParser.RPAREN)


                pass
            elif token in [145]:
                self.state = 3025
                self.match(CypherParser.NAME)
                self.state = 3027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3026
                    self.match(CypherParser.MANAGEMENT)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 3031
            self.match(CypherParser.ON)
            self.state = 3032
            self.databaseScopeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbmsPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def ALTER(self):
            return self.getToken(CypherParser.ALTER, 0)

        def ASSIGN(self):
            return self.getToken(CypherParser.ASSIGN, 0)

        def COMPOSITE(self):
            return self.getToken(CypherParser.COMPOSITE, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def MANAGEMENT(self):
            return self.getToken(CypherParser.MANAGEMENT, 0)

        def ALIAS(self):
            return self.getToken(CypherParser.ALIAS, 0)

        def EXECUTE(self):
            return self.getToken(CypherParser.EXECUTE, 0)

        def PRIVILEGE(self):
            return self.getToken(CypherParser.PRIVILEGE, 0)

        def RENAME(self):
            return self.getToken(CypherParser.RENAME, 0)

        def SERVER(self):
            return self.getToken(CypherParser.SERVER, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def IMPERSONATE(self):
            return self.getToken(CypherParser.IMPERSONATE, 0)

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def PROCEDURES(self):
            return self.getToken(CypherParser.PROCEDURES, 0)

        def BOOSTED(self):
            return self.getToken(CypherParser.BOOSTED, 0)

        def executeProcedureQualifier(self):
            return self.getTypedRuleContext(CypherParser.ExecuteProcedureQualifierContext,0)


        def executeFunctionQualifier(self):
            return self.getTypedRuleContext(CypherParser.ExecuteFunctionQualifierContext,0)


        def ADMIN(self):
            return self.getToken(CypherParser.ADMIN, 0)

        def ADMINISTRATOR(self):
            return self.getToken(CypherParser.ADMINISTRATOR, 0)

        def PROCEDURE(self):
            return self.getToken(CypherParser.PROCEDURE, 0)

        def FUNCTION(self):
            return self.getToken(CypherParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(CypherParser.FUNCTIONS, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterListContext,0)


        def DEFINED(self):
            return self.getToken(CypherParser.DEFINED, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_dbmsPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbmsPrivilege" ):
                listener.enterDbmsPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbmsPrivilege" ):
                listener.exitDbmsPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbmsPrivilege" ):
                return visitor.visitDbmsPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def dbmsPrivilege(self):

        localctx = CypherParser.DbmsPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_dbmsPrivilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3090
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 3034
                self.match(CypherParser.ALTER)
                self.state = 3035
                _la = self._input.LA(1)
                if not(_la==11 or _la==54 or _la==256):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [21]:
                self.state = 3036
                self.match(CypherParser.ASSIGN)
                self.state = 3037
                _la = self._input.LA(1)
                if not(_la==177 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [43]:
                self.state = 3038
                self.match(CypherParser.COMPOSITE)
                self.state = 3039
                self.match(CypherParser.DATABASE)
                self.state = 3040
                self.match(CypherParser.MANAGEMENT)
                pass
            elif token in [54]:
                self.state = 3041
                self.match(CypherParser.DATABASE)
                self.state = 3042
                self.match(CypherParser.MANAGEMENT)
                pass
            elif token in [11]:
                self.state = 3043
                self.match(CypherParser.ALIAS)
                self.state = 3044
                self.match(CypherParser.MANAGEMENT)
                pass
            elif token in [88]:
                self.state = 3045
                self.match(CypherParser.EXECUTE)
                self.state = 3071
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9, 10]:
                    self.state = 3046
                    _la = self._input.LA(1)
                    if not(_la==9 or _la==10):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3047
                    self.match(CypherParser.PROCEDURES)
                    pass
                elif token in [27]:
                    self.state = 3048
                    self.match(CypherParser.BOOSTED)
                    self.state = 3059
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [179, 180]:
                        self.state = 3049
                        _la = self._input.LA(1)
                        if not(_la==179 or _la==180):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3050
                        self.executeProcedureQualifier()
                        pass
                    elif token in [101, 102, 256]:
                        self.state = 3055
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==256:
                            self.state = 3051
                            self.match(CypherParser.USER)
                            self.state = 3053
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==61:
                                self.state = 3052
                                self.match(CypherParser.DEFINED)




                        self.state = 3057
                        _la = self._input.LA(1)
                        if not(_la==101 or _la==102):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3058
                        self.executeFunctionQualifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [179, 180]:
                    self.state = 3061
                    _la = self._input.LA(1)
                    if not(_la==179 or _la==180):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3062
                    self.executeProcedureQualifier()
                    pass
                elif token in [101, 102, 256]:
                    self.state = 3067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==256:
                        self.state = 3063
                        self.match(CypherParser.USER)
                        self.state = 3065
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 3064
                            self.match(CypherParser.DEFINED)




                    self.state = 3069
                    _la = self._input.LA(1)
                    if not(_la==101 or _la==102):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3070
                    self.executeFunctionQualifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [177]:
                self.state = 3073
                self.match(CypherParser.PRIVILEGE)
                self.state = 3074
                self.match(CypherParser.MANAGEMENT)
                pass
            elif token in [190]:
                self.state = 3075
                self.match(CypherParser.RENAME)
                self.state = 3076
                _la = self._input.LA(1)
                if not(_la==203 or _la==256):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [216]:
                self.state = 3077
                self.match(CypherParser.SERVER)
                self.state = 3078
                self.match(CypherParser.MANAGEMENT)
                pass
            elif token in [256]:
                self.state = 3079
                self.match(CypherParser.USER)
                self.state = 3080
                self.match(CypherParser.MANAGEMENT)
                pass
            elif token in [113]:
                self.state = 3081
                self.match(CypherParser.IMPERSONATE)
                self.state = 3088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 3082
                    self.match(CypherParser.LPAREN)
                    self.state = 3085
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [239]:
                        self.state = 3083
                        self.match(CypherParser.TIMES)
                        pass
                    elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                        self.state = 3084
                        self.symbolicNameOrStringParameterList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3087
                    self.match(CypherParser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 3092
            self.match(CypherParser.ON)
            self.state = 3093
            self.match(CypherParser.DBMS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteFunctionQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globs(self):
            return self.getTypedRuleContext(CypherParser.GlobsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_executeFunctionQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteFunctionQualifier" ):
                listener.enterExecuteFunctionQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteFunctionQualifier" ):
                listener.exitExecuteFunctionQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteFunctionQualifier" ):
                return visitor.visitExecuteFunctionQualifier(self)
            else:
                return visitor.visitChildren(self)




    def executeFunctionQualifier(self):

        localctx = CypherParser.ExecuteFunctionQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_executeFunctionQualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3095
            self.globs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteProcedureQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globs(self):
            return self.getTypedRuleContext(CypherParser.GlobsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_executeProcedureQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteProcedureQualifier" ):
                listener.enterExecuteProcedureQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteProcedureQualifier" ):
                listener.exitExecuteProcedureQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteProcedureQualifier" ):
                return visitor.visitExecuteProcedureQualifier(self)
            else:
                return visitor.visitChildren(self)




    def executeProcedureQualifier(self):

        localctx = CypherParser.ExecuteProcedureQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_executeProcedureQualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3097
            self.globs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globs(self):
            return self.getTypedRuleContext(CypherParser.GlobsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_settingQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettingQualifier" ):
                listener.enterSettingQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettingQualifier" ):
                listener.exitSettingQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingQualifier" ):
                return visitor.visitSettingQualifier(self)
            else:
                return visitor.visitChildren(self)




    def settingQualifier(self):

        localctx = CypherParser.SettingQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_settingQualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3099
            self.globs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def glob(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.GlobContext)
            else:
                return self.getTypedRuleContext(CypherParser.GlobContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_globs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobs" ):
                listener.enterGlobs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobs" ):
                listener.exitGlobs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobs" ):
                return visitor.visitGlobs(self)
            else:
                return visitor.visitChildren(self)




    def globs(self):

        localctx = CypherParser.GlobsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_globs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3101
            self.glob()
            self.state = 3106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 3102
                self.match(CypherParser.COMMA)
                self.state = 3103
                self.glob()
                self.state = 3108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedGraphPrivilegesWithPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def graphScopeList(self):
            return self.getTypedRuleContext(CypherParser.GraphScopeListContext,0)


        def graphQualifier(self):
            return self.getTypedRuleContext(CypherParser.GraphQualifierContext,0)


        def TRAVERSE(self):
            return self.getToken(CypherParser.TRAVERSE, 0)

        def READ(self):
            return self.getToken(CypherParser.READ, 0)

        def propertyResource(self):
            return self.getTypedRuleContext(CypherParser.PropertyResourceContext,0)


        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def LPAREN(self):
            return self.getToken(CypherParser.LPAREN, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def RPAREN(self):
            return self.getToken(CypherParser.RPAREN, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_qualifiedGraphPrivilegesWithProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedGraphPrivilegesWithProperty" ):
                listener.enterQualifiedGraphPrivilegesWithProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedGraphPrivilegesWithProperty" ):
                listener.exitQualifiedGraphPrivilegesWithProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedGraphPrivilegesWithProperty" ):
                return visitor.visitQualifiedGraphPrivilegesWithProperty(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedGraphPrivilegesWithProperty(self):

        localctx = CypherParser.QualifiedGraphPrivilegesWithPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_qualifiedGraphPrivilegesWithProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3114
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [246]:
                self.state = 3109
                self.match(CypherParser.TRAVERSE)
                pass
            elif token in [187]:
                self.state = 3110
                self.match(CypherParser.READ)
                self.state = 3111
                self.propertyResource()
                pass
            elif token in [139]:
                self.state = 3112
                self.match(CypherParser.MATCH)
                self.state = 3113
                self.propertyResource()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3116
            self.match(CypherParser.ON)
            self.state = 3117
            self.graphScopeList()
            self.state = 3118
            self.graphQualifier()
            self.state = 3122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 3119
                self.match(CypherParser.LPAREN)
                self.state = 3120
                self.match(CypherParser.TIMES)
                self.state = 3121
                self.match(CypherParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedGraphPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def graphScopeList(self):
            return self.getTypedRuleContext(CypherParser.GraphScopeListContext,0)


        def graphQualifier(self):
            return self.getTypedRuleContext(CypherParser.GraphQualifierContext,0)


        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def propertyResource(self):
            return self.getTypedRuleContext(CypherParser.PropertyResourceContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_qualifiedGraphPrivileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedGraphPrivileges" ):
                listener.enterQualifiedGraphPrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedGraphPrivileges" ):
                listener.exitQualifiedGraphPrivileges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedGraphPrivileges" ):
                return visitor.visitQualifiedGraphPrivileges(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedGraphPrivileges(self):

        localctx = CypherParser.QualifiedGraphPrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_qualifiedGraphPrivileges)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62]:
                self.state = 3124
                self.match(CypherParser.DELETE)
                pass
            elif token in [140]:
                self.state = 3125
                self.match(CypherParser.MERGE)
                self.state = 3126
                self.propertyResource()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3129
            self.match(CypherParser.ON)
            self.state = 3130
            self.graphScopeList()
            self.state = 3131
            self.graphQualifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def symbolicNameList1(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameList1Context,0)


        def getRuleIndex(self):
            return CypherParser.RULE_labelResource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelResource" ):
                listener.enterLabelResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelResource" ):
                listener.exitLabelResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelResource" ):
                return visitor.visitLabelResource(self)
            else:
                return visitor.visitChildren(self)




    def labelResource(self):

        localctx = CypherParser.LabelResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_labelResource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3135
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [239]:
                self.state = 3133
                self.match(CypherParser.TIMES)
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 3134
                self.symbolicNameList1()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(CypherParser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(CypherParser.RCURLY, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def symbolicNameList1(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameList1Context,0)


        def getRuleIndex(self):
            return CypherParser.RULE_propertyResource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyResource" ):
                listener.enterPropertyResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyResource" ):
                listener.exitPropertyResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyResource" ):
                return visitor.visitPropertyResource(self)
            else:
                return visitor.visitChildren(self)




    def propertyResource(self):

        localctx = CypherParser.PropertyResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_propertyResource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3137
            self.match(CypherParser.LCURLY)
            self.state = 3140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [239]:
                self.state = 3138
                self.match(CypherParser.TIMES)
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 3139
                self.symbolicNameList1()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3142
            self.match(CypherParser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATIONSHIP(self):
            return self.getToken(CypherParser.RELATIONSHIP, 0)

        def RELATIONSHIPS(self):
            return self.getToken(CypherParser.RELATIONSHIPS, 0)

        def NODE(self):
            return self.getToken(CypherParser.NODE, 0)

        def NODES(self):
            return self.getToken(CypherParser.NODES, 0)

        def ELEMENT(self):
            return self.getToken(CypherParser.ELEMENT, 0)

        def ELEMENTS(self):
            return self.getToken(CypherParser.ELEMENTS, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def symbolicNameString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameStringContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_graphQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQualifier" ):
                listener.enterGraphQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQualifier" ):
                listener.exitGraphQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphQualifier" ):
                return visitor.visitGraphQualifier(self)
            else:
                return visitor.visitChildren(self)




    def graphQualifier(self):

        localctx = CypherParser.GraphQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_graphQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193, 194]:
                self.state = 3144
                _la = self._input.LA(1)
                if not(_la==193 or _la==194):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3154
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 3145
                    self.match(CypherParser.TIMES)
                    pass
                elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                    self.state = 3146
                    self.symbolicNameString()
                    self.state = 3151
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==39:
                        self.state = 3147
                        self.match(CypherParser.COMMA)
                        self.state = 3148
                        self.symbolicNameString()
                        self.state = 3153
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [149, 150]:
                self.state = 3156
                _la = self._input.LA(1)
                if not(_la==149 or _la==150):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3166
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 3157
                    self.match(CypherParser.TIMES)
                    pass
                elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                    self.state = 3158
                    self.symbolicNameString()
                    self.state = 3163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==39:
                        self.state = 3159
                        self.match(CypherParser.COMMA)
                        self.state = 3160
                        self.symbolicNameString()
                        self.state = 3165
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [80, 81]:
                self.state = 3168
                _la = self._input.LA(1)
                if not(_la==80 or _la==81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3178
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 3169
                    self.match(CypherParser.TIMES)
                    pass
                elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                    self.state = 3170
                    self.symbolicNameString()
                    self.state = 3175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==39:
                        self.state = 3171
                        self.match(CypherParser.COMMA)
                        self.state = 3172
                        self.symbolicNameString()
                        self.state = 3177
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [99, 136, 242]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def TOPOLOGY(self):
            return self.getToken(CypherParser.TOPOLOGY, 0)

        def options_(self):
            return self.getTypedRuleContext(CypherParser.Options_Context,0)


        def waitClause(self):
            return self.getTypedRuleContext(CypherParser.WaitClauseContext,0)


        def UNSIGNED_DECIMAL_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.UNSIGNED_DECIMAL_INTEGER)
            else:
                return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, i)

        def PRIMARY(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PRIMARY)
            else:
                return self.getToken(CypherParser.PRIMARY, i)

        def PRIMARIES(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PRIMARIES)
            else:
                return self.getToken(CypherParser.PRIMARIES, i)

        def SECONDARY(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SECONDARY)
            else:
                return self.getToken(CypherParser.SECONDARY, i)

        def SECONDARIES(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SECONDARIES)
            else:
                return self.getToken(CypherParser.SECONDARIES, i)

        def getRuleIndex(self):
            return CypherParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabase" ):
                return visitor.visitCreateDatabase(self)
            else:
                return visitor.visitChildren(self)




    def createDatabase(self):

        localctx = CypherParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3182
            self.match(CypherParser.DATABASE)
            self.state = 3183
            self.symbolicAliasName()
            self.state = 3187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 3184
                self.match(CypherParser.IF)
                self.state = 3185
                self.match(CypherParser.NOT)
                self.state = 3186
                self.match(CypherParser.EXISTS)


            self.state = 3199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 3189
                self.match(CypherParser.TOPOLOGY)
                self.state = 3195 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3190
                    self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)
                    self.state = 3193
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [175, 176]:
                        self.state = 3191
                        _la = self._input.LA(1)
                        if not(_la==175 or _la==176):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [211, 212]:
                        self.state = 3192
                        _la = self._input.LA(1)
                        if not(_la==211 or _la==212):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3197 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==4):
                        break



            self.state = 3202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 3201
                self.options_()


            self.state = 3205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==261:
                self.state = 3204
                self.waitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Options_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS(self):
            return self.getToken(CypherParser.OPTIONS, 0)

        def mapOrParameter(self):
            return self.getTypedRuleContext(CypherParser.MapOrParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_options_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptions_" ):
                listener.enterOptions_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptions_" ):
                listener.exitOptions_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptions_" ):
                return visitor.visitOptions_(self)
            else:
                return visitor.visitChildren(self)




    def options_(self):

        localctx = CypherParser.Options_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_options_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3207
            self.match(CypherParser.OPTIONS)
            self.state = 3208
            self.mapOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateCompositeDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOSITE(self):
            return self.getToken(CypherParser.COMPOSITE, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def options_(self):
            return self.getTypedRuleContext(CypherParser.Options_Context,0)


        def waitClause(self):
            return self.getTypedRuleContext(CypherParser.WaitClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_createCompositeDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateCompositeDatabase" ):
                listener.enterCreateCompositeDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateCompositeDatabase" ):
                listener.exitCreateCompositeDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateCompositeDatabase" ):
                return visitor.visitCreateCompositeDatabase(self)
            else:
                return visitor.visitChildren(self)




    def createCompositeDatabase(self):

        localctx = CypherParser.CreateCompositeDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_createCompositeDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3210
            self.match(CypherParser.COMPOSITE)
            self.state = 3211
            self.match(CypherParser.DATABASE)
            self.state = 3212
            self.symbolicAliasName()
            self.state = 3216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 3213
                self.match(CypherParser.IF)
                self.state = 3214
                self.match(CypherParser.NOT)
                self.state = 3215
                self.match(CypherParser.EXISTS)


            self.state = 3219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 3218
                self.options_()


            self.state = 3222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==261:
                self.state = 3221
                self.waitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def COMPOSITE(self):
            return self.getToken(CypherParser.COMPOSITE, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def DATA(self):
            return self.getToken(CypherParser.DATA, 0)

        def waitClause(self):
            return self.getTypedRuleContext(CypherParser.WaitClauseContext,0)


        def DUMP(self):
            return self.getToken(CypherParser.DUMP, 0)

        def DESTROY(self):
            return self.getToken(CypherParser.DESTROY, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabase" ):
                return visitor.visitDropDatabase(self)
            else:
                return visitor.visitChildren(self)




    def dropDatabase(self):

        localctx = CypherParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 3224
                self.match(CypherParser.COMPOSITE)


            self.state = 3227
            self.match(CypherParser.DATABASE)
            self.state = 3228
            self.symbolicAliasName()
            self.state = 3231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 3229
                self.match(CypherParser.IF)
                self.state = 3230
                self.match(CypherParser.EXISTS)


            self.state = 3235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or _la==76:
                self.state = 3233
                _la = self._input.LA(1)
                if not(_la==65 or _la==76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3234
                self.match(CypherParser.DATA)


            self.state = 3238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==261:
                self.state = 3237
                self.waitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def waitClause(self):
            return self.getTypedRuleContext(CypherParser.WaitClauseContext,0)


        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SET)
            else:
                return self.getToken(CypherParser.SET, i)

        def REMOVE(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.REMOVE)
            else:
                return self.getToken(CypherParser.REMOVE, i)

        def OPTION(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.OPTION)
            else:
                return self.getToken(CypherParser.OPTION, i)

        def symbolicNameString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameStringContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,i)


        def ACCESS(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.ACCESS)
            else:
                return self.getToken(CypherParser.ACCESS, i)

        def READ(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.READ)
            else:
                return self.getToken(CypherParser.READ, i)

        def TOPOLOGY(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.TOPOLOGY)
            else:
                return self.getToken(CypherParser.TOPOLOGY, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.ONLY)
            else:
                return self.getToken(CypherParser.ONLY, i)

        def WRITE(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.WRITE)
            else:
                return self.getToken(CypherParser.WRITE, i)

        def UNSIGNED_DECIMAL_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.UNSIGNED_DECIMAL_INTEGER)
            else:
                return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, i)

        def PRIMARY(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PRIMARY)
            else:
                return self.getToken(CypherParser.PRIMARY, i)

        def PRIMARIES(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PRIMARIES)
            else:
                return self.getToken(CypherParser.PRIMARIES, i)

        def SECONDARY(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SECONDARY)
            else:
                return self.getToken(CypherParser.SECONDARY, i)

        def SECONDARIES(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SECONDARIES)
            else:
                return self.getToken(CypherParser.SECONDARIES, i)

        def getRuleIndex(self):
            return CypherParser.RULE_alterDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabase" ):
                listener.enterAlterDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabase" ):
                listener.exitAlterDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterDatabase" ):
                return visitor.visitAlterDatabase(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabase(self):

        localctx = CypherParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_alterDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3240
            self.match(CypherParser.DATABASE)
            self.state = 3241
            self.symbolicAliasName()
            self.state = 3244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 3242
                self.match(CypherParser.IF)
                self.state = 3243
                self.match(CypherParser.EXISTS)


            self.state = 3277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [218]:
                self.state = 3266 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3246
                    self.match(CypherParser.SET)
                    self.state = 3264
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [7]:
                        self.state = 3247
                        self.match(CypherParser.ACCESS)
                        self.state = 3248
                        self.match(CypherParser.READ)
                        self.state = 3249
                        _la = self._input.LA(1)
                        if not(_la==157 or _la==266):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [243]:
                        self.state = 3250
                        self.match(CypherParser.TOPOLOGY)
                        self.state = 3256 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3251
                            self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)
                            self.state = 3254
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [175, 176]:
                                self.state = 3252
                                _la = self._input.LA(1)
                                if not(_la==175 or _la==176):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass
                            elif token in [211, 212]:
                                self.state = 3253
                                _la = self._input.LA(1)
                                if not(_la==211 or _la==212):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 3258 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==4):
                                break

                        pass
                    elif token in [160]:
                        self.state = 3260
                        self.match(CypherParser.OPTION)
                        self.state = 3261
                        self.symbolicNameString()
                        self.state = 3262
                        self.expression()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3268 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==218):
                        break

                pass
            elif token in [195]:
                self.state = 3273 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3270
                    self.match(CypherParser.REMOVE)
                    self.state = 3271
                    self.match(CypherParser.OPTION)
                    self.state = 3272
                    self.symbolicNameString()
                    self.state = 3275 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==195):
                        break

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==261:
                self.state = 3279
                self.waitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(CypherParser.START, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def waitClause(self):
            return self.getTypedRuleContext(CypherParser.WaitClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_startDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartDatabase" ):
                listener.enterStartDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartDatabase" ):
                listener.exitStartDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartDatabase" ):
                return visitor.visitStartDatabase(self)
            else:
                return visitor.visitChildren(self)




    def startDatabase(self):

        localctx = CypherParser.StartDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_startDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3282
            self.match(CypherParser.START)
            self.state = 3283
            self.match(CypherParser.DATABASE)
            self.state = 3284
            self.symbolicAliasName()
            self.state = 3286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==261:
                self.state = 3285
                self.waitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(CypherParser.STOP, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def waitClause(self):
            return self.getTypedRuleContext(CypherParser.WaitClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_stopDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopDatabase" ):
                listener.enterStopDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopDatabase" ):
                listener.exitStopDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopDatabase" ):
                return visitor.visitStopDatabase(self)
            else:
                return visitor.visitChildren(self)




    def stopDatabase(self):

        localctx = CypherParser.StopDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_stopDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3288
            self.match(CypherParser.STOP)
            self.state = 3289
            self.match(CypherParser.DATABASE)
            self.state = 3290
            self.symbolicAliasName()
            self.state = 3292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==261:
                self.state = 3291
                self.waitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(CypherParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(CypherParser.NOWAIT, 0)

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def SEC(self):
            return self.getToken(CypherParser.SEC, 0)

        def SECOND(self):
            return self.getToken(CypherParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(CypherParser.SECONDS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_waitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitClause" ):
                listener.enterWaitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitClause" ):
                listener.exitWaitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitClause" ):
                return visitor.visitWaitClause(self)
            else:
                return visitor.visitChildren(self)




    def waitClause(self):

        localctx = CypherParser.WaitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_waitClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [261]:
                self.state = 3294
                self.match(CypherParser.WAIT)
                self.state = 3299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 3295
                    self.match(CypherParser.UNSIGNED_DECIMAL_INTEGER)
                    self.state = 3297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & 19) != 0):
                        self.state = 3296
                        _la = self._input.LA(1)
                        if not(((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & 19) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass
            elif token in [153]:
                self.state = 3301
                self.match(CypherParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASES(self):
            return self.getToken(CypherParser.DATABASES, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def DEFAULT(self):
            return self.getToken(CypherParser.DEFAULT, 0)

        def HOME(self):
            return self.getToken(CypherParser.HOME, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDatabase" ):
                listener.enterShowDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDatabase" ):
                listener.exitShowDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowDatabase" ):
                return visitor.visitShowDatabase(self)
            else:
                return visitor.visitChildren(self)




    def showDatabase(self):

        localctx = CypherParser.ShowDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_showDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55]:
                self.state = 3304
                _la = self._input.LA(1)
                if not(_la==54 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
                if la_ == 1:
                    self.state = 3305
                    self.symbolicAliasName()
                    self.state = 3311
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [268]:
                        self.state = 3306
                        self.yieldClause()
                        self.state = 3308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==201:
                            self.state = 3307
                            self.returnClause()


                        pass
                    elif token in [263]:
                        self.state = 3310
                        self.whereClause()
                        pass
                    else:
                        raise NoViableAltException(self)


                elif la_ == 2:
                    self.state = 3313
                    self.yieldClause()
                    self.state = 3315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==201:
                        self.state = 3314
                        self.returnClause()



                elif la_ == 3:
                    self.state = 3317
                    self.whereClause()

                elif la_ == 4:
                    self.state = 3318
                    self.symbolicAliasName()


                pass
            elif token in [60, 111]:
                self.state = 3325
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 3321
                    self.match(CypherParser.DEFAULT)
                    self.state = 3322
                    self.match(CypherParser.DATABASE)
                    pass
                elif token in [111]:
                    self.state = 3323
                    self.match(CypherParser.HOME)
                    self.state = 3324
                    self.match(CypherParser.DATABASE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3332
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 3327
                    self.yieldClause()
                    self.state = 3329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==201:
                        self.state = 3328
                        self.returnClause()


                    pass
                elif token in [263]:
                    self.state = 3331
                    self.whereClause()
                    pass
                elif token in [-1, 215]:
                    pass
                else:
                    pass
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseScopeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CypherParser.DEFAULT, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def HOME(self):
            return self.getToken(CypherParser.HOME, 0)

        def DATABASES(self):
            return self.getToken(CypherParser.DATABASES, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def symbolicAliasNameList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_databaseScopeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabaseScopeList" ):
                listener.enterDatabaseScopeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabaseScopeList" ):
                listener.exitDatabaseScopeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseScopeList" ):
                return visitor.visitDatabaseScopeList(self)
            else:
                return visitor.visitChildren(self)




    def databaseScopeList(self):

        localctx = CypherParser.DatabaseScopeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_databaseScopeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55]:
                self.state = 3336
                _la = self._input.LA(1)
                if not(_la==54 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3339
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 3337
                    self.match(CypherParser.TIMES)
                    pass
                elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                    self.state = 3338
                    self.symbolicAliasNameList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [60]:
                self.state = 3341
                self.match(CypherParser.DEFAULT)
                self.state = 3342
                self.match(CypherParser.DATABASE)
                pass
            elif token in [111]:
                self.state = 3343
                self.match(CypherParser.HOME)
                self.state = 3344
                self.match(CypherParser.DATABASE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphScopeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CypherParser.DEFAULT, 0)

        def GRAPH(self):
            return self.getToken(CypherParser.GRAPH, 0)

        def HOME(self):
            return self.getToken(CypherParser.HOME, 0)

        def GRAPHS(self):
            return self.getToken(CypherParser.GRAPHS, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def symbolicAliasNameList(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameListContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_graphScopeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphScopeList" ):
                listener.enterGraphScopeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphScopeList" ):
                listener.exitGraphScopeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphScopeList" ):
                return visitor.visitGraphScopeList(self)
            else:
                return visitor.visitChildren(self)




    def graphScopeList(self):

        localctx = CypherParser.GraphScopeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_graphScopeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [105, 106]:
                self.state = 3347
                _la = self._input.LA(1)
                if not(_la==105 or _la==106):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3350
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 3348
                    self.match(CypherParser.TIMES)
                    pass
                elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                    self.state = 3349
                    self.symbolicAliasNameList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [60]:
                self.state = 3352
                self.match(CypherParser.DEFAULT)
                self.state = 3353
                self.match(CypherParser.GRAPH)
                pass
            elif token in [111]:
                self.state = 3354
                self.match(CypherParser.HOME)
                self.state = 3355
                self.match(CypherParser.GRAPH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(CypherParser.ALIAS, 0)

        def symbolicAliasName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicAliasNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,i)


        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def AT(self):
            return self.getToken(CypherParser.AT, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(CypherParser.StringOrParameterContext,0)


        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,0)


        def PASSWORD(self):
            return self.getToken(CypherParser.PASSWORD, 0)

        def passwordExpression(self):
            return self.getTypedRuleContext(CypherParser.PasswordExpressionContext,0)


        def PROPERTIES(self):
            return self.getToken(CypherParser.PROPERTIES, 0)

        def mapOrParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.MapOrParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.MapOrParameterContext,i)


        def DRIVER(self):
            return self.getToken(CypherParser.DRIVER, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_createAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateAlias" ):
                listener.enterCreateAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateAlias" ):
                listener.exitCreateAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateAlias" ):
                return visitor.visitCreateAlias(self)
            else:
                return visitor.visitChildren(self)




    def createAlias(self):

        localctx = CypherParser.CreateAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_createAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3358
            self.match(CypherParser.ALIAS)
            self.state = 3359
            self.symbolicAliasName()
            self.state = 3363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 3360
                self.match(CypherParser.IF)
                self.state = 3361
                self.match(CypherParser.NOT)
                self.state = 3362
                self.match(CypherParser.EXISTS)


            self.state = 3365
            self.match(CypherParser.FOR)
            self.state = 3366
            self.match(CypherParser.DATABASE)
            self.state = 3367
            self.symbolicAliasName()
            self.state = 3378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 3368
                self.match(CypherParser.AT)
                self.state = 3369
                self.stringOrParameter()
                self.state = 3370
                self.match(CypherParser.USER)
                self.state = 3371
                self.symbolicNameOrStringParameter()
                self.state = 3372
                self.match(CypherParser.PASSWORD)
                self.state = 3373
                self.passwordExpression()
                self.state = 3376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 3374
                    self.match(CypherParser.DRIVER)
                    self.state = 3375
                    self.mapOrParameter()




            self.state = 3382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==181:
                self.state = 3380
                self.match(CypherParser.PROPERTIES)
                self.state = 3381
                self.mapOrParameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(CypherParser.ALIAS, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_dropAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropAlias" ):
                listener.enterDropAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropAlias" ):
                listener.exitDropAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropAlias" ):
                return visitor.visitDropAlias(self)
            else:
                return visitor.visitChildren(self)




    def dropAlias(self):

        localctx = CypherParser.DropAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_dropAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3384
            self.match(CypherParser.ALIAS)
            self.state = 3385
            self.symbolicAliasName()
            self.state = 3388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 3386
                self.match(CypherParser.IF)
                self.state = 3387
                self.match(CypherParser.EXISTS)


            self.state = 3390
            self.match(CypherParser.FOR)
            self.state = 3391
            self.match(CypherParser.DATABASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(CypherParser.ALIAS, 0)

        def symbolicAliasName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicAliasNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,i)


        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def TARGET(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.TARGET)
            else:
                return self.getToken(CypherParser.TARGET, i)

        def USER(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.USER)
            else:
                return self.getToken(CypherParser.USER, i)

        def symbolicNameOrStringParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameOrStringParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,i)


        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PASSWORD)
            else:
                return self.getToken(CypherParser.PASSWORD, i)

        def passwordExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.PasswordExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.PasswordExpressionContext,i)


        def DRIVER(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.DRIVER)
            else:
                return self.getToken(CypherParser.DRIVER, i)

        def mapOrParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.MapOrParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.MapOrParameterContext,i)


        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.PROPERTIES)
            else:
                return self.getToken(CypherParser.PROPERTIES, i)

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AT)
            else:
                return self.getToken(CypherParser.AT, i)

        def stringOrParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.StringOrParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.StringOrParameterContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_alterAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterAlias" ):
                listener.enterAlterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterAlias" ):
                listener.exitAlterAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterAlias" ):
                return visitor.visitAlterAlias(self)
            else:
                return visitor.visitChildren(self)




    def alterAlias(self):

        localctx = CypherParser.AlterAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_alterAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3393
            self.match(CypherParser.ALIAS)
            self.state = 3394
            self.symbolicAliasName()
            self.state = 3397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 3395
                self.match(CypherParser.IF)
                self.state = 3396
                self.match(CypherParser.EXISTS)


            self.state = 3399
            self.match(CypherParser.SET)
            self.state = 3400
            self.match(CypherParser.DATABASE)
            self.state = 3415 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3415
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [234]:
                    self.state = 3401
                    self.match(CypherParser.TARGET)
                    self.state = 3402
                    self.symbolicAliasName()
                    self.state = 3405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 3403
                        self.match(CypherParser.AT)
                        self.state = 3404
                        self.stringOrParameter()


                    pass
                elif token in [256]:
                    self.state = 3407
                    self.match(CypherParser.USER)
                    self.state = 3408
                    self.symbolicNameOrStringParameter()
                    pass
                elif token in [164]:
                    self.state = 3409
                    self.match(CypherParser.PASSWORD)
                    self.state = 3410
                    self.passwordExpression()
                    pass
                elif token in [73]:
                    self.state = 3411
                    self.match(CypherParser.DRIVER)
                    self.state = 3412
                    self.mapOrParameter()
                    pass
                elif token in [181]:
                    self.state = 3413
                    self.match(CypherParser.PROPERTIES)
                    self.state = 3414
                    self.mapOrParameter()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3417 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==73 or _la==164 or _la==181 or _la==234 or _la==256):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def ALIAS(self):
            return self.getToken(CypherParser.ALIAS, 0)

        def ALIASES(self):
            return self.getToken(CypherParser.ALIASES, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(CypherParser.DATABASES, 0)

        def symbolicAliasName(self):
            return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,0)


        def yieldClause(self):
            return self.getTypedRuleContext(CypherParser.YieldClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(CypherParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(CypherParser.ReturnClauseContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_showAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowAliases" ):
                listener.enterShowAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowAliases" ):
                listener.exitShowAliases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowAliases" ):
                return visitor.visitShowAliases(self)
            else:
                return visitor.visitChildren(self)




    def showAliases(self):

        localctx = CypherParser.ShowAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_showAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3419
            _la = self._input.LA(1)
            if not(_la==11 or _la==12):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.state = 3420
                self.symbolicAliasName()


            self.state = 3423
            self.match(CypherParser.FOR)
            self.state = 3424
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3430
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 3425
                self.yieldClause()
                self.state = 3427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 3426
                    self.returnClause()


                pass
            elif token in [263]:
                self.state = 3429
                self.whereClause()
                pass
            elif token in [-1, 215]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicAliasNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicAliasName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicAliasNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicAliasNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_symbolicAliasNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicAliasNameList" ):
                listener.enterSymbolicAliasNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicAliasNameList" ):
                listener.exitSymbolicAliasNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicAliasNameList" ):
                return visitor.visitSymbolicAliasNameList(self)
            else:
                return visitor.visitChildren(self)




    def symbolicAliasNameList(self):

        localctx = CypherParser.SymbolicAliasNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_symbolicAliasNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3432
            self.symbolicAliasName()
            self.state = 3437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 3433
                self.match(CypherParser.COMMA)
                self.state = 3434
                self.symbolicAliasName()
                self.state = 3439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicAliasNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameStringContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,i)


        def parameter(self):
            return self.getTypedRuleContext(CypherParser.ParameterContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.DOT)
            else:
                return self.getToken(CypherParser.DOT, i)

        def getRuleIndex(self):
            return CypherParser.RULE_symbolicAliasName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicAliasName" ):
                listener.enterSymbolicAliasName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicAliasName" ):
                listener.exitSymbolicAliasName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicAliasName" ):
                return visitor.visitSymbolicAliasName(self)
            else:
                return visitor.visitChildren(self)




    def symbolicAliasName(self):

        localctx = CypherParser.SymbolicAliasNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_symbolicAliasName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 3440
                self.symbolicNameString()
                self.state = 3445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==71:
                    self.state = 3441
                    self.match(CypherParser.DOT)
                    self.state = 3442
                    self.symbolicNameString()
                    self.state = 3447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [68]:
                self.state = 3448
                self.parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicNameOrStringParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameOrStringParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameOrStringParameterContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameOrStringParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_symbolicNameOrStringParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicNameOrStringParameterList" ):
                listener.enterSymbolicNameOrStringParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicNameOrStringParameterList" ):
                listener.exitSymbolicNameOrStringParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicNameOrStringParameterList" ):
                return visitor.visitSymbolicNameOrStringParameterList(self)
            else:
                return visitor.visitChildren(self)




    def symbolicNameOrStringParameterList(self):

        localctx = CypherParser.SymbolicNameOrStringParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_symbolicNameOrStringParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3451
            self.symbolicNameOrStringParameter()
            self.state = 3456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 3452
                self.match(CypherParser.COMMA)
                self.state = 3453
                self.symbolicNameOrStringParameter()
                self.state = 3458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicNameOrStringParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,0)


        def parameter(self):
            return self.getTypedRuleContext(CypherParser.ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_symbolicNameOrStringParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicNameOrStringParameter" ):
                listener.enterSymbolicNameOrStringParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicNameOrStringParameter" ):
                listener.exitSymbolicNameOrStringParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicNameOrStringParameter" ):
                return visitor.visitSymbolicNameOrStringParameter(self)
            else:
                return visitor.visitChildren(self)




    def symbolicNameOrStringParameter(self):

        localctx = CypherParser.SymbolicNameOrStringParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_symbolicNameOrStringParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279]:
                self.state = 3459
                self.symbolicNameString()
                pass
            elif token in [68]:
                self.state = 3460
                self.parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escapedSymbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.EscapedSymbolicNameStringContext,0)


        def globRecursive(self):
            return self.getTypedRuleContext(CypherParser.GlobRecursiveContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_glob

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlob" ):
                listener.enterGlob(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlob" ):
                listener.exitGlob(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlob" ):
                return visitor.visitGlob(self)
            else:
                return visitor.visitChildren(self)




    def glob(self):

        localctx = CypherParser.GlobContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_glob)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
            if la_ == 1:
                self.state = 3463
                self.escapedSymbolicNameString()
                pass

            elif la_ == 2:
                self.state = 3464
                self.escapedSymbolicNameString()
                self.state = 3465
                self.globRecursive()
                pass

            elif la_ == 3:
                self.state = 3467
                self.globRecursive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobRecursiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globPart(self):
            return self.getTypedRuleContext(CypherParser.GlobPartContext,0)


        def globRecursive(self):
            return self.getTypedRuleContext(CypherParser.GlobRecursiveContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_globRecursive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobRecursive" ):
                listener.enterGlobRecursive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobRecursive" ):
                listener.exitGlobRecursive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobRecursive" ):
                return visitor.visitGlobRecursive(self)
            else:
                return visitor.visitChildren(self)




    def globRecursive(self):

        localctx = CypherParser.GlobRecursiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_globRecursive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3470
                self.globPart()
                pass

            elif la_ == 2:
                self.state = 3471
                self.globPart()
                self.state = 3472
                self.globRecursive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CypherParser.DOT, 0)

        def escapedSymbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.EscapedSymbolicNameStringContext,0)


        def QUESTION(self):
            return self.getToken(CypherParser.QUESTION, 0)

        def TIMES(self):
            return self.getToken(CypherParser.TIMES, 0)

        def unescapedSymbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.UnescapedSymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_globPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobPart" ):
                listener.enterGlobPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobPart" ):
                listener.exitGlobPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobPart" ):
                return visitor.visitGlobPart(self)
            else:
                return visitor.visitChildren(self)




    def globPart(self):

        localctx = CypherParser.GlobPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_globPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.state = 3476
                self.match(CypherParser.DOT)
                self.state = 3477
                self.escapedSymbolicNameString()
                pass

            elif la_ == 2:
                self.state = 3478
                self.match(CypherParser.QUESTION)
                pass

            elif la_ == 3:
                self.state = 3479
                self.match(CypherParser.TIMES)
                pass

            elif la_ == 4:
                self.state = 3480
                self.match(CypherParser.DOT)
                pass

            elif la_ == 5:
                self.state = 3481
                self.unescapedSymbolicNameString()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringImageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringToken(self):
            return self.getTypedRuleContext(CypherParser.StringTokenContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_stringImage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringImage" ):
                listener.enterStringImage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringImage" ):
                listener.exitStringImage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringImage" ):
                return visitor.visitStringImage(self)
            else:
                return visitor.visitChildren(self)




    def stringImage(self):

        localctx = CypherParser.StringImageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_stringImage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3484
            self.stringToken()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringImage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.StringImageContext)
            else:
                return self.getTypedRuleContext(CypherParser.StringImageContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_stringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringList" ):
                listener.enterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringList" ):
                listener.exitStringList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringList" ):
                return visitor.visitStringList(self)
            else:
                return visitor.visitChildren(self)




    def stringList(self):

        localctx = CypherParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3486
            self.stringImage()
            self.state = 3491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 3487
                self.match(CypherParser.COMMA)
                self.state = 3488
                self.stringImage()
                self.state = 3493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL1(self):
            return self.getToken(CypherParser.STRING_LITERAL1, 0)

        def STRING_LITERAL2(self):
            return self.getToken(CypherParser.STRING_LITERAL2, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_stringToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringToken" ):
                listener.enterStringToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringToken" ):
                listener.exitStringToken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringToken" ):
                return visitor.visitStringToken(self)
            else:
                return visitor.visitChildren(self)




    def stringToken(self):

        localctx = CypherParser.StringTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_stringToken)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3494
            _la = self._input.LA(1)
            if not(_la==276 or _la==277):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringOrParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringToken(self):
            return self.getTypedRuleContext(CypherParser.StringTokenContext,0)


        def parameter(self):
            return self.getTypedRuleContext(CypherParser.ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_stringOrParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringOrParameter" ):
                listener.enterStringOrParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringOrParameter" ):
                listener.exitStringOrParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringOrParameter" ):
                return visitor.visitStringOrParameter(self)
            else:
                return visitor.visitChildren(self)




    def stringOrParameter(self):

        localctx = CypherParser.StringOrParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_stringOrParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [276, 277]:
                self.state = 3496
                self.stringToken()
                pass
            elif token in [68]:
                self.state = 3497
                self.parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapOrParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_(self):
            return self.getTypedRuleContext(CypherParser.MapContext,0)


        def parameter(self):
            return self.getTypedRuleContext(CypherParser.ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_mapOrParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapOrParameter" ):
                listener.enterMapOrParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapOrParameter" ):
                listener.exitMapOrParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapOrParameter" ):
                return visitor.visitMapOrParameter(self)
            else:
                return visitor.visitChildren(self)




    def mapOrParameter(self):

        localctx = CypherParser.MapOrParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_mapOrParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.state = 3500
                self.map_()
                pass
            elif token in [68]:
                self.state = 3501
                self.parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(CypherParser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(CypherParser.RCURLY, 0)

        def symbolicNameString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameStringContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COLON)
            else:
                return self.getToken(CypherParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_map

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap" ):
                listener.enterMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap" ):
                listener.exitMap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap" ):
                return visitor.visitMap(self)
            else:
                return visitor.visitChildren(self)




    def map_(self):

        localctx = CypherParser.MapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_map)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3504
            self.match(CypherParser.LCURLY)
            self.state = 3518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -962081063040) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257007) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -605739372561571377) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & -8796093548545) != 0) or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & 526335) != 0):
                self.state = 3505
                self.symbolicNameString()
                self.state = 3506
                self.match(CypherParser.COLON)
                self.state = 3507
                self.expression()
                self.state = 3515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==39:
                    self.state = 3508
                    self.match(CypherParser.COMMA)
                    self.state = 3509
                    self.symbolicNameString()
                    self.state = 3510
                    self.match(CypherParser.COLON)
                    self.state = 3511
                    self.expression()
                    self.state = 3517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3520
            self.match(CypherParser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicNamePositionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.SymbolicNameStringContext)
            else:
                return self.getTypedRuleContext(CypherParser.SymbolicNameStringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.COMMA)
            else:
                return self.getToken(CypherParser.COMMA, i)

        def getRuleIndex(self):
            return CypherParser.RULE_symbolicNamePositions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicNamePositions" ):
                listener.enterSymbolicNamePositions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicNamePositions" ):
                listener.exitSymbolicNamePositions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicNamePositions" ):
                return visitor.visitSymbolicNamePositions(self)
            else:
                return visitor.visitChildren(self)




    def symbolicNamePositions(self):

        localctx = CypherParser.SymbolicNamePositionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_symbolicNamePositions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3522
            self.symbolicNameString()
            self.state = 3527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 3523
                self.match(CypherParser.COMMA)
                self.state = 3524
                self.symbolicNameString()
                self.state = 3529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escapedSymbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.EscapedSymbolicNameStringContext,0)


        def unescapedSymbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.UnescapedSymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_symbolicNameString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicNameString" ):
                listener.enterSymbolicNameString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicNameString" ):
                listener.exitSymbolicNameString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicNameString" ):
                return visitor.visitSymbolicNameString(self)
            else:
                return visitor.visitChildren(self)




    def symbolicNameString(self):

        localctx = CypherParser.SymbolicNameStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_symbolicNameString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [279]:
                self.state = 3530
                self.escapedSymbolicNameString()
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270]:
                self.state = 3531
                self.unescapedSymbolicNameString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EscapedSymbolicNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPED_SYMBOLIC_NAME(self):
            return self.getToken(CypherParser.ESCAPED_SYMBOLIC_NAME, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_escapedSymbolicNameString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscapedSymbolicNameString" ):
                listener.enterEscapedSymbolicNameString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscapedSymbolicNameString" ):
                listener.exitEscapedSymbolicNameString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEscapedSymbolicNameString" ):
                return visitor.visitEscapedSymbolicNameString(self)
            else:
                return visitor.visitChildren(self)




    def escapedSymbolicNameString(self):

        localctx = CypherParser.EscapedSymbolicNameStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_escapedSymbolicNameString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3534
            self.match(CypherParser.ESCAPED_SYMBOLIC_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnescapedSymbolicNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unescapedLabelSymbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.UnescapedLabelSymbolicNameStringContext,0)


        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def TYPED(self):
            return self.getToken(CypherParser.TYPED, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_unescapedSymbolicNameString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnescapedSymbolicNameString" ):
                listener.enterUnescapedSymbolicNameString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnescapedSymbolicNameString" ):
                listener.exitUnescapedSymbolicNameString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnescapedSymbolicNameString" ):
                return visitor.visitUnescapedSymbolicNameString(self)
            else:
                return visitor.visitChildren(self)




    def unescapedSymbolicNameString(self):

        localctx = CypherParser.UnescapedSymbolicNameStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_unescapedSymbolicNameString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270]:
                self.state = 3536
                self.unescapedLabelSymbolicNameString()
                pass
            elif token in [152]:
                self.state = 3537
                self.match(CypherParser.NOT)
                pass
            elif token in [154]:
                self.state = 3538
                self.match(CypherParser.NULL)
                pass
            elif token in [249]:
                self.state = 3539
                self.match(CypherParser.TYPED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicLabelNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escapedSymbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.EscapedSymbolicNameStringContext,0)


        def unescapedLabelSymbolicNameString(self):
            return self.getTypedRuleContext(CypherParser.UnescapedLabelSymbolicNameStringContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_symbolicLabelNameString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicLabelNameString" ):
                listener.enterSymbolicLabelNameString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicLabelNameString" ):
                listener.exitSymbolicLabelNameString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicLabelNameString" ):
                return visitor.visitSymbolicLabelNameString(self)
            else:
                return visitor.visitChildren(self)




    def symbolicLabelNameString(self):

        localctx = CypherParser.SymbolicLabelNameStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_symbolicLabelNameString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [279]:
                self.state = 3542
                self.escapedSymbolicNameString()
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270]:
                self.state = 3543
                self.unescapedLabelSymbolicNameString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnescapedLabelSymbolicNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CypherParser.IDENTIFIER, 0)

        def ACCESS(self):
            return self.getToken(CypherParser.ACCESS, 0)

        def ACTIVE(self):
            return self.getToken(CypherParser.ACTIVE, 0)

        def ADMIN(self):
            return self.getToken(CypherParser.ADMIN, 0)

        def ADMINISTRATOR(self):
            return self.getToken(CypherParser.ADMINISTRATOR, 0)

        def ALIAS(self):
            return self.getToken(CypherParser.ALIAS, 0)

        def ALIASES(self):
            return self.getToken(CypherParser.ALIASES, 0)

        def ALL_SHORTEST_PATH(self):
            return self.getToken(CypherParser.ALL_SHORTEST_PATH, 0)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def ALTER(self):
            return self.getToken(CypherParser.ALTER, 0)

        def AND(self):
            return self.getToken(CypherParser.AND, 0)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def ASSERT(self):
            return self.getToken(CypherParser.ASSERT, 0)

        def ASSIGN(self):
            return self.getToken(CypherParser.ASSIGN, 0)

        def AT(self):
            return self.getToken(CypherParser.AT, 0)

        def BINDINGS(self):
            return self.getToken(CypherParser.BINDINGS, 0)

        def BOOL(self):
            return self.getToken(CypherParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(CypherParser.BOOLEAN, 0)

        def BOOSTED(self):
            return self.getToken(CypherParser.BOOSTED, 0)

        def BREAK(self):
            return self.getToken(CypherParser.BREAK, 0)

        def BRIEF(self):
            return self.getToken(CypherParser.BRIEF, 0)

        def BTREE(self):
            return self.getToken(CypherParser.BTREE, 0)

        def BUILT(self):
            return self.getToken(CypherParser.BUILT, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def CHANGE(self):
            return self.getToken(CypherParser.CHANGE, 0)

        def COLLECT(self):
            return self.getToken(CypherParser.COLLECT, 0)

        def COMMAND(self):
            return self.getToken(CypherParser.COMMAND, 0)

        def COMMANDS(self):
            return self.getToken(CypherParser.COMMANDS, 0)

        def COMMIT(self):
            return self.getToken(CypherParser.COMMIT, 0)

        def COMPOSITE(self):
            return self.getToken(CypherParser.COMPOSITE, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(CypherParser.CONSTRAINTS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def CONTINUE(self):
            return self.getToken(CypherParser.CONTINUE, 0)

        def COPY(self):
            return self.getToken(CypherParser.COPY, 0)

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def CSV(self):
            return self.getToken(CypherParser.CSV, 0)

        def CURRENT(self):
            return self.getToken(CypherParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(CypherParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(CypherParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(CypherParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(CypherParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(CypherParser.DATETIME, 0)

        def DBMS(self):
            return self.getToken(CypherParser.DBMS, 0)

        def DEALLOCATE(self):
            return self.getToken(CypherParser.DEALLOCATE, 0)

        def DEFAULT(self):
            return self.getToken(CypherParser.DEFAULT, 0)

        def DEFINED(self):
            return self.getToken(CypherParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def DENY(self):
            return self.getToken(CypherParser.DENY, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def DESTROY(self):
            return self.getToken(CypherParser.DESTROY, 0)

        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def DIFFERENT(self):
            return self.getToken(CypherParser.DIFFERENT, 0)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def DRIVER(self):
            return self.getToken(CypherParser.DRIVER, 0)

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def DRYRUN(self):
            return self.getToken(CypherParser.DRYRUN, 0)

        def DUMP(self):
            return self.getToken(CypherParser.DUMP, 0)

        def DURATION(self):
            return self.getToken(CypherParser.DURATION, 0)

        def EACH(self):
            return self.getToken(CypherParser.EACH, 0)

        def ELEMENT(self):
            return self.getToken(CypherParser.ELEMENT, 0)

        def ELEMENTS(self):
            return self.getToken(CypherParser.ELEMENTS, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def ENABLE(self):
            return self.getToken(CypherParser.ENABLE, 0)

        def ENCRYPTED(self):
            return self.getToken(CypherParser.ENCRYPTED, 0)

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def ERROR(self):
            return self.getToken(CypherParser.ERROR, 0)

        def EXECUTABLE(self):
            return self.getToken(CypherParser.EXECUTABLE, 0)

        def EXECUTE(self):
            return self.getToken(CypherParser.EXECUTE, 0)

        def EXIST(self):
            return self.getToken(CypherParser.EXIST, 0)

        def EXISTENCE(self):
            return self.getToken(CypherParser.EXISTENCE, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def FAIL(self):
            return self.getToken(CypherParser.FAIL, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def FIELDTERMINATOR(self):
            return self.getToken(CypherParser.FIELDTERMINATOR, 0)

        def FLOAT(self):
            return self.getToken(CypherParser.FLOAT, 0)

        def FOREACH(self):
            return self.getToken(CypherParser.FOREACH, 0)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def FROM(self):
            return self.getToken(CypherParser.FROM, 0)

        def FULLTEXT(self):
            return self.getToken(CypherParser.FULLTEXT, 0)

        def FUNCTION(self):
            return self.getToken(CypherParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(CypherParser.FUNCTIONS, 0)

        def GRANT(self):
            return self.getToken(CypherParser.GRANT, 0)

        def GRAPH(self):
            return self.getToken(CypherParser.GRAPH, 0)

        def GRAPHS(self):
            return self.getToken(CypherParser.GRAPHS, 0)

        def GROUP(self):
            return self.getToken(CypherParser.GROUP, 0)

        def GROUPS(self):
            return self.getToken(CypherParser.GROUPS, 0)

        def HEADERS(self):
            return self.getToken(CypherParser.HEADERS, 0)

        def HOME(self):
            return self.getToken(CypherParser.HOME, 0)

        def IF(self):
            return self.getToken(CypherParser.IF, 0)

        def IMMUTABLE(self):
            return self.getToken(CypherParser.IMMUTABLE, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(CypherParser.INDEXES, 0)

        def INF(self):
            return self.getToken(CypherParser.INF, 0)

        def INFINITY(self):
            return self.getToken(CypherParser.INFINITY, 0)

        def INT(self):
            return self.getToken(CypherParser.INT, 0)

        def INTEGER(self):
            return self.getToken(CypherParser.INTEGER, 0)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def JOIN(self):
            return self.getToken(CypherParser.JOIN, 0)

        def KEY(self):
            return self.getToken(CypherParser.KEY, 0)

        def LABEL(self):
            return self.getToken(CypherParser.LABEL, 0)

        def LABELS(self):
            return self.getToken(CypherParser.LABELS, 0)

        def LIMITROWS(self):
            return self.getToken(CypherParser.LIMITROWS, 0)

        def LOAD(self):
            return self.getToken(CypherParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(CypherParser.LOCAL, 0)

        def LOOKUP(self):
            return self.getToken(CypherParser.LOOKUP, 0)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def MANAGEMENT(self):
            return self.getToken(CypherParser.MANAGEMENT, 0)

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def NAME(self):
            return self.getToken(CypherParser.NAME, 0)

        def NAMES(self):
            return self.getToken(CypherParser.NAMES, 0)

        def NAN(self):
            return self.getToken(CypherParser.NAN, 0)

        def NEW(self):
            return self.getToken(CypherParser.NEW, 0)

        def NODE(self):
            return self.getToken(CypherParser.NODE, 0)

        def NODES(self):
            return self.getToken(CypherParser.NODES, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def NOWAIT(self):
            return self.getToken(CypherParser.NOWAIT, 0)

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def ONLY(self):
            return self.getToken(CypherParser.ONLY, 0)

        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def OPTIONS(self):
            return self.getToken(CypherParser.OPTIONS, 0)

        def OPTION(self):
            return self.getToken(CypherParser.OPTION, 0)

        def OR(self):
            return self.getToken(CypherParser.OR, 0)

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def OUTPUT(self):
            return self.getToken(CypherParser.OUTPUT, 0)

        def PASSWORD(self):
            return self.getToken(CypherParser.PASSWORD, 0)

        def PASSWORDS(self):
            return self.getToken(CypherParser.PASSWORDS, 0)

        def PATH(self):
            return self.getToken(CypherParser.PATH, 0)

        def PATHS(self):
            return self.getToken(CypherParser.PATHS, 0)

        def PERIODIC(self):
            return self.getToken(CypherParser.PERIODIC, 0)

        def PLAINTEXT(self):
            return self.getToken(CypherParser.PLAINTEXT, 0)

        def POINT(self):
            return self.getToken(CypherParser.POINT, 0)

        def POPULATED(self):
            return self.getToken(CypherParser.POPULATED, 0)

        def PRIMARY(self):
            return self.getToken(CypherParser.PRIMARY, 0)

        def PRIMARIES(self):
            return self.getToken(CypherParser.PRIMARIES, 0)

        def PRIVILEGE(self):
            return self.getToken(CypherParser.PRIVILEGE, 0)

        def PRIVILEGES(self):
            return self.getToken(CypherParser.PRIVILEGES, 0)

        def PROCEDURE(self):
            return self.getToken(CypherParser.PROCEDURE, 0)

        def PROCEDURES(self):
            return self.getToken(CypherParser.PROCEDURES, 0)

        def PROPERTIES(self):
            return self.getToken(CypherParser.PROPERTIES, 0)

        def PROPERTY(self):
            return self.getToken(CypherParser.PROPERTY, 0)

        def RANGE(self):
            return self.getToken(CypherParser.RANGE, 0)

        def READ(self):
            return self.getToken(CypherParser.READ, 0)

        def REALLOCATE(self):
            return self.getToken(CypherParser.REALLOCATE, 0)

        def REDUCE(self):
            return self.getToken(CypherParser.REDUCE, 0)

        def REL(self):
            return self.getToken(CypherParser.REL, 0)

        def RELATIONSHIP(self):
            return self.getToken(CypherParser.RELATIONSHIP, 0)

        def RELATIONSHIPS(self):
            return self.getToken(CypherParser.RELATIONSHIPS, 0)

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(CypherParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(CypherParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(CypherParser.REPLACE, 0)

        def REPORT(self):
            return self.getToken(CypherParser.REPORT, 0)

        def REQUIRE(self):
            return self.getToken(CypherParser.REQUIRE, 0)

        def REQUIRED(self):
            return self.getToken(CypherParser.REQUIRED, 0)

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def REVOKE(self):
            return self.getToken(CypherParser.REVOKE, 0)

        def ROLE(self):
            return self.getToken(CypherParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(CypherParser.ROLES, 0)

        def ROW(self):
            return self.getToken(CypherParser.ROW, 0)

        def ROWS(self):
            return self.getToken(CypherParser.ROWS, 0)

        def SCAN(self):
            return self.getToken(CypherParser.SCAN, 0)

        def SEC(self):
            return self.getToken(CypherParser.SEC, 0)

        def SECOND(self):
            return self.getToken(CypherParser.SECOND, 0)

        def SECONDARY(self):
            return self.getToken(CypherParser.SECONDARY, 0)

        def SECONDARIES(self):
            return self.getToken(CypherParser.SECONDARIES, 0)

        def SECONDS(self):
            return self.getToken(CypherParser.SECONDS, 0)

        def SEEK(self):
            return self.getToken(CypherParser.SEEK, 0)

        def SERVER(self):
            return self.getToken(CypherParser.SERVER, 0)

        def SERVERS(self):
            return self.getToken(CypherParser.SERVERS, 0)

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def SETTING(self):
            return self.getToken(CypherParser.SETTING, 0)

        def SETTINGS(self):
            return self.getToken(CypherParser.SETTINGS, 0)

        def SHORTEST(self):
            return self.getToken(CypherParser.SHORTEST, 0)

        def SHORTEST_PATH(self):
            return self.getToken(CypherParser.SHORTEST_PATH, 0)

        def SHOW(self):
            return self.getToken(CypherParser.SHOW, 0)

        def SIGNED(self):
            return self.getToken(CypherParser.SIGNED, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def SKIPROWS(self):
            return self.getToken(CypherParser.SKIPROWS, 0)

        def START(self):
            return self.getToken(CypherParser.START, 0)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def STATUS(self):
            return self.getToken(CypherParser.STATUS, 0)

        def STOP(self):
            return self.getToken(CypherParser.STOP, 0)

        def STRING(self):
            return self.getToken(CypherParser.STRING, 0)

        def SUPPORTED(self):
            return self.getToken(CypherParser.SUPPORTED, 0)

        def SUSPENDED(self):
            return self.getToken(CypherParser.SUSPENDED, 0)

        def TARGET(self):
            return self.getToken(CypherParser.TARGET, 0)

        def TERMINATE(self):
            return self.getToken(CypherParser.TERMINATE, 0)

        def TEXT(self):
            return self.getToken(CypherParser.TEXT, 0)

        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def TIME(self):
            return self.getToken(CypherParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(CypherParser.TIMESTAMP, 0)

        def TIMEZONE(self):
            return self.getToken(CypherParser.TIMEZONE, 0)

        def TO(self):
            return self.getToken(CypherParser.TO, 0)

        def TOPOLOGY(self):
            return self.getToken(CypherParser.TOPOLOGY, 0)

        def TRANSACTION(self):
            return self.getToken(CypherParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(CypherParser.TRANSACTIONS, 0)

        def TRAVERSE(self):
            return self.getToken(CypherParser.TRAVERSE, 0)

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def TYPE(self):
            return self.getToken(CypherParser.TYPE, 0)

        def TYPES(self):
            return self.getToken(CypherParser.TYPES, 0)

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def UNIQUENESS(self):
            return self.getToken(CypherParser.UNIQUENESS, 0)

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def USE(self):
            return self.getToken(CypherParser.USE, 0)

        def USER(self):
            return self.getToken(CypherParser.USER, 0)

        def USERS(self):
            return self.getToken(CypherParser.USERS, 0)

        def USING(self):
            return self.getToken(CypherParser.USING, 0)

        def VARCHAR(self):
            return self.getToken(CypherParser.VARCHAR, 0)

        def VERBOSE(self):
            return self.getToken(CypherParser.VERBOSE, 0)

        def WAIT(self):
            return self.getToken(CypherParser.WAIT, 0)

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(CypherParser.WITHOUT, 0)

        def WRITE(self):
            return self.getToken(CypherParser.WRITE, 0)

        def XOR(self):
            return self.getToken(CypherParser.XOR, 0)

        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def ZONED(self):
            return self.getToken(CypherParser.ZONED, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_unescapedLabelSymbolicNameString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnescapedLabelSymbolicNameString" ):
                listener.enterUnescapedLabelSymbolicNameString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnescapedLabelSymbolicNameString" ):
                listener.exitUnescapedLabelSymbolicNameString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnescapedLabelSymbolicNameString" ):
                return visitor.visitUnescapedLabelSymbolicNameString(self)
            else:
                return visitor.visitChildren(self)




    def unescapedLabelSymbolicNameString(self):

        localctx = CypherParser.UnescapedLabelSymbolicNameStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_unescapedLabelSymbolicNameString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3546
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -962081063040) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9222773352769257007) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -605739372566814257) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & -9015995348289537) != 0) or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & 2047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CypherParser.EOF, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_endOfFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfFile" ):
                listener.enterEndOfFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfFile" ):
                listener.exitEndOfFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfFile" ):
                return visitor.visitEndOfFile(self)
            else:
                return visitor.visitChildren(self)




    def endOfFile(self):

        localctx = CypherParser.EndOfFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_endOfFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3548
            self.match(CypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





